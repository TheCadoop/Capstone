
/Users/cademissner/Desktop/IoT/Capstone/target/3.3.0/argon/Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006114  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba130  000ba130  0000a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba154  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e4e4  000ba158  0001e4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000298  2003e558  2003e558  0002e558  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000ba1cc  000ba1cc  0002a1cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba1f4  000ba1f4  0002a1f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001719a6  00000000  00000000  0002a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001a218  00000000  00000000  0019bb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004c136  00000000  00000000  001b5db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000036d0  00000000  00000000  00201eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bcd0  00000000  00000000  002055bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046e2d  00000000  00000000  0021128c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005b58d  00000000  00000000  002580b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f0d0  00000000  00000000  002b3646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a2d0  00000000  00000000  003f2718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 fc67 	bl	b8900 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 fc6f 	bl	b891c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e4e4 	.word	0x2003e4e4
   b4048:	000ba158 	.word	0x000ba158
   b404c:	2003e558 	.word	0x2003e558
   b4050:	2003e558 	.word	0x2003e558
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f004 f9c7 	bl	b83f0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000ba108 	.word	0x000ba108
   b407c:	000ba12c 	.word	0x000ba12c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bd80 	b.w	b4b84 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 ff69 	bl	b4f5c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f004 b967 	b.w	b8360 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f003 b86b 	b.w	b716c <malloc>

000b4096 <_Znaj>:
   b4096:	f003 b869 	b.w	b716c <malloc>

000b409a <_ZdaPv>:
   b409a:	f003 b86f 	b.w	b717c <free>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 b86d 	b.w	b717c <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 ffaa 	bl	b7004 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b6c85 	.word	0x000b6c85
   b40b8:	000b8bdc 	.word	0x000b8bdc

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40cc:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ce:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40d0:	4606      	mov	r6, r0
   b40d2:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40d4:	da0b      	bge.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40d6:	2a0a      	cmp	r2, #10
   b40d8:	d109      	bne.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40da:	212d      	movs	r1, #45	; 0x2d
   b40dc:	f003 fa94 	bl	b7608 <_ZN5Print5printEc>
            val = -n;
   b40e0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40e2:	b2ea      	uxtb	r2, r5
   b40e4:	4630      	mov	r0, r6
    }
}
   b40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40ea:	f003 baa6 	b.w	b763a <_ZN5Print11printNumberEmh>
            val = n;
   b40ee:	4621      	mov	r1, r4
   b40f0:	e7f7      	b.n	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>
	...

000b40f4 <_Z8callbackPcPhj>:
MQTT client("lab.thewcl.com", 1883, callback);

int practices = -1;
int practicesNeeded = -1;

void callback(char* topic, byte* payload, unsigned int length) {
   b40f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  char p[length + 1];
   b40f6:	f102 0308 	add.w	r3, r2, #8
void callback(char* topic, byte* payload, unsigned int length) {
   b40fa:	b085      	sub	sp, #20
  char p[length + 1];
   b40fc:	f023 0307 	bic.w	r3, r3, #7
void callback(char* topic, byte* payload, unsigned int length) {
   b4100:	af00      	add	r7, sp, #0
  char p[length + 1];
   b4102:	ebad 0d03 	sub.w	sp, sp, r3
void callback(char* topic, byte* payload, unsigned int length) {
   b4106:	4614      	mov	r4, r2
   b4108:	4606      	mov	r6, r0
  memcpy(p, payload, length);
   b410a:	4668      	mov	r0, sp
   b410c:	f004 fbf8 	bl	b8900 <memcpy>
  p[length] = NULL;
   b4110:	2300      	movs	r3, #0

  int recievedInt = atoi(p);
   b4112:	4668      	mov	r0, sp
  p[length] = NULL;
   b4114:	f80d 3004 	strb.w	r3, [sp, r4]
  int recievedInt = atoi(p);
   b4118:	f004 fbea 	bl	b88f0 <atoi>
   b411c:	4605      	mov	r5, r0
  Serial.println(recievedInt);
   b411e:	f004 f84d 	bl	b81bc <_Z16_fetch_usbserialv>
   b4122:	220a      	movs	r2, #10
   b4124:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   b4126:	4629      	mov	r1, r5
   b4128:	f7ff ffd0 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b412c:	4620      	mov	r0, r4
   b412e:	f003 fa6e 	bl	b760e <_ZN5Print7printlnEv>
  if (String(topic).equals("cade/capstone/calendarout") && practices != -1) {
   b4132:	4631      	mov	r1, r6
   b4134:	4638      	mov	r0, r7
   b4136:	f003 fbfc 	bl	b7932 <_ZN6StringC1EPK19__FlashStringHelper>
   b413a:	490d      	ldr	r1, [pc, #52]	; (b4170 <_Z8callbackPcPhj+0x7c>)
   b413c:	4638      	mov	r0, r7
   b413e:	f003 fc6e 	bl	b7a1e <_ZNK6String6equalsEPKc>
   b4142:	4604      	mov	r4, r0
   b4144:	b120      	cbz	r0, b4150 <_Z8callbackPcPhj+0x5c>
   b4146:	4b0b      	ldr	r3, [pc, #44]	; (b4174 <_Z8callbackPcPhj+0x80>)
   b4148:	681c      	ldr	r4, [r3, #0]
   b414a:	3401      	adds	r4, #1
   b414c:	bf18      	it	ne
   b414e:	2401      	movne	r4, #1
   b4150:	4638      	mov	r0, r7
   b4152:	f003 fba3 	bl	b789c <_ZN6StringD1Ev>
   b4156:	b144      	cbz	r4, b416a <_Z8callbackPcPhj+0x76>
    if (recievedInt >= practices) {
   b4158:	4b06      	ldr	r3, [pc, #24]	; (b4174 <_Z8callbackPcPhj+0x80>)
   b415a:	6818      	ldr	r0, [r3, #0]
   b415c:	4b06      	ldr	r3, [pc, #24]	; (b4178 <_Z8callbackPcPhj+0x84>)
   b415e:	42a8      	cmp	r0, r5
      practicesNeeded = 0;
   b4160:	bfd5      	itete	le
   b4162:	2200      	movle	r2, #0
    } else if (recievedInt < practices) {
      practicesNeeded = practices - recievedInt;
   b4164:	1b40      	subgt	r0, r0, r5
      practicesNeeded = 0;
   b4166:	601a      	strle	r2, [r3, #0]
      practicesNeeded = practices - recievedInt;
   b4168:	6018      	strgt	r0, [r3, #0]
    }
  }
}
   b416a:	3714      	adds	r7, #20
   b416c:	46bd      	mov	sp, r7
   b416e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4170:	000b8bf1 	.word	0x000b8bf1
   b4174:	2003e4e4 	.word	0x2003e4e4
   b4178:	2003e4e8 	.word	0x2003e4e8

000b417c <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b417c:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b417e:	f002 fd89 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4182:	4b03      	ldr	r3, [pc, #12]	; (b4190 <_ZN10CloudClass7processEv+0x14>)
   b4184:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b4186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b418a:	f002 bf77 	b.w	b707c <spark_process>
   b418e:	bf00      	nop
   b4190:	2003e728 	.word	0x2003e728

000b4194 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4194:	6803      	ldr	r3, [r0, #0]
   b4196:	b12b      	cbz	r3, b41a4 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4198:	6842      	ldr	r2, [r0, #4]
   b419a:	4293      	cmp	r3, r2
   b419c:	d202      	bcs.n	b41a4 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b419e:	4618      	mov	r0, r3
   b41a0:	f004 bba6 	b.w	b88f0 <atoi>
   b41a4:	2000      	movs	r0, #0
   b41a6:	4770      	bx	lr

000b41a8 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b41a8:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b41aa:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b41ac:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b41ae:	b145      	cbz	r5, b41c2 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b41b0:	6843      	ldr	r3, [r0, #4]
   b41b2:	429d      	cmp	r5, r3
   b41b4:	d205      	bcs.n	b41c2 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b41b6:	4628      	mov	r0, r5
   b41b8:	f004 fbf8 	bl	b89ac <strlen>
   b41bc:	3001      	adds	r0, #1
   b41be:	4405      	add	r5, r0
   b41c0:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b41c2:	4620      	mov	r0, r4
   b41c4:	bd38      	pop	{r3, r4, r5, pc}

000b41c6 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b41c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b41c8:	4604      	mov	r4, r0
   b41ca:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b41cc:	460d      	mov	r5, r1
   b41ce:	b921      	cbnz	r1, b41da <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b41d0:	6803      	ldr	r3, [r0, #0]
   b41d2:	1c7a      	adds	r2, r7, #1
   b41d4:	6042      	str	r2, [r0, #4]
   b41d6:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b41d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b41da:	4608      	mov	r0, r1
   b41dc:	f004 fbe6 	bl	b89ac <strlen>
    if (len + l > buff_size)
   b41e0:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b41e2:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b41e4:	19f2      	adds	r2, r6, r7
   b41e6:	429a      	cmp	r2, r3
   b41e8:	d8f6      	bhi.n	b41d8 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b41ea:	6820      	ldr	r0, [r4, #0]
   b41ec:	4632      	mov	r2, r6
   b41ee:	4629      	mov	r1, r5
   b41f0:	4438      	add	r0, r7
   b41f2:	f004 fb85 	bl	b8900 <memcpy>
    len += l;
   b41f6:	6860      	ldr	r0, [r4, #4]
   b41f8:	4430      	add	r0, r6
   b41fa:	6060      	str	r0, [r4, #4]
   b41fc:	e7ec      	b.n	b41d8 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4200 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4200:	b538      	push	{r3, r4, r5, lr}
   b4202:	4604      	mov	r4, r0
   b4204:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4206:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b420a:	6825      	ldr	r5, [r4, #0]
   b420c:	4a04      	ldr	r2, [pc, #16]	; (b4220 <_ZN10BlynkParam3addEi+0x20>)
   b420e:	1a09      	subs	r1, r1, r0
   b4210:	4428      	add	r0, r5
   b4212:	f002 ffc3 	bl	b719c <snprintf>
   b4216:	6863      	ldr	r3, [r4, #4]
   b4218:	3001      	adds	r0, #1
   b421a:	4403      	add	r3, r0
   b421c:	6063      	str	r3, [r4, #4]
    }
   b421e:	bd38      	pop	{r3, r4, r5, pc}
   b4220:	000b8c0b 	.word	0x000b8c0b

000b4224 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4224:	b538      	push	{r3, r4, r5, lr}
   b4226:	4604      	mov	r4, r0
   b4228:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b422a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b422e:	6825      	ldr	r5, [r4, #0]
   b4230:	4a04      	ldr	r2, [pc, #16]	; (b4244 <_ZN10BlynkParam3addEl+0x20>)
   b4232:	1a09      	subs	r1, r1, r0
   b4234:	4428      	add	r0, r5
   b4236:	f002 ffb1 	bl	b719c <snprintf>
   b423a:	6863      	ldr	r3, [r4, #4]
   b423c:	3001      	adds	r0, #1
   b423e:	4403      	add	r3, r0
   b4240:	6063      	str	r3, [r4, #4]
    }
   b4242:	bd38      	pop	{r3, r4, r5, pc}
   b4244:	000b8c0e 	.word	0x000b8c0e

000b4248 <BlynkWidgetWrite0>:
  Blynk.syncVirtual(V0);
  Blynk.syncVirtual(V1);
  Blynk.syncVirtual(V3);
}

BLYNK_WRITE(V0) {
   b4248:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
   b424a:	6808      	ldr	r0, [r1, #0]
   b424c:	f004 fb50 	bl	b88f0 <atoi>
  value = param.asInt();
   b4250:	4b04      	ldr	r3, [pc, #16]	; (b4264 <BlynkWidgetWrite0+0x1c>)
   b4252:	6018      	str	r0, [r3, #0]
  Serial.println("Slider");
   b4254:	f003 ffb2 	bl	b81bc <_Z16_fetch_usbserialv>
}
   b4258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("Slider");
   b425c:	4902      	ldr	r1, [pc, #8]	; (b4268 <BlynkWidgetWrite0+0x20>)
   b425e:	f003 b9e2 	b.w	b7626 <_ZN5Print7printlnEPKc>
   b4262:	bf00      	nop
   b4264:	2003e6b4 	.word	0x2003e6b4
   b4268:	000b8c12 	.word	0x000b8c12

000b426c <BlynkWidgetWrite2>:

BLYNK_WRITE(V2) {
   b426c:	b508      	push	{r3, lr}
   b426e:	6808      	ldr	r0, [r1, #0]
   b4270:	f004 fb3e 	bl	b88f0 <atoi>
  if (param.asInt() == 1) {
   b4274:	2801      	cmp	r0, #1
   b4276:	d104      	bne.n	b4282 <BlynkWidgetWrite2+0x16>
    timer = 0;
   b4278:	4a05      	ldr	r2, [pc, #20]	; (b4290 <BlynkWidgetWrite2+0x24>)
   b427a:	2300      	movs	r3, #0
   b427c:	6013      	str	r3, [r2, #0]
    buzz = 0;
   b427e:	4a05      	ldr	r2, [pc, #20]	; (b4294 <BlynkWidgetWrite2+0x28>)
   b4280:	6013      	str	r3, [r2, #0]
  }
  Serial.println("Reset");
   b4282:	f003 ff9b 	bl	b81bc <_Z16_fetch_usbserialv>
}
   b4286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("Reset");
   b428a:	4903      	ldr	r1, [pc, #12]	; (b4298 <BlynkWidgetWrite2+0x2c>)
   b428c:	f003 b9cb 	b.w	b7626 <_ZN5Print7printlnEPKc>
   b4290:	2003e6b0 	.word	0x2003e6b0
   b4294:	2003e5b4 	.word	0x2003e5b4
   b4298:	000b8c19 	.word	0x000b8c19

000b429c <BlynkWidgetWrite3>:

BLYNK_WRITE(V3) {
   b429c:	b508      	push	{r3, lr}
   b429e:	6808      	ldr	r0, [r1, #0]
   b42a0:	f004 fb26 	bl	b88f0 <atoi>
  if (param.asInt() == 0) {
   b42a4:	4b05      	ldr	r3, [pc, #20]	; (b42bc <BlynkWidgetWrite3+0x20>)
   b42a6:	3800      	subs	r0, #0
   b42a8:	bf18      	it	ne
   b42aa:	2001      	movne	r0, #1
   b42ac:	7018      	strb	r0, [r3, #0]
    metronome = false;
  } else {
    metronome = true;
  }
  Serial.println("Metronome Toggle");
   b42ae:	f003 ff85 	bl	b81bc <_Z16_fetch_usbserialv>
}
   b42b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("Metronome Toggle");
   b42b6:	4902      	ldr	r1, [pc, #8]	; (b42c0 <BlynkWidgetWrite3+0x24>)
   b42b8:	f003 b9b5 	b.w	b7626 <_ZN5Print7printlnEPKc>
   b42bc:	2003e689 	.word	0x2003e689
   b42c0:	000b8c1f 	.word	0x000b8c1f

000b42c4 <BlynkWidgetWrite1>:

BLYNK_WRITE(V1) {
   b42c4:	b538      	push	{r3, r4, r5, lr}
  if (practices != param.asInt()) {
   b42c6:	4d0c      	ldr	r5, [pc, #48]	; (b42f8 <BlynkWidgetWrite1+0x34>)
   b42c8:	6808      	ldr	r0, [r1, #0]
BLYNK_WRITE(V1) {
   b42ca:	460c      	mov	r4, r1
   b42cc:	f004 fb10 	bl	b88f0 <atoi>
  if (practices != param.asInt()) {
   b42d0:	682b      	ldr	r3, [r5, #0]
   b42d2:	4283      	cmp	r3, r0
   b42d4:	d008      	beq.n	b42e8 <BlynkWidgetWrite1+0x24>
   b42d6:	6820      	ldr	r0, [r4, #0]
   b42d8:	f004 fb0a 	bl	b88f0 <atoi>
    practices = param.asInt();
    client.publish("cade/capstone/calendarin", "go");
   b42dc:	4a07      	ldr	r2, [pc, #28]	; (b42fc <BlynkWidgetWrite1+0x38>)
    practices = param.asInt();
   b42de:	6028      	str	r0, [r5, #0]
    client.publish("cade/capstone/calendarin", "go");
   b42e0:	4907      	ldr	r1, [pc, #28]	; (b4300 <BlynkWidgetWrite1+0x3c>)
   b42e2:	4808      	ldr	r0, [pc, #32]	; (b4304 <BlynkWidgetWrite1+0x40>)
   b42e4:	f002 fa21 	bl	b672a <_ZN4MQTT7publishEPKcS1_>
  }
  Serial.println("Practices");
   b42e8:	f003 ff68 	bl	b81bc <_Z16_fetch_usbserialv>
}
   b42ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Serial.println("Practices");
   b42f0:	4905      	ldr	r1, [pc, #20]	; (b4308 <BlynkWidgetWrite1+0x44>)
   b42f2:	f003 b998 	b.w	b7626 <_ZN5Print7printlnEPKc>
   b42f6:	bf00      	nop
   b42f8:	2003e4e4 	.word	0x2003e4e4
   b42fc:	000b8c30 	.word	0x000b8c30
   b4300:	000b8c33 	.word	0x000b8c33
   b4304:	2003e5b8 	.word	0x2003e5b8
   b4308:	000b8c4c 	.word	0x000b8c4c

000b430c <_Z8mqttLoopv>:
//     playMusic();
//     timerOfMine = millis();
//   }
// }

void mqttLoop() {
   b430c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (client.isConnected()) {
   b430e:	4810      	ldr	r0, [pc, #64]	; (b4350 <_Z8mqttLoopv+0x44>)
   b4310:	f002 f890 	bl	b6434 <_ZN4MQTT11isConnectedEv>
   b4314:	b128      	cbz	r0, b4322 <_Z8mqttLoopv+0x16>
    client.loop();
   b4316:	480e      	ldr	r0, [pc, #56]	; (b4350 <_Z8mqttLoopv+0x44>)
    client.connect(System.deviceID());
    client.subscribe("cade/capstone/calendarout");

    client.publish("cade/capstone/calendarin", "go");
  }
}
   b4318:	b005      	add	sp, #20
   b431a:	f85d eb04 	ldr.w	lr, [sp], #4
    client.loop();
   b431e:	f002 ba60 	b.w	b67e2 <_ZN4MQTT4loopEv>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4322:	4668      	mov	r0, sp
   b4324:	f002 feb2 	bl	b708c <spark_deviceID>
    client.connect(System.deviceID());
   b4328:	9900      	ldr	r1, [sp, #0]
   b432a:	4809      	ldr	r0, [pc, #36]	; (b4350 <_Z8mqttLoopv+0x44>)
   b432c:	f002 f972 	bl	b6614 <_ZN4MQTT7connectEPKc>
   b4330:	4668      	mov	r0, sp
   b4332:	f003 fab3 	bl	b789c <_ZN6StringD1Ev>
    client.subscribe("cade/capstone/calendarout");
   b4336:	4907      	ldr	r1, [pc, #28]	; (b4354 <_Z8mqttLoopv+0x48>)
   b4338:	4805      	ldr	r0, [pc, #20]	; (b4350 <_Z8mqttLoopv+0x44>)
   b433a:	f002 fb9a 	bl	b6a72 <_ZN4MQTT9subscribeEPKc>
    client.publish("cade/capstone/calendarin", "go");
   b433e:	4a06      	ldr	r2, [pc, #24]	; (b4358 <_Z8mqttLoopv+0x4c>)
   b4340:	4906      	ldr	r1, [pc, #24]	; (b435c <_Z8mqttLoopv+0x50>)
   b4342:	4803      	ldr	r0, [pc, #12]	; (b4350 <_Z8mqttLoopv+0x44>)
}
   b4344:	b005      	add	sp, #20
   b4346:	f85d eb04 	ldr.w	lr, [sp], #4
    client.publish("cade/capstone/calendarin", "go");
   b434a:	f002 b9ee 	b.w	b672a <_ZN4MQTT7publishEPKcS1_>
   b434e:	bf00      	nop
   b4350:	2003e5b8 	.word	0x2003e5b8
   b4354:	000b8bf1 	.word	0x000b8bf1
   b4358:	000b8c30 	.word	0x000b8c30
   b435c:	000b8c33 	.word	0x000b8c33

000b4360 <_Z17metronomeAndTimerv>:
    Blynk.notify(String("You need to add ") + String(practicesNeeded) + String(" more practice events this week."));
    practicesNeeded = -1;
  }
}

void metronomeAndTimer() {
   b4360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (metronome) {
   b4362:	4b54      	ldr	r3, [pc, #336]	; (b44b4 <_Z17metronomeAndTimerv+0x154>)
   b4364:	7819      	ldrb	r1, [r3, #0]
   b4366:	2900      	cmp	r1, #0
   b4368:	f000 808a 	beq.w	b4480 <_Z17metronomeAndTimerv+0x120>
    timeBetween = (60000 / value);
   b436c:	4c52      	ldr	r4, [pc, #328]	; (b44b8 <_Z17metronomeAndTimerv+0x158>)
   b436e:	4b53      	ldr	r3, [pc, #332]	; (b44bc <_Z17metronomeAndTimerv+0x15c>)

    if (millis() >= (myTimer + timeBetween)) {
   b4370:	4d53      	ldr	r5, [pc, #332]	; (b44c0 <_Z17metronomeAndTimerv+0x160>)
    timeBetween = (60000 / value);
   b4372:	681a      	ldr	r2, [r3, #0]
   b4374:	f64e 2360 	movw	r3, #60000	; 0xea60
   b4378:	fb93 f3f2 	sdiv	r3, r3, r2
   b437c:	6023      	str	r3, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b437e:	f002 fc89 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
    if (millis() >= (myTimer + timeBetween)) {
   b4382:	6822      	ldr	r2, [r4, #0]
   b4384:	682b      	ldr	r3, [r5, #0]
   b4386:	4c4f      	ldr	r4, [pc, #316]	; (b44c4 <_Z17metronomeAndTimerv+0x164>)
   b4388:	4413      	add	r3, r2
   b438a:	4283      	cmp	r3, r0
   b438c:	d81a      	bhi.n	b43c4 <_Z17metronomeAndTimerv+0x64>
   b438e:	f002 fc81 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
      myTimer = millis();
      digitalWrite(BUZZER, HIGH);
   b4392:	2101      	movs	r1, #1
      myTimer = millis();
   b4394:	6028      	str	r0, [r5, #0]
      digitalWrite(BUZZER, HIGH);
   b4396:	2006      	movs	r0, #6
   b4398:	f004 f8ab 	bl	b84f2 <digitalWrite>
   b439c:	f002 fc7a 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
      timeOn = millis();
   b43a0:	4b49      	ldr	r3, [pc, #292]	; (b44c8 <_Z17metronomeAndTimerv+0x168>)
   b43a2:	6018      	str	r0, [r3, #0]
      isOn = true;
   b43a4:	2301      	movs	r3, #1
   b43a6:	7023      	strb	r3, [r4, #0]
   b43a8:	f002 fc74 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
    }

    if (isOn == true) {
      if (millis() >= (timeOn + KtimeOn)) {
   b43ac:	4b46      	ldr	r3, [pc, #280]	; (b44c8 <_Z17metronomeAndTimerv+0x168>)
   b43ae:	681b      	ldr	r3, [r3, #0]
   b43b0:	3332      	adds	r3, #50	; 0x32
   b43b2:	4283      	cmp	r3, r0
   b43b4:	d809      	bhi.n	b43ca <_Z17metronomeAndTimerv+0x6a>
        digitalWrite(BUZZER, LOW);
   b43b6:	2100      	movs	r1, #0
   b43b8:	2006      	movs	r0, #6
   b43ba:	f004 f89a 	bl	b84f2 <digitalWrite>
        isOn = false;
   b43be:	2300      	movs	r3, #0
   b43c0:	7023      	strb	r3, [r4, #0]
   b43c2:	e002      	b.n	b43ca <_Z17metronomeAndTimerv+0x6a>
    if (isOn == true) {
   b43c4:	7823      	ldrb	r3, [r4, #0]
   b43c6:	2b00      	cmp	r3, #0
   b43c8:	d1ee      	bne.n	b43a8 <_Z17metronomeAndTimerv+0x48>
    }
  } else if (metronome == false) {
    digitalWrite(BUZZER, LOW);
  }

  if (display.pressedA()) {
   b43ca:	4840      	ldr	r0, [pc, #256]	; (b44cc <_Z17metronomeAndTimerv+0x16c>)
   b43cc:	4d3f      	ldr	r5, [pc, #252]	; (b44cc <_Z17metronomeAndTimerv+0x16c>)
   b43ce:	4c40      	ldr	r4, [pc, #256]	; (b44d0 <_Z17metronomeAndTimerv+0x170>)
   b43d0:	f002 fc0a 	bl	b6be8 <_ZN16OledWingAdafruit8pressedAEv>
   b43d4:	2800      	cmp	r0, #0
   b43d6:	d057      	beq.n	b4488 <_Z17metronomeAndTimerv+0x128>
    timer = timer + 60000;
   b43d8:	6823      	ldr	r3, [r4, #0]
   b43da:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
   b43de:	3360      	adds	r3, #96	; 0x60
    buzz = 50;
  } else if (display.pressedB()) {
    timer = timer + 300000;
    buzz = 50;
  } else if (display.pressedC()) {
    timer = timer + 600000;
   b43e0:	6023      	str	r3, [r4, #0]
    buzz = 50;
   b43e2:	4b3c      	ldr	r3, [pc, #240]	; (b44d4 <_Z17metronomeAndTimerv+0x174>)
   b43e4:	2232      	movs	r2, #50	; 0x32
   b43e6:	601a      	str	r2, [r3, #0]
  }

  time0 = time1;
   b43e8:	4f3b      	ldr	r7, [pc, #236]	; (b44d8 <_Z17metronomeAndTimerv+0x178>)
   b43ea:	4e3c      	ldr	r6, [pc, #240]	; (b44dc <_Z17metronomeAndTimerv+0x17c>)
   b43ec:	683b      	ldr	r3, [r7, #0]
   b43ee:	6033      	str	r3, [r6, #0]
   b43f0:	f002 fc50 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
  time1 = millis();
  time2 = time1 - time0;
   b43f4:	6833      	ldr	r3, [r6, #0]
  time1 = millis();
   b43f6:	6038      	str	r0, [r7, #0]
  time2 = time1 - time0;
   b43f8:	1ac0      	subs	r0, r0, r3
   b43fa:	4b39      	ldr	r3, [pc, #228]	; (b44e0 <_Z17metronomeAndTimerv+0x180>)
   b43fc:	6018      	str	r0, [r3, #0]

  timer = timer - time2;
   b43fe:	6823      	ldr	r3, [r4, #0]
   b4400:	1a18      	subs	r0, r3, r0

  if (timer < 1) {
   b4402:	2800      	cmp	r0, #0
  timer = timer - time2;
   b4404:	6020      	str	r0, [r4, #0]
  if (timer < 1) {
   b4406:	dc0c      	bgt.n	b4422 <_Z17metronomeAndTimerv+0xc2>
    if (buzz > 1) {
   b4408:	4e32      	ldr	r6, [pc, #200]	; (b44d4 <_Z17metronomeAndTimerv+0x174>)
   b440a:	6833      	ldr	r3, [r6, #0]
   b440c:	2b01      	cmp	r3, #1
   b440e:	dd06      	ble.n	b441e <_Z17metronomeAndTimerv+0xbe>
      digitalWrite(BUZZER, HIGH);
   b4410:	2101      	movs	r1, #1
   b4412:	2006      	movs	r0, #6
   b4414:	f004 f86d 	bl	b84f2 <digitalWrite>
      buzz = buzz - 1;
   b4418:	6833      	ldr	r3, [r6, #0]
   b441a:	3b01      	subs	r3, #1
   b441c:	6033      	str	r3, [r6, #0]
    }

    timer = 0;
   b441e:	2300      	movs	r3, #0
   b4420:	6023      	str	r3, [r4, #0]
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4422:	2300      	movs	r3, #0
   b4424:	612b      	str	r3, [r5, #16]
  }

  display.setCursor(0, 0);
  display.clearDisplay();
   b4426:	4829      	ldr	r0, [pc, #164]	; (b44cc <_Z17metronomeAndTimerv+0x16c>)

  time3 = int(timer) / 1000;
  time4 = time3 % 60;
  time5 = floor(time3 / 60);
   b4428:	4d2e      	ldr	r5, [pc, #184]	; (b44e4 <_Z17metronomeAndTimerv+0x184>)
  display.clearDisplay();
   b442a:	f001 fb81 	bl	b5b30 <_ZN16Adafruit_SSD130612clearDisplayEv>
  time3 = int(timer) / 1000;
   b442e:	6823      	ldr	r3, [r4, #0]
  time4 = time3 % 60;
   b4430:	4c2d      	ldr	r4, [pc, #180]	; (b44e8 <_Z17metronomeAndTimerv+0x188>)
  display.println("Timer:");
   b4432:	4826      	ldr	r0, [pc, #152]	; (b44cc <_Z17metronomeAndTimerv+0x16c>)
  time3 = int(timer) / 1000;
   b4434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4438:	fb93 f3f2 	sdiv	r3, r3, r2
   b443c:	4a2b      	ldr	r2, [pc, #172]	; (b44ec <_Z17metronomeAndTimerv+0x18c>)
  time4 = time3 % 60;
   b443e:	213c      	movs	r1, #60	; 0x3c
  time3 = int(timer) / 1000;
   b4440:	6013      	str	r3, [r2, #0]
  time4 = time3 % 60;
   b4442:	fb93 f2f1 	sdiv	r2, r3, r1
   b4446:	fb01 3312 	mls	r3, r1, r2, r3
  display.println("Timer:");
   b444a:	4929      	ldr	r1, [pc, #164]	; (b44f0 <_Z17metronomeAndTimerv+0x190>)
  time4 = time3 % 60;
   b444c:	6023      	str	r3, [r4, #0]
  time5 = floor(time3 / 60);
   b444e:	602a      	str	r2, [r5, #0]
  display.println("Timer:");
   b4450:	f003 f8e9 	bl	b7626 <_ZN5Print7printlnEPKc>
size_t Print::print(T n, int base)
   b4454:	6829      	ldr	r1, [r5, #0]
   b4456:	481d      	ldr	r0, [pc, #116]	; (b44cc <_Z17metronomeAndTimerv+0x16c>)
   b4458:	220a      	movs	r2, #10
   b445a:	f7ff fe37 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
  display.print(time5);
  display.print(":");
   b445e:	4925      	ldr	r1, [pc, #148]	; (b44f4 <_Z17metronomeAndTimerv+0x194>)
   b4460:	481a      	ldr	r0, [pc, #104]	; (b44cc <_Z17metronomeAndTimerv+0x16c>)
   b4462:	f003 f8cd 	bl	b7600 <_ZN5Print5printEPKc>
   b4466:	6821      	ldr	r1, [r4, #0]
   b4468:	4818      	ldr	r0, [pc, #96]	; (b44cc <_Z17metronomeAndTimerv+0x16c>)
   b446a:	220a      	movs	r2, #10
   b446c:	f7ff fe2e 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b4470:	4816      	ldr	r0, [pc, #88]	; (b44cc <_Z17metronomeAndTimerv+0x16c>)
   b4472:	f003 f8cc 	bl	b760e <_ZN5Print7printlnEv>
  display.println(time4);
  display.display();
}
   b4476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  display.display();
   b447a:	4814      	ldr	r0, [pc, #80]	; (b44cc <_Z17metronomeAndTimerv+0x16c>)
   b447c:	f001 bdc6 	b.w	b600c <_ZN16Adafruit_SSD13067displayEv>
    digitalWrite(BUZZER, LOW);
   b4480:	2006      	movs	r0, #6
   b4482:	f004 f836 	bl	b84f2 <digitalWrite>
   b4486:	e7a0      	b.n	b43ca <_Z17metronomeAndTimerv+0x6a>
  } else if (display.pressedB()) {
   b4488:	4628      	mov	r0, r5
   b448a:	f002 fbb7 	bl	b6bfc <_ZN16OledWingAdafruit8pressedBEv>
   b448e:	b128      	cbz	r0, b449c <_Z17metronomeAndTimerv+0x13c>
    timer = timer + 300000;
   b4490:	6823      	ldr	r3, [r4, #0]
   b4492:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   b4496:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   b449a:	e7a1      	b.n	b43e0 <_Z17metronomeAndTimerv+0x80>
  } else if (display.pressedC()) {
   b449c:	4628      	mov	r0, r5
   b449e:	f002 fbb7 	bl	b6c10 <_ZN16OledWingAdafruit8pressedCEv>
   b44a2:	2800      	cmp	r0, #0
   b44a4:	d0a0      	beq.n	b43e8 <_Z17metronomeAndTimerv+0x88>
    timer = timer + 600000;
   b44a6:	6823      	ldr	r3, [r4, #0]
   b44a8:	f503 2312 	add.w	r3, r3, #598016	; 0x92000
   b44ac:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
   b44b0:	e796      	b.n	b43e0 <_Z17metronomeAndTimerv+0x80>
   b44b2:	bf00      	nop
   b44b4:	2003e689 	.word	0x2003e689
   b44b8:	2003e6a8 	.word	0x2003e6a8
   b44bc:	2003e6b4 	.word	0x2003e6b4
   b44c0:	2003e68c 	.word	0x2003e68c
   b44c4:	2003e688 	.word	0x2003e688
   b44c8:	2003e6ac 	.word	0x2003e6ac
   b44cc:	2003e618 	.word	0x2003e618
   b44d0:	2003e6b0 	.word	0x2003e6b0
   b44d4:	2003e5b4 	.word	0x2003e5b4
   b44d8:	2003e694 	.word	0x2003e694
   b44dc:	2003e690 	.word	0x2003e690
   b44e0:	2003e698 	.word	0x2003e698
   b44e4:	2003e6a4 	.word	0x2003e6a4
   b44e8:	2003e6a0 	.word	0x2003e6a0
   b44ec:	2003e69c 	.word	0x2003e69c
   b44f0:	000b8c56 	.word	0x000b8c56
   b44f4:	000b8c5b 	.word	0x000b8c5b

000b44f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b44f8:	b508      	push	{r3, lr}
        state = CONNECTING;
   b44fa:	2300      	movs	r3, #0
   b44fc:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b44fe:	6800      	ldr	r0, [r0, #0]
   b4500:	f003 fd44 	bl	b7f8c <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b4508:	f002 bace 	b.w	b6aa8 <BlynkNoOpCbk>

000b450c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b450c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4510:	188f      	adds	r7, r1, r2
   b4512:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b4514:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4516:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b451a:	4606      	mov	r6, r0
   b451c:	4689      	mov	r9, r1
   b451e:	4690      	mov	r8, r2
    if (it >= param.end())
   b4520:	f080 80c2 	bcs.w	b46a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b4524:	a805      	add	r0, sp, #20
   b4526:	880d      	ldrh	r5, [r1, #0]
   b4528:	f7ff fe3e 	bl	b41a8 <_ZN10BlynkParam8iteratorppEv>
   b452c:	6803      	ldr	r3, [r0, #0]
   b452e:	42bb      	cmp	r3, r7
   b4530:	f080 80ba 	bcs.w	b46a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b4534:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4536:	7803      	ldrb	r3, [r0, #0]
   b4538:	2b41      	cmp	r3, #65	; 0x41
   b453a:	d149      	bne.n	b45d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b453c:	3001      	adds	r0, #1
   b453e:	f004 f9d7 	bl	b88f0 <atoi>
   b4542:	2805      	cmp	r0, #5
   b4544:	dd37      	ble.n	b45b6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b4546:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b4548:	f247 2376 	movw	r3, #29302	; 0x7276
   b454c:	429d      	cmp	r5, r3
   b454e:	f000 80d3 	beq.w	b46f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b4552:	d841      	bhi.n	b45d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b4554:	f247 2361 	movw	r3, #29281	; 0x7261
   b4558:	429d      	cmp	r5, r3
   b455a:	f000 80a8 	beq.w	b46ae <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b455e:	f247 2364 	movw	r3, #29284	; 0x7264
   b4562:	429d      	cmp	r5, r3
   b4564:	d06b      	beq.n	b463e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b4566:	f646 5370 	movw	r3, #28016	; 0x6d70
   b456a:	429d      	cmp	r5, r3
   b456c:	d141      	bne.n	b45f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b456e:	4d78      	ldr	r5, [pc, #480]	; (b4750 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4570:	4e78      	ldr	r6, [pc, #480]	; (b4754 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b4572:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b4768 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b4576:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b4578:	42b8      	cmp	r0, r7
   b457a:	f080 8095 	bcs.w	b46a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b457e:	7803      	ldrb	r3, [r0, #0]
   b4580:	2b41      	cmp	r3, #65	; 0x41
   b4582:	d14b      	bne.n	b461c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b4584:	3001      	adds	r0, #1
   b4586:	f004 f9b3 	bl	b88f0 <atoi>
   b458a:	2805      	cmp	r0, #5
   b458c:	dd39      	ble.n	b4602 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b458e:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b4590:	a805      	add	r0, sp, #20
   b4592:	f7ff fe09 	bl	b41a8 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4596:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b459a:	4629      	mov	r1, r5
   b459c:	4648      	mov	r0, r9
   b459e:	f004 f9f3 	bl	b8988 <strcmp>
   b45a2:	4601      	mov	r1, r0
   b45a4:	2800      	cmp	r0, #0
   b45a6:	d13d      	bne.n	b4624 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b45a8:	4620      	mov	r0, r4
   b45aa:	f003 ff91 	bl	b84d0 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b45ae:	a805      	add	r0, sp, #20
   b45b0:	f7ff fdfa 	bl	b41a8 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b45b4:	e7df      	b.n	b4576 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b45b6:	9805      	ldr	r0, [sp, #20]
   b45b8:	3001      	adds	r0, #1
   b45ba:	f004 f999 	bl	b88f0 <atoi>
   b45be:	2800      	cmp	r0, #0
   b45c0:	dbc1      	blt.n	b4546 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b45c2:	9805      	ldr	r0, [sp, #20]
   b45c4:	3001      	adds	r0, #1
   b45c6:	f004 f993 	bl	b88f0 <atoi>
   b45ca:	300e      	adds	r0, #14
   b45cc:	b2c4      	uxtb	r4, r0
   b45ce:	e7bb      	b.n	b4548 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b45d0:	a805      	add	r0, sp, #20
   b45d2:	f7ff fddf 	bl	b4194 <_ZNK10BlynkParam8iterator5asIntEv>
   b45d6:	e7f9      	b.n	b45cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b45d8:	f247 7364 	movw	r3, #30564	; 0x7764
   b45dc:	429d      	cmp	r5, r3
   b45de:	d04f      	beq.n	b4680 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b45e0:	f247 7376 	movw	r3, #30582	; 0x7776
   b45e4:	429d      	cmp	r5, r3
   b45e6:	f000 8097 	beq.w	b4718 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b45ea:	f247 7361 	movw	r3, #30561	; 0x7761
   b45ee:	429d      	cmp	r5, r3
   b45f0:	d06f      	beq.n	b46d2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b45f2:	2300      	movs	r3, #0
   b45f4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b45f8:	2202      	movs	r2, #2
   b45fa:	9200      	str	r2, [sp, #0]
   b45fc:	8b72      	ldrh	r2, [r6, #26]
   b45fe:	4619      	mov	r1, r3
   b4600:	e03a      	b.n	b4678 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4602:	9805      	ldr	r0, [sp, #20]
   b4604:	3001      	adds	r0, #1
   b4606:	f004 f973 	bl	b88f0 <atoi>
   b460a:	2800      	cmp	r0, #0
   b460c:	dbbf      	blt.n	b458e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b460e:	9805      	ldr	r0, [sp, #20]
   b4610:	3001      	adds	r0, #1
   b4612:	f004 f96d 	bl	b88f0 <atoi>
   b4616:	300e      	adds	r0, #14
   b4618:	b2c4      	uxtb	r4, r0
   b461a:	e7b9      	b.n	b4590 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b461c:	a805      	add	r0, sp, #20
   b461e:	f7ff fdb9 	bl	b4194 <_ZNK10BlynkParam8iterator5asIntEv>
   b4622:	e7f9      	b.n	b4618 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4624:	4631      	mov	r1, r6
   b4626:	4648      	mov	r0, r9
   b4628:	f004 f9ae 	bl	b8988 <strcmp>
   b462c:	b128      	cbz	r0, b463a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b462e:	4641      	mov	r1, r8
   b4630:	4648      	mov	r0, r9
   b4632:	f004 f9a9 	bl	b8988 <strcmp>
   b4636:	2800      	cmp	r0, #0
   b4638:	d1b9      	bne.n	b45ae <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b463a:	2101      	movs	r1, #1
   b463c:	e7b4      	b.n	b45a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b463e:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4640:	4945      	ldr	r1, [pc, #276]	; (b4758 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b4642:	9307      	str	r3, [sp, #28]
   b4644:	a807      	add	r0, sp, #28
   b4646:	2310      	movs	r3, #16
   b4648:	2500      	movs	r5, #0
   b464a:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b464e:	f7ff fdba 	bl	b41c6 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4652:	a807      	add	r0, sp, #28
   b4654:	4621      	mov	r1, r4
   b4656:	f7ff fdd3 	bl	b4200 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b465a:	4620      	mov	r0, r4
   b465c:	f003 ff62 	bl	b8524 <digitalRead>
        rsp.add(analogRead(pin));
   b4660:	4601      	mov	r1, r0
   b4662:	a807      	add	r0, sp, #28
   b4664:	f7ff fdde 	bl	b4224 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b4668:	9b08      	ldr	r3, [sp, #32]
   b466a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b466e:	3b01      	subs	r3, #1
   b4670:	9300      	str	r3, [sp, #0]
   b4672:	9b07      	ldr	r3, [sp, #28]
   b4674:	462a      	mov	r2, r5
   b4676:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4678:	4630      	mov	r0, r6
   b467a:	f000 fafb 	bl	b4c74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b467e:	e013      	b.n	b46a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b4680:	a805      	add	r0, sp, #20
   b4682:	f7ff fd91 	bl	b41a8 <_ZN10BlynkParam8iteratorppEv>
   b4686:	6803      	ldr	r3, [r0, #0]
   b4688:	429f      	cmp	r7, r3
   b468a:	d90d      	bls.n	b46a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b468c:	b2a4      	uxth	r4, r4
   b468e:	2101      	movs	r1, #1
   b4690:	4620      	mov	r0, r4
   b4692:	f003 ff1d 	bl	b84d0 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b4696:	a805      	add	r0, sp, #20
   b4698:	f7ff fd7c 	bl	b4194 <_ZNK10BlynkParam8iterator5asIntEv>
   b469c:	1e01      	subs	r1, r0, #0
   b469e:	bf18      	it	ne
   b46a0:	2101      	movne	r1, #1
   b46a2:	4620      	mov	r0, r4
   b46a4:	f003 ff25 	bl	b84f2 <digitalWrite>
    }
}
   b46a8:	b00f      	add	sp, #60	; 0x3c
   b46aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b46ae:	ab0a      	add	r3, sp, #40	; 0x28
   b46b0:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b46b2:	a807      	add	r0, sp, #28
   b46b4:	2310      	movs	r3, #16
   b46b6:	4929      	ldr	r1, [pc, #164]	; (b475c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b46b8:	2500      	movs	r5, #0
   b46ba:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b46be:	f7ff fd82 	bl	b41c6 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b46c2:	a807      	add	r0, sp, #28
   b46c4:	4621      	mov	r1, r4
   b46c6:	f7ff fd9b 	bl	b4200 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b46ca:	4620      	mov	r0, r4
   b46cc:	f003 ff3d 	bl	b854a <analogRead>
   b46d0:	e7c6      	b.n	b4660 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b46d2:	a805      	add	r0, sp, #20
   b46d4:	f7ff fd68 	bl	b41a8 <_ZN10BlynkParam8iteratorppEv>
   b46d8:	6803      	ldr	r3, [r0, #0]
   b46da:	429f      	cmp	r7, r3
   b46dc:	d9e4      	bls.n	b46a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b46de:	b2a4      	uxth	r4, r4
   b46e0:	2101      	movs	r1, #1
   b46e2:	4620      	mov	r0, r4
   b46e4:	f003 fef4 	bl	b84d0 <pinMode>
        analogWrite(pin, it.asInt());
   b46e8:	a805      	add	r0, sp, #20
   b46ea:	f7ff fd53 	bl	b4194 <_ZNK10BlynkParam8iterator5asIntEv>
   b46ee:	4601      	mov	r1, r0
   b46f0:	4620      	mov	r0, r4
   b46f2:	f003 ff41 	bl	b8578 <_Z11analogWritetm>
    } break;
   b46f6:	e7d7      	b.n	b46a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b46f8:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b46fa:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b46fe:	f002 f9d5 	bl	b6aac <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b4702:	4603      	mov	r3, r0
            handler(req);
   b4704:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b4706:	b123      	cbz	r3, b4712 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b4708:	4a15      	ldr	r2, [pc, #84]	; (b4760 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b470a:	4293      	cmp	r3, r2
   b470c:	d001      	beq.n	b4712 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b470e:	4798      	blx	r3
   b4710:	e7ca      	b.n	b46a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b4712:	f002 f9c7 	bl	b6aa4 <BlynkWidgetRead>
        }
    }
   b4716:	e7c7      	b.n	b46a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b4718:	a805      	add	r0, sp, #20
   b471a:	f7ff fd45 	bl	b41a8 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b471e:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b4720:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b4724:	eba3 0109 	sub.w	r1, r3, r9
   b4728:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b472c:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b472e:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b4732:	910c      	str	r1, [sp, #48]	; 0x30
   b4734:	f002 f9c4 	bl	b6ac0 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b4738:	4603      	mov	r3, r0
            handler(req, param);
   b473a:	a90a      	add	r1, sp, #40	; 0x28
   b473c:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b473e:	b123      	cbz	r3, b474a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b4740:	4a08      	ldr	r2, [pc, #32]	; (b4764 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b4742:	4293      	cmp	r3, r2
   b4744:	d001      	beq.n	b474a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b4746:	4798      	blx	r3
   b4748:	e7ae      	b.n	b46a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b474a:	f002 f9ac 	bl	b6aa6 <BlynkWidgetWrite>
    } break;
   b474e:	e7ab      	b.n	b46a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b4750:	000b8c49 	.word	0x000b8c49
   b4754:	000b8c07 	.word	0x000b8c07
   b4758:	000b8c61 	.word	0x000b8c61
   b475c:	000b8c64 	.word	0x000b8c64
   b4760:	000b6aa5 	.word	0x000b6aa5
   b4764:	000b6aa7 	.word	0x000b6aa7
   b4768:	000b8c5d 	.word	0x000b8c5d

000b476c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b476c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4770:	b08c      	sub	sp, #48	; 0x30
   b4772:	af04      	add	r7, sp, #16
   b4774:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b4776:	2205      	movs	r2, #5
   b4778:	6800      	ldr	r0, [r0, #0]
   b477a:	1d39      	adds	r1, r7, #4
   b477c:	f003 f879 	bl	b7872 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b4780:	b398      	cbz	r0, b47ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b4782:	2805      	cmp	r0, #5
   b4784:	d004      	beq.n	b4790 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b4786:	2000      	movs	r0, #0
}
   b4788:	3720      	adds	r7, #32
   b478a:	46bd      	mov	sp, r7
   b478c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
   b4790:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   b4794:	ba5b      	rev16	r3, r3
   b4796:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b4798:	f8a7 3005 	strh.w	r3, [r7, #5]
   b479c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b47a0:	ba5b      	rev16	r3, r3
   b47a2:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
   b47a6:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   b47aa:	2a00      	cmp	r2, #0
   b47ac:	d0eb      	beq.n	b4786 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b47ae:	793b      	ldrb	r3, [r7, #4]
   b47b0:	bb23      	cbnz	r3, b47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
        lastActivityIn = BlynkMillis();
   b47b2:	f002 f975 	bl	b6aa0 <_Z11BlynkMillisv>
   b47b6:	4602      	mov	r2, r0
   b47b8:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b47ba:	7f60      	ldrb	r0, [r4, #29]
   b47bc:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b47c0:	b9c0      	cbnz	r0, b47f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
   b47c2:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b47c6:	2901      	cmp	r1, #1
   b47c8:	d114      	bne.n	b47f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
            switch (hdr.length) {
   b47ca:	2b09      	cmp	r3, #9
   b47cc:	d00f      	beq.n	b47ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   b47ce:	2bc8      	cmp	r3, #200	; 0xc8
   b47d0:	d001      	beq.n	b47d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   b47d2:	2b04      	cmp	r3, #4
   b47d4:	d1d8      	bne.n	b4788 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b47d6:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b47d8:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b47da:	4620      	mov	r0, r4
                state = CONNECTED;
   b47dc:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b47de:	f000 faf7 	bl	b4dd0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b47e2:	f7ff fccb 	bl	b417c <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   b47e6:	f000 fb29 	bl	b4e3c <BlynkOnConnected>
        return true; // Considered OK (no data on input)
   b47ea:	2001      	movs	r0, #1
   b47ec:	e7cc      	b.n	b4788 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b47ee:	2303      	movs	r3, #3
   b47f0:	7763      	strb	r3, [r4, #29]
                break;
   b47f2:	e7c9      	b.n	b4788 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b47f4:	1f58      	subs	r0, r3, #5
   b47f6:	bf18      	it	ne
   b47f8:	2001      	movne	r0, #1
   b47fa:	e7c5      	b.n	b4788 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b47fc:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b4800:	d903      	bls.n	b480a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x9e>
        internalReconnect();
   b4802:	4620      	mov	r0, r4
   b4804:	f7ff fe78 	bl	b44f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4808:	e7ef      	b.n	b47ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b480a:	f108 0308 	add.w	r3, r8, #8
   b480e:	466e      	mov	r6, sp
   b4810:	08db      	lsrs	r3, r3, #3
   b4812:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   b4816:	469d      	mov	sp, r3
   b4818:	ad04      	add	r5, sp, #16
   b481a:	6820      	ldr	r0, [r4, #0]
   b481c:	4642      	mov	r2, r8
   b481e:	4629      	mov	r1, r5
   b4820:	f003 f827 	bl	b7872 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b4824:	4580      	cmp	r8, r0
   b4826:	f04f 0000 	mov.w	r0, #0
   b482a:	d17f      	bne.n	b492c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
    inputBuffer[hdr.length] = '\0';
   b482c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4830:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b4832:	f002 f935 	bl	b6aa0 <_Z11BlynkMillisv>
    switch (hdr.type)
   b4836:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b4838:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b483a:	2b14      	cmp	r3, #20
   b483c:	f000 80a6 	beq.w	b498c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b4840:	d848      	bhi.n	b48d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x168>
   b4842:	2b0f      	cmp	r3, #15
   b4844:	f000 80a2 	beq.w	b498c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b4848:	d807      	bhi.n	b485a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b484a:	2b02      	cmp	r3, #2
   b484c:	d048      	beq.n	b48e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
   b484e:	2b06      	cmp	r3, #6
   b4850:	d051      	beq.n	b48f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
        internalReconnect();
   b4852:	4620      	mov	r0, r4
   b4854:	f7ff fe50 	bl	b44f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4858:	e058      	b.n	b490c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
    switch (hdr.type)
   b485a:	2b11      	cmp	r3, #17
   b485c:	d1f9      	bne.n	b4852 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        BlynkReq req = { 0 };
   b485e:	2300      	movs	r3, #0
   b4860:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b4862:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4866:	442b      	add	r3, r5
        if (it >= param.end())
   b4868:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b486a:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b486e:	d24d      	bcs.n	b490c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
        ++it;
   b4870:	f107 000c 	add.w	r0, r7, #12
   b4874:	f8d5 8000 	ldr.w	r8, [r5]
   b4878:	f7ff fc96 	bl	b41a8 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b487c:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b487e:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b4882:	1b5d      	subs	r5, r3, r5
   b4884:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b4886:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b488a:	687b      	ldr	r3, [r7, #4]
   b488c:	61fd      	str	r5, [r7, #28]
   b488e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4892:	8363      	strh	r3, [r4, #26]
   b4894:	4b64      	ldr	r3, [pc, #400]	; (b4a28 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b4896:	4598      	cmp	r8, r3
   b4898:	f000 80bf 	beq.w	b4a1a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ae>
   b489c:	f200 808c 	bhi.w	b49b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
   b48a0:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b48a4:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b48a8:	4413      	add	r3, r2
   b48aa:	4598      	cmp	r8, r3
   b48ac:	f000 809d 	beq.w	b49ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27e>
   b48b0:	d879      	bhi.n	b49a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23a>
   b48b2:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b48b6:	3b06      	subs	r3, #6
   b48b8:	4598      	cmp	r8, r3
   b48ba:	f000 809c 	beq.w	b49f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28a>
   b48be:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b48c2:	3303      	adds	r3, #3
   b48c4:	4598      	cmp	r8, r3
   b48c6:	d16b      	bne.n	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b48c8:	f107 0114 	add.w	r1, r7, #20
   b48cc:	4638      	mov	r0, r7
   b48ce:	f002 f8ea 	bl	b6aa6 <BlynkWidgetWrite>
   b48d2:	e065      	b.n	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
    switch (hdr.type)
   b48d4:	2b29      	cmp	r3, #41	; 0x29
   b48d6:	d01b      	beq.n	b4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b48d8:	2b37      	cmp	r3, #55	; 0x37
   b48da:	d017      	beq.n	b490c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b48dc:	2b1d      	cmp	r3, #29
   b48de:	d1b8      	bne.n	b4852 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b48e0:	7f63      	ldrb	r3, [r4, #29]
   b48e2:	b943      	cbnz	r3, b48f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
            state = CONNECTED;
   b48e4:	2301      	movs	r3, #1
   b48e6:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b48e8:	4620      	mov	r0, r4
   b48ea:	f000 fa71 	bl	b4dd0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b48ee:	f7ff fc45 	bl	b417c <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   b48f2:	f000 faa3 	bl	b4e3c <BlynkOnConnected>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b48f6:	2300      	movs	r3, #0
   b48f8:	21c8      	movs	r1, #200	; 0xc8
   b48fa:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b48fe:	9100      	str	r1, [sp, #0]
   b4900:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4904:	4619      	mov	r1, r3
   b4906:	4620      	mov	r0, r4
   b4908:	f000 f9b4 	bl	b4c74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b490c:	2001      	movs	r0, #1
   b490e:	e00d      	b.n	b492c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        if (!redir_serv) {
   b4910:	68a3      	ldr	r3, [r4, #8]
   b4912:	b91b      	cbnz	r3, b491c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
             redir_serv = (char*)malloc(64);
   b4914:	2040      	movs	r0, #64	; 0x40
   b4916:	f002 fc29 	bl	b716c <malloc>
   b491a:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b491c:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4920:	44a8      	add	r8, r5
        if (it >= param.end())
   b4922:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4924:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b4928:	d302      	bcc.n	b4930 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
            return false;
   b492a:	2000      	movs	r0, #0
   b492c:	46b5      	mov	sp, r6
   b492e:	e72b      	b.n	b4788 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b4930:	4629      	mov	r1, r5
   b4932:	2240      	movs	r2, #64	; 0x40
   b4934:	68a0      	ldr	r0, [r4, #8]
   b4936:	f004 f841 	bl	b89bc <strncpy>
        redir_serv[63] = '\0';
   b493a:	68a3      	ldr	r3, [r4, #8]
   b493c:	2500      	movs	r5, #0
   b493e:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b4942:	f107 0014 	add.w	r0, r7, #20
   b4946:	f7ff fc2f 	bl	b41a8 <_ZN10BlynkParam8iteratorppEv>
   b494a:	6803      	ldr	r3, [r0, #0]
   b494c:	4598      	cmp	r8, r3
   b494e:	d91b      	bls.n	b4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4950:	6978      	ldr	r0, [r7, #20]
   b4952:	b120      	cbz	r0, b495e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
   b4954:	69bb      	ldr	r3, [r7, #24]
   b4956:	4298      	cmp	r0, r3
   b4958:	d214      	bcs.n	b4984 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x218>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b495a:	f003 ffcd 	bl	b88f8 <atol>
            redir_port = it.asLong();
   b495e:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b4960:	6820      	ldr	r0, [r4, #0]
   b4962:	f003 fb13 	bl	b7f8c <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b4966:	6823      	ldr	r3, [r4, #0]
   b4968:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b496a:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b496c:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b496e:	2300      	movs	r3, #0
   b4970:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4972:	f002 f895 	bl	b6aa0 <_Z11BlynkMillisv>
   b4976:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b497a:	3808      	subs	r0, #8
   b497c:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b4980:	6160      	str	r0, [r4, #20]
   b4982:	e7c3      	b.n	b490c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b4984:	4628      	mov	r0, r5
   b4986:	e7ea      	b.n	b495e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b4988:	2550      	movs	r5, #80	; 0x50
   b498a:	e7e9      	b.n	b4960 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f4>
        msgIdOutOverride = hdr.msg_id;
   b498c:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b498e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b4992:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4996:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b4998:	4629      	mov	r1, r5
   b499a:	4620      	mov	r0, r4
   b499c:	f7ff fdb6 	bl	b450c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b49a0:	2300      	movs	r3, #0
   b49a2:	8363      	strh	r3, [r4, #26]
   b49a4:	e7b2      	b.n	b490c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b49a6:	4b21      	ldr	r3, [pc, #132]	; (b4a2c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b49a8:	4598      	cmp	r8, r3
   b49aa:	d1f9      	bne.n	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b49ac:	f107 0114 	add.w	r1, r7, #20
   b49b0:	4638      	mov	r0, r7
   b49b2:	f002 f878 	bl	b6aa6 <BlynkWidgetWrite>
   b49b6:	e7f3      	b.n	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b49b8:	4b1d      	ldr	r3, [pc, #116]	; (b4a30 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b49ba:	4598      	cmp	r8, r3
   b49bc:	d021      	beq.n	b4a02 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x296>
   b49be:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b49c2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b49c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b49ca:	4598      	cmp	r8, r3
   b49cc:	d01f      	beq.n	b4a0e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a2>
   b49ce:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b49d2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b49d6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b49da:	4598      	cmp	r8, r3
   b49dc:	d1e0      	bne.n	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b49de:	f107 0114 	add.w	r1, r7, #20
   b49e2:	4638      	mov	r0, r7
   b49e4:	f002 f85f 	bl	b6aa6 <BlynkWidgetWrite>
   b49e8:	e7da      	b.n	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b49ea:	f107 0114 	add.w	r1, r7, #20
   b49ee:	4638      	mov	r0, r7
   b49f0:	f002 f859 	bl	b6aa6 <BlynkWidgetWrite>
   b49f4:	e7d4      	b.n	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b49f6:	f107 0114 	add.w	r1, r7, #20
   b49fa:	4638      	mov	r0, r7
   b49fc:	f002 f853 	bl	b6aa6 <BlynkWidgetWrite>
   b4a00:	e7ce      	b.n	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b4a02:	f107 0114 	add.w	r1, r7, #20
   b4a06:	4638      	mov	r0, r7
   b4a08:	f002 f84d 	bl	b6aa6 <BlynkWidgetWrite>
   b4a0c:	e7c8      	b.n	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b4a0e:	f107 0114 	add.w	r1, r7, #20
   b4a12:	4638      	mov	r0, r7
   b4a14:	f002 f847 	bl	b6aa6 <BlynkWidgetWrite>
   b4a18:	e7c2      	b.n	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b4a1a:	f107 0114 	add.w	r1, r7, #20
   b4a1e:	4638      	mov	r0, r7
   b4a20:	f002 f841 	bl	b6aa6 <BlynkWidgetWrite>
   b4a24:	e7bc      	b.n	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b4a26:	bf00      	nop
   b4a28:	00736676 	.word	0x00736676
   b4a2c:	00676264 	.word	0x00676264
   b4a30:	6e6f6361 	.word	0x6e6f6361

000b4a34 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b4a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a38:	4604      	mov	r4, r0
   b4a3a:	b08c      	sub	sp, #48	; 0x30
   b4a3c:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b4a3e:	f7ff fb9d 	bl	b417c <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   b4a42:	7f63      	ldrb	r3, [r4, #29]
   b4a44:	2b02      	cmp	r3, #2
   b4a46:	d01e      	beq.n	b4a86 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b4a48:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b4a4a:	8b62      	ldrh	r2, [r4, #26]
   b4a4c:	3301      	adds	r3, #1
   b4a4e:	b2db      	uxtb	r3, r3
   b4a50:	7723      	strb	r3, [r4, #28]
   b4a52:	b9aa      	cbnz	r2, b4a80 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b4a54:	2b02      	cmp	r3, #2
   b4a56:	d813      	bhi.n	b4a80 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b4a58:	6820      	ldr	r0, [r4, #0]
   b4a5a:	f003 f95f 	bl	b7d1c <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b4a5e:	b1a8      	cbz	r0, b4a8c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b4a60:	b925      	cbnz	r5, b4a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b4a62:	6820      	ldr	r0, [r4, #0]
   b4a64:	f003 fa38 	bl	b7ed8 <_ZN9TCPClient9availableEv>
   b4a68:	2800      	cmp	r0, #0
   b4a6a:	dd0f      	ble.n	b4a8c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b4a6c:	4620      	mov	r0, r4
   b4a6e:	f7ff fe7d 	bl	b476c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b4a72:	2800      	cmp	r0, #0
   b4a74:	d1f5      	bne.n	b4a62 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b4a76:	6820      	ldr	r0, [r4, #0]
   b4a78:	f003 fa88 	bl	b7f8c <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b4a7c:	f002 f814 	bl	b6aa8 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b4a80:	7f23      	ldrb	r3, [r4, #28]
   b4a82:	3b01      	subs	r3, #1
   b4a84:	7723      	strb	r3, [r4, #28]
}
   b4a86:	b00c      	add	sp, #48	; 0x30
   b4a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b4a8c:	f002 f808 	bl	b6aa0 <_Z11BlynkMillisv>
   b4a90:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b4a92:	6820      	ldr	r0, [r4, #0]
   b4a94:	f003 f942 	bl	b7d1c <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b4a98:	7f67      	ldrb	r7, [r4, #29]
   b4a9a:	2f01      	cmp	r7, #1
   b4a9c:	4606      	mov	r6, r0
   b4a9e:	d124      	bne.n	b4aea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b4aa0:	b920      	cbnz	r0, b4aac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b4aa2:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b4aa4:	4620      	mov	r0, r4
   b4aa6:	f7ff fd27 	bl	b44f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b4aaa:	e7e9      	b.n	b4a80 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b4aac:	68e3      	ldr	r3, [r4, #12]
   b4aae:	f24f 6218 	movw	r2, #63000	; 0xf618
   b4ab2:	1aeb      	subs	r3, r5, r3
   b4ab4:	4293      	cmp	r3, r2
   b4ab6:	d8f5      	bhi.n	b4aa4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4ab8:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b4abc:	4293      	cmp	r3, r2
   b4abe:	d803      	bhi.n	b4ac8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4ac0:	6923      	ldr	r3, [r4, #16]
   b4ac2:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4ac4:	4293      	cmp	r3, r2
   b4ac6:	d9db      	bls.n	b4a80 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4ac8:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4aca:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4ace:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4ad0:	4293      	cmp	r3, r2
   b4ad2:	d9d5      	bls.n	b4a80 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b4ad4:	2300      	movs	r3, #0
   b4ad6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4ada:	9300      	str	r3, [sp, #0]
   b4adc:	461a      	mov	r2, r3
   b4ade:	2106      	movs	r1, #6
   b4ae0:	4620      	mov	r0, r4
   b4ae2:	f000 f8c7 	bl	b4c74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b4ae6:	6165      	str	r5, [r4, #20]
                return false;
   b4ae8:	e7ca      	b.n	b4a80 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b4aea:	2f00      	cmp	r7, #0
   b4aec:	d1c8      	bne.n	b4a80 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4aee:	6963      	ldr	r3, [r4, #20]
   b4af0:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b4af2:	b140      	cbz	r0, b4b06 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b4af4:	f241 7270 	movw	r2, #6000	; 0x1770
   b4af8:	4293      	cmp	r3, r2
   b4afa:	d9c1      	bls.n	b4a80 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b4afc:	6820      	ldr	r0, [r4, #0]
   b4afe:	f003 fa45 	bl	b7f8c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4b02:	7767      	strb	r7, [r4, #29]
            return false;
   b4b04:	e7bc      	b.n	b4a80 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b4b06:	f241 3288 	movw	r2, #5000	; 0x1388
   b4b0a:	4293      	cmp	r3, r2
   b4b0c:	d9b8      	bls.n	b4a80 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b4b0e:	6820      	ldr	r0, [r4, #0]
   b4b10:	f003 fa3c 	bl	b7f8c <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b4b14:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b4b18:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b4b1c:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b4b20:	f1be 0f00 	cmp.w	lr, #0
   b4b24:	d01b      	beq.n	b4b5e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b4b26:	4633      	mov	r3, r6
   b4b28:	4642      	mov	r2, r8
   b4b2a:	4671      	mov	r1, lr
   b4b2c:	4660      	mov	r0, ip
   b4b2e:	f003 f877 	bl	b7c20 <_ZN9TCPClient7connectEPKctm>
   b4b32:	2801      	cmp	r0, #1
   b4b34:	d1d7      	bne.n	b4ae6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4b36:	6863      	ldr	r3, [r4, #4]
   b4b38:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b4b3a:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4b3c:	4618      	mov	r0, r3
            msgIdOut = 1;
   b4b3e:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4b40:	f003 ff34 	bl	b89ac <strlen>
   b4b44:	2200      	movs	r2, #0
   b4b46:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4b4a:	9b05      	ldr	r3, [sp, #20]
   b4b4c:	9000      	str	r0, [sp, #0]
   b4b4e:	462a      	mov	r2, r5
   b4b50:	211d      	movs	r1, #29
   b4b52:	4620      	mov	r0, r4
   b4b54:	f000 f88e 	bl	b4c74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b4b58:	6923      	ldr	r3, [r4, #16]
   b4b5a:	6163      	str	r3, [r4, #20]
            return true;
   b4b5c:	e790      	b.n	b4a80 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4b5e:	4b08      	ldr	r3, [pc, #32]	; (b4b80 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b4b60:	9306      	str	r3, [sp, #24]
   b4b62:	f10c 0720 	add.w	r7, ip, #32
   b4b66:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4b68:	ae07      	add	r6, sp, #28
   b4b6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4b6c:	683b      	ldr	r3, [r7, #0]
   b4b6e:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b4b70:	4642      	mov	r2, r8
   b4b72:	4673      	mov	r3, lr
   b4b74:	a906      	add	r1, sp, #24
   b4b76:	4660      	mov	r0, ip
   b4b78:	f003 f932 	bl	b7de0 <_ZN9TCPClient7connectE9IPAddresstm>
   b4b7c:	e7d9      	b.n	b4b32 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b4b7e:	bf00      	nop
   b4b80:	000b9d14 	.word	0x000b9d14

000b4b84 <setup>:

// void blink(void) {
//   digitalWriteFast(D7, !pinReadFast(D7));
// }

void setup() {
   b4b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4b88:	b094      	sub	sp, #80	; 0x50
  Blynk.begin("gev9UlWHupS8yCBJ2wpDXDNm6THMu0oS", IPAddress(167, 172, 234, 162), 8080);
   b4b8a:	23a2      	movs	r3, #162	; 0xa2
   b4b8c:	22ac      	movs	r2, #172	; 0xac
   b4b8e:	21a7      	movs	r1, #167	; 0xa7
   b4b90:	9300      	str	r3, [sp, #0]
   b4b92:	a802      	add	r0, sp, #8
   b4b94:	23ea      	movs	r3, #234	; 0xea
   b4b96:	f002 fc47 	bl	b7428 <_ZN9IPAddressC1Ehhhh>
   b4b9a:	ac03      	add	r4, sp, #12

    void begin( const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b4b9c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4ba0:	f001 ff7c 	bl	b6a9c <_Z10BlynkDelaym>
   b4ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4ba6:	af09      	add	r7, sp, #36	; 0x24
   b4ba8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        this->authkey = auth;
   b4baa:	4d2f      	ldr	r5, [pc, #188]	; (b4c68 <setup+0xe4>)
   b4bac:	6823      	ldr	r3, [r4, #0]
   b4bae:	703b      	strb	r3, [r7, #0]
   b4bb0:	4b2e      	ldr	r3, [pc, #184]	; (b4c6c <setup+0xe8>)
   b4bb2:	606b      	str	r3, [r5, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4bb4:	f001 ff74 	bl	b6aa0 <_Z11BlynkMillisv>
   b4bb8:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b4bbc:	3808      	subs	r0, #8
   b4bbe:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   b4bc2:	e9c5 0003 	strd	r0, r0, [r5, #12]
   b4bc6:	6168      	str	r0, [r5, #20]
   b4bc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4bcc:	ae0f      	add	r6, sp, #60	; 0x3c
   b4bce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   b4bd0:	682c      	ldr	r4, [r5, #0]
   b4bd2:	683b      	ldr	r3, [r7, #0]
   b4bd4:	7033      	strb	r3, [r6, #0]
   b4bd6:	af0f      	add	r7, sp, #60	; 0x3c
        port = p;
   b4bd8:	f641 7390 	movw	r3, #8080	; 0x1f90
   b4bdc:	8723      	strh	r3, [r4, #56]	; 0x38
   b4bde:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        domain = NULL;
   b4be0:	f04f 0800 	mov.w	r8, #0
   b4be4:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   b4be8:	3420      	adds	r4, #32
   b4bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4bec:	6833      	ldr	r3, [r6, #0]
   b4bee:	7023      	strb	r3, [r4, #0]
        while ((state != CONNECTED) &&
   b4bf0:	f244 664f 	movw	r6, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b4bf4:	6828      	ldr	r0, [r5, #0]
   b4bf6:	f003 f9c9 	bl	b7f8c <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b4bfa:	f885 801d 	strb.w	r8, [r5, #29]
        millis_time_t started = BlynkMillis();
   b4bfe:	f001 ff4f 	bl	b6aa0 <_Z11BlynkMillisv>
   b4c02:	4604      	mov	r4, r0
        while ((state != CONNECTED) &&
   b4c04:	7f6b      	ldrb	r3, [r5, #29]
   b4c06:	2b01      	cmp	r3, #1
   b4c08:	d00c      	beq.n	b4c24 <setup+0xa0>
               (BlynkMillis() - started < timeout))
   b4c0a:	f001 ff49 	bl	b6aa0 <_Z11BlynkMillisv>
   b4c0e:	1b00      	subs	r0, r0, r4
        while ((state != CONNECTED) &&
   b4c10:	42b0      	cmp	r0, r6
   b4c12:	d804      	bhi.n	b4c1e <setup+0x9a>
            run();
   b4c14:	2100      	movs	r1, #0
   b4c16:	4628      	mov	r0, r5
   b4c18:	f7ff ff0c 	bl	b4a34 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b4c1c:	e7f2      	b.n	b4c04 <setup+0x80>
        config(auth, addr, port);
        while(this->connect() != true) {}
   b4c1e:	7f6b      	ldrb	r3, [r5, #29]
   b4c20:	2b01      	cmp	r3, #1
   b4c22:	d1e7      	bne.n	b4bf4 <setup+0x70>

  pinMode(BUZZER, OUTPUT);
   b4c24:	2101      	movs	r1, #1
   b4c26:	2006      	movs	r0, #6
   b4c28:	f003 fc52 	bl	b84d0 <pinMode>
  digitalWrite(BUZZER, LOW);
   b4c2c:	2100      	movs	r1, #0
   b4c2e:	2006      	movs	r0, #6
   b4c30:	f003 fc5f 	bl	b84f2 <digitalWrite>
  // lcd.begin(16, 2);
  // lcd.setBacklight(HIGH);
  // pinMode(D7, OUTPUT);
  // musicSetup();

  Serial.begin(9600);
   b4c34:	f003 fac2 	bl	b81bc <_Z16_fetch_usbserialv>
   b4c38:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4c3c:	f003 fab2 	bl	b81a4 <_ZN9USBSerial5beginEl>

  display.setup();
   b4c40:	480b      	ldr	r0, [pc, #44]	; (b4c70 <setup+0xec>)
   b4c42:	f001 ff8f 	bl	b6b64 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   b4c46:	480a      	ldr	r0, [pc, #40]	; (b4c70 <setup+0xec>)
   b4c48:	f000 ff72 	bl	b5b30 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4c4c:	4808      	ldr	r0, [pc, #32]	; (b4c70 <setup+0xec>)
   b4c4e:	2101      	movs	r1, #1
   b4c50:	f000 fdb5 	bl	b57be <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4c54:	4806      	ldr	r0, [pc, #24]	; (b4c70 <setup+0xec>)
   b4c56:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4c5a:	6143      	str	r3, [r0, #20]
  display.setTextColor(WHITE);
  display.display();

  // musicPlayer.startPlayingFile("1.mp3");
}
   b4c5c:	b014      	add	sp, #80	; 0x50
   b4c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  display.display();
   b4c62:	f001 b9d3 	b.w	b600c <_ZN16Adafruit_SSD13067displayEv>
   b4c66:	bf00      	nop
   b4c68:	2003e558 	.word	0x2003e558
   b4c6c:	000b8c67 	.word	0x000b8c67
   b4c70:	2003e618 	.word	0x2003e618

000b4c74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b4c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c78:	b083      	sub	sp, #12
   b4c7a:	af00      	add	r7, sp, #0
   b4c7c:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b4c7e:	6800      	ldr	r0, [r0, #0]
   b4c80:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b4c82:	4688      	mov	r8, r1
   b4c84:	4616      	mov	r6, r2
   b4c86:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b4c88:	46eb      	mov	fp, sp
   b4c8a:	f003 f847 	bl	b7d1c <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b4c8e:	2800      	cmp	r0, #0
   b4c90:	d07f      	beq.n	b4d92 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4c92:	f1b8 0f1d 	cmp.w	r8, #29
   b4c96:	d804      	bhi.n	b4ca2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   b4c98:	4b4c      	ldr	r3, [pc, #304]	; (b4dcc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   b4c9a:	fa23 f308 	lsr.w	r3, r3, r8
   b4c9e:	07db      	lsls	r3, r3, #31
   b4ca0:	d402      	bmi.n	b4ca8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   b4ca2:	7f63      	ldrb	r3, [r4, #29]
   b4ca4:	2b01      	cmp	r3, #1
   b4ca6:	d174      	bne.n	b4d92 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   b4ca8:	b946      	cbnz	r6, b4cbc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b4caa:	8b66      	ldrh	r6, [r4, #26]
   b4cac:	b936      	cbnz	r6, b4cbc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b4cae:	8b23      	ldrh	r3, [r4, #24]
   b4cb0:	3301      	adds	r3, #1
   b4cb2:	b29b      	uxth	r3, r3
   b4cb4:	2b00      	cmp	r3, #0
   b4cb6:	d071      	beq.n	b4d9c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   b4cb8:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b4cba:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b4cbc:	f1a8 030c 	sub.w	r3, r8, #12
   b4cc0:	2b08      	cmp	r3, #8
   b4cc2:	d816      	bhi.n	b4cf2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b4cc4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b4cc8:	4293      	cmp	r3, r2
   b4cca:	bf38      	it	cc
   b4ccc:	4613      	movcc	r3, r2
   b4cce:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b4cd2:	f001 fee5 	bl	b6aa0 <_Z11BlynkMillisv>
   b4cd6:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b4cda:	2800      	cmp	r0, #0
   b4cdc:	db60      	blt.n	b4da0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   b4cde:	2100      	movs	r1, #0
   b4ce0:	4620      	mov	r0, r4
   b4ce2:	f7ff fea7 	bl	b4a34 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b4ce6:	f001 fedb 	bl	b6aa0 <_Z11BlynkMillisv>
   b4cea:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b4cee:	2800      	cmp	r0, #0
   b4cf0:	daf5      	bge.n	b4cde <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4cf2:	f1b9 0f00 	cmp.w	r9, #0
   b4cf6:	d05a      	beq.n	b4dae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   b4cf8:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b4cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b4cfc:	2a00      	cmp	r2, #0
   b4cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b4d00:	bf08      	it	eq
   b4d02:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4d04:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b4d08:	f10a 0307 	add.w	r3, sl, #7
   b4d0c:	f023 0307 	bic.w	r3, r3, #7
   b4d10:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   b4d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   b4d16:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   b4d1a:	18ea      	adds	r2, r5, r3
   b4d1c:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   b4d20:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   b4d22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   b4d26:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   b4d2a:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   b4d2e:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   b4d32:	f1b9 0f00 	cmp.w	r9, #0
   b4d36:	d03c      	beq.n	b4db2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b4d38:	2d00      	cmp	r5, #0
   b4d3a:	d03a      	beq.n	b4db2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   b4d3c:	462a      	mov	r2, r5
   b4d3e:	4649      	mov	r1, r9
   b4d40:	f10d 0005 	add.w	r0, sp, #5
   b4d44:	f003 fddc 	bl	b8900 <memcpy>
        pos += length;
   b4d48:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b4d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b4d4c:	b13b      	cbz	r3, b4d5e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   b4d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b4d50:	b12b      	cbz	r3, b4d5e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   b4d52:	461a      	mov	r2, r3
   b4d54:	687b      	ldr	r3, [r7, #4]
   b4d56:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b4d58:	4418      	add	r0, r3
   b4d5a:	f003 fdd1 	bl	b8900 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b4d5e:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b4d60:	4555      	cmp	r5, sl
   b4d62:	d22a      	bcs.n	b4dba <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4d64:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b4d68:	687b      	ldr	r3, [r7, #4]
   b4d6a:	6820      	ldr	r0, [r4, #0]
   b4d6c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b4d70:	bf28      	it	cs
   b4d72:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b4d76:	1959      	adds	r1, r3, r5
   b4d78:	f002 fe83 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
   b4d7c:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b4d7e:	2000      	movs	r0, #0
   b4d80:	f001 fe8c 	bl	b6a9c <_Z10BlynkDelaym>
        if (w == 0) {
   b4d84:	b9be      	cbnz	r6, b4db6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   b4d86:	6820      	ldr	r0, [r4, #0]
   b4d88:	f003 f900 	bl	b7f8c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4d8c:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b4d8e:	f001 fe8b 	bl	b6aa8 <BlynkNoOpCbk>
}
   b4d92:	370c      	adds	r7, #12
   b4d94:	46dd      	mov	sp, fp
   b4d96:	46bd      	mov	sp, r7
   b4d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b4d9c:	2301      	movs	r3, #1
   b4d9e:	e78b      	b.n	b4cb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   b4da0:	7f21      	ldrb	r1, [r4, #28]
   b4da2:	2900      	cmp	r1, #0
   b4da4:	d1a5      	bne.n	b4cf2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   b4da6:	4620      	mov	r0, r4
   b4da8:	f7ff fe44 	bl	b4a34 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b4dac:	e7a1      	b.n	b4cf2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4dae:	2305      	movs	r3, #5
   b4db0:	e7a3      	b.n	b4cfa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   b4db2:	2005      	movs	r0, #5
   b4db4:	e7c9      	b.n	b4d4a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   b4db6:	4435      	add	r5, r6
    while (wlen < full_length) {
   b4db8:	e7d2      	b.n	b4d60 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   b4dba:	d003      	beq.n	b4dc4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   b4dbc:	4620      	mov	r0, r4
   b4dbe:	f7ff fb9b 	bl	b44f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b4dc2:	e7e6      	b.n	b4d92 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   b4dc4:	f001 fe6c 	bl	b6aa0 <_Z11BlynkMillisv>
   b4dc8:	6120      	str	r0, [r4, #16]
   b4dca:	e7e2      	b.n	b4d92 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4dcc:	20000045 	.word	0x20000045

000b4dd0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b4dd0:	b500      	push	{lr}
   b4dd2:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b4dd4:	ab04      	add	r3, sp, #16
   b4dd6:	2200      	movs	r2, #0
   b4dd8:	9301      	str	r3, [sp, #4]
   b4dda:	234f      	movs	r3, #79	; 0x4f
   b4ddc:	9300      	str	r3, [sp, #0]
   b4dde:	9202      	str	r2, [sp, #8]
   b4de0:	4b03      	ldr	r3, [pc, #12]	; (b4df0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   b4de2:	2111      	movs	r1, #17
   b4de4:	f7ff ff46 	bl	b4c74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4de8:	b015      	add	sp, #84	; 0x54
   b4dea:	f85d fb04 	ldr.w	pc, [sp], #4
   b4dee:	bf00      	nop
   b4df0:	000b8d09 	.word	0x000b8d09

000b4df4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiEEEvDpT_>:
     * This will probably cause user-defined BLYNK_WRITE handler to be called.
     *
     * @param pin Virtual Pin number
     */
    template <typename... Args>
    void syncVirtual(Args... pins) {
   b4df4:	b570      	push	{r4, r5, r6, lr}
   b4df6:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4dfa:	ab08      	add	r3, sp, #32
   b4dfc:	2400      	movs	r4, #0
   b4dfe:	4605      	mov	r5, r0
   b4e00:	460e      	mov	r6, r1
   b4e02:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vr");
   b4e04:	a805      	add	r0, sp, #20
   b4e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b4e0a:	490b      	ldr	r1, [pc, #44]	; (b4e38 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiEEEvDpT_+0x44>)
   b4e0c:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b4e10:	f7ff f9d9 	bl	b41c6 <_ZN10BlynkParam3addEPKc>
        add(last);
   b4e14:	4631      	mov	r1, r6
   b4e16:	a805      	add	r0, sp, #20
   b4e18:	f7ff f9f2 	bl	b4200 <_ZN10BlynkParam3addEi>
        cmd.add_multi(pins...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE_SYNC, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4e1c:	9b06      	ldr	r3, [sp, #24]
   b4e1e:	3b01      	subs	r3, #1
   b4e20:	9300      	str	r3, [sp, #0]
   b4e22:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4e26:	9b05      	ldr	r3, [sp, #20]
   b4e28:	4622      	mov	r2, r4
   b4e2a:	2110      	movs	r1, #16
   b4e2c:	4628      	mov	r0, r5
   b4e2e:	f7ff ff21 	bl	b4c74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b4e32:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   b4e36:	bd70      	pop	{r4, r5, r6, pc}
   b4e38:	000b8c88 	.word	0x000b8c88

000b4e3c <BlynkOnConnected>:
BLYNK_CONNECTED() {
   b4e3c:	b508      	push	{r3, lr}
  Blynk.syncVirtual(V0);
   b4e3e:	4806      	ldr	r0, [pc, #24]	; (b4e58 <BlynkOnConnected+0x1c>)
   b4e40:	2100      	movs	r1, #0
   b4e42:	f7ff ffd7 	bl	b4df4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiEEEvDpT_>
  Blynk.syncVirtual(V1);
   b4e46:	4804      	ldr	r0, [pc, #16]	; (b4e58 <BlynkOnConnected+0x1c>)
   b4e48:	2101      	movs	r1, #1
   b4e4a:	f7ff ffd3 	bl	b4df4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiEEEvDpT_>
  Blynk.syncVirtual(V3);
   b4e4e:	4802      	ldr	r0, [pc, #8]	; (b4e58 <BlynkOnConnected+0x1c>)
   b4e50:	2103      	movs	r1, #3
   b4e52:	f7ff ffcf 	bl	b4df4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiEEEvDpT_>
}
   b4e56:	bd08      	pop	{r3, pc}
   b4e58:	2003e558 	.word	0x2003e558

000b4e5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA53_cEEvRKT_>:
    }

    // Please use Blynk.logEvent("event", "Description")
    template<typename T>
    BLYNK_DEPRECATED
    void notify(const T& msg) {
   b4e5c:	b530      	push	{r4, r5, lr}
   b4e5e:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4e62:	ab08      	add	r3, sp, #32
   b4e64:	2400      	movs	r4, #0
   b4e66:	4605      	mov	r5, r0
   b4e68:	9305      	str	r3, [sp, #20]
#if defined(BLYNK_TEMPLATE_ID)
        logEvent("notify", msg);
#else
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
   b4e6a:	a805      	add	r0, sp, #20
   b4e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b4e70:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b4e74:	f7ff f9a7 	bl	b41c6 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4e78:	9b06      	ldr	r3, [sp, #24]
   b4e7a:	3b01      	subs	r3, #1
   b4e7c:	9300      	str	r3, [sp, #0]
   b4e7e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4e82:	9b05      	ldr	r3, [sp, #20]
   b4e84:	4622      	mov	r2, r4
   b4e86:	210e      	movs	r1, #14
   b4e88:	4628      	mov	r0, r5
   b4e8a:	f7ff fef3 	bl	b4c74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    }
   b4e8e:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4e92:	bd30      	pop	{r4, r5, pc}

000b4e94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyI15StringSumHelperEEvRKT_>:
    void notify(const T& msg) {
   b4e94:	b530      	push	{r4, r5, lr}
   b4e96:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
   b4e9a:	ab08      	add	r3, sp, #32
   b4e9c:	2400      	movs	r4, #0
   b4e9e:	4605      	mov	r5, r0
   b4ea0:	9305      	str	r3, [sp, #20]
    add(str.c_str());
   b4ea2:	a805      	add	r0, sp, #20
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    add(str.c_str());
   b4ea8:	6809      	ldr	r1, [r1, #0]
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4eaa:	e9cd 4306 	strd	r4, r3, [sp, #24]
    add(str.c_str());
   b4eae:	f7ff f98a 	bl	b41c6 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4eb2:	9b06      	ldr	r3, [sp, #24]
   b4eb4:	3b01      	subs	r3, #1
   b4eb6:	9300      	str	r3, [sp, #0]
   b4eb8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4ebc:	9b05      	ldr	r3, [sp, #20]
   b4ebe:	4622      	mov	r2, r4
   b4ec0:	210e      	movs	r1, #14
   b4ec2:	4628      	mov	r0, r5
   b4ec4:	f7ff fed6 	bl	b4c74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b4ec8:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4ecc:	bd30      	pop	{r4, r5, pc}
	...

000b4ed0 <_Z14checkPracticesv>:
void checkPractices() {
   b4ed0:	b530      	push	{r4, r5, lr}
  if (practicesNeeded == 0) {
   b4ed2:	4c1d      	ldr	r4, [pc, #116]	; (b4f48 <_Z14checkPracticesv+0x78>)
   b4ed4:	6823      	ldr	r3, [r4, #0]
void checkPractices() {
   b4ed6:	b091      	sub	sp, #68	; 0x44
  if (practicesNeeded == 0) {
   b4ed8:	b943      	cbnz	r3, b4eec <_Z14checkPracticesv+0x1c>
    Blynk.notify("Great job creating enough practice events this week!");
   b4eda:	491c      	ldr	r1, [pc, #112]	; (b4f4c <_Z14checkPracticesv+0x7c>)
   b4edc:	481c      	ldr	r0, [pc, #112]	; (b4f50 <_Z14checkPracticesv+0x80>)
   b4ede:	f7ff ffbd 	bl	b4e5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA53_cEEvRKT_>
    practicesNeeded = -1;
   b4ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4ee6:	6023      	str	r3, [r4, #0]
}
   b4ee8:	b011      	add	sp, #68	; 0x44
   b4eea:	bd30      	pop	{r4, r5, pc}
  } else if (practicesNeeded != -1) {
   b4eec:	3301      	adds	r3, #1
   b4eee:	d0fb      	beq.n	b4ee8 <_Z14checkPracticesv+0x18>
    Blynk.notify(String("You need to add ") + String(practicesNeeded) + String(" more practice events this week."));
   b4ef0:	4918      	ldr	r1, [pc, #96]	; (b4f54 <_Z14checkPracticesv+0x84>)
   b4ef2:	a804      	add	r0, sp, #16
   b4ef4:	f002 fd1d 	bl	b7932 <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4ef8:	a904      	add	r1, sp, #16
   b4efa:	4668      	mov	r0, sp
   b4efc:	f002 fd3c 	bl	b7978 <_ZN6StringC1ERKS_>
   b4f00:	220a      	movs	r2, #10
   b4f02:	6821      	ldr	r1, [r4, #0]
   b4f04:	a808      	add	r0, sp, #32
   b4f06:	f002 fd54 	bl	b79b2 <_ZN6StringC1Eih>
   b4f0a:	a908      	add	r1, sp, #32
   b4f0c:	4668      	mov	r0, sp
   b4f0e:	f002 fd7a 	bl	b7a06 <_ZplRK15StringSumHelperRK6String>
   b4f12:	4911      	ldr	r1, [pc, #68]	; (b4f58 <_Z14checkPracticesv+0x88>)
   b4f14:	4605      	mov	r5, r0
   b4f16:	a80c      	add	r0, sp, #48	; 0x30
   b4f18:	f002 fd0b 	bl	b7932 <_ZN6StringC1EPK19__FlashStringHelper>
   b4f1c:	a90c      	add	r1, sp, #48	; 0x30
   b4f1e:	4628      	mov	r0, r5
   b4f20:	f002 fd71 	bl	b7a06 <_ZplRK15StringSumHelperRK6String>
   b4f24:	4601      	mov	r1, r0
   b4f26:	480a      	ldr	r0, [pc, #40]	; (b4f50 <_Z14checkPracticesv+0x80>)
   b4f28:	f7ff ffb4 	bl	b4e94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyI15StringSumHelperEEvRKT_>
   b4f2c:	a80c      	add	r0, sp, #48	; 0x30
   b4f2e:	f002 fcb5 	bl	b789c <_ZN6StringD1Ev>
   b4f32:	a808      	add	r0, sp, #32
   b4f34:	f002 fcb2 	bl	b789c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4f38:	4668      	mov	r0, sp
   b4f3a:	f002 fcaf 	bl	b789c <_ZN6StringD1Ev>
   b4f3e:	a804      	add	r0, sp, #16
   b4f40:	f002 fcac 	bl	b789c <_ZN6StringD1Ev>
   b4f44:	e7cd      	b.n	b4ee2 <_Z14checkPracticesv+0x12>
   b4f46:	bf00      	nop
   b4f48:	2003e4e8 	.word	0x2003e4e8
   b4f4c:	000b8c8b 	.word	0x000b8c8b
   b4f50:	2003e558 	.word	0x2003e558
   b4f54:	000b8cc0 	.word	0x000b8cc0
   b4f58:	000b8cd1 	.word	0x000b8cd1

000b4f5c <loop>:

void loop() {
   b4f5c:	b508      	push	{r3, lr}
  Blynk.run();
   b4f5e:	2100      	movs	r1, #0
   b4f60:	4806      	ldr	r0, [pc, #24]	; (b4f7c <loop+0x20>)
   b4f62:	f7ff fd67 	bl	b4a34 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  display.loop();
   b4f66:	4806      	ldr	r0, [pc, #24]	; (b4f80 <loop+0x24>)
   b4f68:	f001 fe25 	bl	b6bb6 <_ZN16OledWingAdafruit4loopEv>

  mqttLoop();
   b4f6c:	f7ff f9ce 	bl	b430c <_Z8mqttLoopv>
  checkPractices();
   b4f70:	f7ff ffae 	bl	b4ed0 <_Z14checkPracticesv>

  // musicAndLCD();
  
  metronomeAndTimer();
   b4f74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  metronomeAndTimer();
   b4f78:	f7ff b9f2 	b.w	b4360 <_Z17metronomeAndTimerv>
   b4f7c:	2003e558 	.word	0x2003e558
   b4f80:	2003e618 	.word	0x2003e618

000b4f84 <_GLOBAL__sub_I_Blynk>:
   b4f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : domain(NULL), port(0)
   b4f86:	4d17      	ldr	r5, [pc, #92]	; (b4fe4 <_GLOBAL__sub_I_Blynk+0x60>)
SYSTEM_THREAD(ENABLED);
   b4f88:	2100      	movs	r1, #0
   b4f8a:	2001      	movs	r0, #1
   b4f8c:	f002 f85a 	bl	b7044 <system_thread_set_state>
   b4f90:	4628      	mov	r0, r5
   b4f92:	f003 f845 	bl	b8020 <_ZN9TCPClientC1Ev>
   b4f96:	f105 001c 	add.w	r0, r5, #28
   b4f9a:	f002 fa01 	bl	b73a0 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b4f9e:	4b12      	ldr	r3, [pc, #72]	; (b4fe8 <_GLOBAL__sub_I_Blynk+0x64>)
OledWingAdafruit display;
   b4fa0:	4812      	ldr	r0, [pc, #72]	; (b4fec <_GLOBAL__sub_I_Blynk+0x68>)
   b4fa2:	2400      	movs	r4, #0
   b4fa4:	e9c3 5400 	strd	r5, r4, [r3]
   b4fa8:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4fac:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b4fb0:	619c      	str	r4, [r3, #24]
   b4fb2:	839c      	strh	r4, [r3, #28]
   b4fb4:	2107      	movs	r1, #7
   b4fb6:	636c      	str	r4, [r5, #52]	; 0x34
   b4fb8:	872c      	strh	r4, [r5, #56]	; 0x38
   b4fba:	f001 fda5 	bl	b6b08 <_ZN16OledWingAdafruitC1Ei>
   b4fbe:	f001 fe69 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
unsigned long myTimer = millis();
   b4fc2:	4b0b      	ldr	r3, [pc, #44]	; (b4ff0 <_GLOBAL__sub_I_Blynk+0x6c>)
   b4fc4:	6018      	str	r0, [r3, #0]
   b4fc6:	f001 fe65 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
unsigned long timeOn = millis();
   b4fca:	4b0a      	ldr	r3, [pc, #40]	; (b4ff4 <_GLOBAL__sub_I_Blynk+0x70>)
MQTT client("lab.thewcl.com", 1883, callback);
   b4fcc:	490a      	ldr	r1, [pc, #40]	; (b4ff8 <_GLOBAL__sub_I_Blynk+0x74>)
unsigned long timeOn = millis();
   b4fce:	6018      	str	r0, [r3, #0]
MQTT client("lab.thewcl.com", 1883, callback);
   b4fd0:	f240 725b 	movw	r2, #1883	; 0x75b
   b4fd4:	4b09      	ldr	r3, [pc, #36]	; (b4ffc <_GLOBAL__sub_I_Blynk+0x78>)
   b4fd6:	9400      	str	r4, [sp, #0]
   b4fd8:	4809      	ldr	r0, [pc, #36]	; (b5000 <_GLOBAL__sub_I_Blynk+0x7c>)
   b4fda:	f001 f94f 	bl	b627c <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b4fde:	b003      	add	sp, #12
   b4fe0:	bd30      	pop	{r4, r5, pc}
   b4fe2:	bf00      	nop
   b4fe4:	2003e578 	.word	0x2003e578
   b4fe8:	2003e558 	.word	0x2003e558
   b4fec:	2003e618 	.word	0x2003e618
   b4ff0:	2003e68c 	.word	0x2003e68c
   b4ff4:	2003e6ac 	.word	0x2003e6ac
   b4ff8:	000b8cf2 	.word	0x000b8cf2
   b4ffc:	000b40f5 	.word	0x000b40f5
   b5000:	2003e5b8 	.word	0x2003e5b8

000b5004 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5008:	b085      	sub	sp, #20
   b500a:	461f      	mov	r7, r3
   b500c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5010:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5014:	eba8 0902 	sub.w	r9, r8, r2
   b5018:	eba7 0a01 	sub.w	sl, r7, r1
   b501c:	f1b9 0f00 	cmp.w	r9, #0
   b5020:	bfb8      	it	lt
   b5022:	f1c9 0900 	rsblt	r9, r9, #0
   b5026:	f1ba 0f00 	cmp.w	sl, #0
   b502a:	bfb8      	it	lt
   b502c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5030:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5032:	4683      	mov	fp, r0
   b5034:	460c      	mov	r4, r1
   b5036:	4615      	mov	r5, r2
    if (steep) {
   b5038:	dd04      	ble.n	b5044 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b503a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b503c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b503e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5040:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5042:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5044:	42bc      	cmp	r4, r7
   b5046:	dd05      	ble.n	b5054 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5048:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b504a:	4645      	mov	r5, r8
   b504c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b504e:	4622      	mov	r2, r4
   b5050:	463c      	mov	r4, r7
   b5052:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5054:	1b3e      	subs	r6, r7, r4
   b5056:	b2b2      	uxth	r2, r6
   b5058:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b505a:	eba8 0205 	sub.w	r2, r8, r5
   b505e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5062:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5066:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b506a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b506e:	4545      	cmp	r5, r8
   b5070:	bfb4      	ite	lt
   b5072:	2201      	movlt	r2, #1
   b5074:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b5078:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b507a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b507c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b507e:	42bc      	cmp	r4, r7
   b5080:	dc1c      	bgt.n	b50bc <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5082:	f8db 2000 	ldr.w	r2, [fp]
   b5086:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5088:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b508a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b508e:	bfc7      	ittee	gt
   b5090:	4629      	movgt	r1, r5
   b5092:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5094:	462a      	movle	r2, r5
   b5096:	4621      	movle	r1, r4
   b5098:	4658      	mov	r0, fp
   b509a:	47c0      	blx	r8
        }
        err -= dy;
   b509c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b509e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b50a0:	1ab6      	subs	r6, r6, r2
   b50a2:	b2b1      	uxth	r1, r6
   b50a4:	b236      	sxth	r6, r6
        if (err < 0) {
   b50a6:	2e00      	cmp	r6, #0
   b50a8:	da05      	bge.n	b50b6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b50aa:	9a02      	ldr	r2, [sp, #8]
   b50ac:	4415      	add	r5, r2
            err += dx;
   b50ae:	9a00      	ldr	r2, [sp, #0]
   b50b0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b50b2:	b22d      	sxth	r5, r5
            err += dx;
   b50b4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b50b6:	3401      	adds	r4, #1
   b50b8:	b224      	sxth	r4, r4
   b50ba:	e7e0      	b.n	b507e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b50bc:	b005      	add	sp, #20
   b50be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b50c2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b50c2:	4770      	bx	lr

000b50c4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b50c4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b50c6:	6804      	ldr	r4, [r0, #0]
   b50c8:	6924      	ldr	r4, [r4, #16]
   b50ca:	46a4      	mov	ip, r4
}
   b50cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b50d0:	4760      	bx	ip

000b50d2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b50d2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b50d4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b50d6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b50da:	9502      	str	r5, [sp, #8]
   b50dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b50de:	46a4      	mov	ip, r4
}
   b50e0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b50e2:	4760      	bx	ip

000b50e4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b50e4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b50e6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b50e8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b50ec:	9502      	str	r5, [sp, #8]
   b50ee:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b50f0:	46a4      	mov	ip, r4
}
   b50f2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b50f4:	4760      	bx	ip

000b50f6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b50f6:	b470      	push	{r4, r5, r6}
   b50f8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b50fc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5100:	6804      	ldr	r4, [r0, #0]
   b5102:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5106:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5108:	46a4      	mov	ip, r4
}
   b510a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b510c:	4760      	bx	ip

000b510e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b510e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5112:	461c      	mov	r4, r3
    startWrite();
   b5114:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5116:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b511a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b511c:	4605      	mov	r5, r0
   b511e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5120:	3c01      	subs	r4, #1
   b5122:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5124:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5126:	b224      	sxth	r4, r4
    startWrite();
   b5128:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b512a:	682b      	ldr	r3, [r5, #0]
   b512c:	f8cd 8004 	str.w	r8, [sp, #4]
   b5130:	9400      	str	r4, [sp, #0]
   b5132:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5134:	4628      	mov	r0, r5
   b5136:	463b      	mov	r3, r7
   b5138:	4632      	mov	r2, r6
   b513a:	4639      	mov	r1, r7
   b513c:	47a0      	blx	r4
    endWrite();
   b513e:	682b      	ldr	r3, [r5, #0]
   b5140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5142:	4628      	mov	r0, r5
}
   b5144:	b002      	add	sp, #8
   b5146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b514a:	4718      	bx	r3

000b514c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b514c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5150:	461d      	mov	r5, r3
    startWrite();
   b5152:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5154:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5158:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b515a:	4604      	mov	r4, r0
   b515c:	4617      	mov	r7, r2
   b515e:	460e      	mov	r6, r1
    startWrite();
   b5160:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5162:	e9cd 7800 	strd	r7, r8, [sp]
   b5166:	6822      	ldr	r2, [r4, #0]
   b5168:	1e6b      	subs	r3, r5, #1
   b516a:	4433      	add	r3, r6
   b516c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b516e:	4620      	mov	r0, r4
   b5170:	b21b      	sxth	r3, r3
   b5172:	463a      	mov	r2, r7
   b5174:	4631      	mov	r1, r6
   b5176:	47a8      	blx	r5
    endWrite();
   b5178:	6823      	ldr	r3, [r4, #0]
   b517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b517c:	4620      	mov	r0, r4
}
   b517e:	b002      	add	sp, #8
   b5180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5184:	4718      	bx	r3

000b5186 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5186:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b518a:	461e      	mov	r6, r3
    startWrite();
   b518c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b518e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5192:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5194:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5198:	460c      	mov	r4, r1
   b519a:	4605      	mov	r5, r0
   b519c:	4617      	mov	r7, r2
    startWrite();
   b519e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b51a0:	4426      	add	r6, r4
   b51a2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b51a4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b51a6:	da0b      	bge.n	b51c0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b51a8:	f8cd 8000 	str.w	r8, [sp]
   b51ac:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b51b0:	4621      	mov	r1, r4
   b51b2:	464b      	mov	r3, r9
   b51b4:	463a      	mov	r2, r7
   b51b6:	4628      	mov	r0, r5
   b51b8:	3401      	adds	r4, #1
   b51ba:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b51bc:	b224      	sxth	r4, r4
   b51be:	e7f0      	b.n	b51a2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b51c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51c2:	4628      	mov	r0, r5
}
   b51c4:	b002      	add	sp, #8
   b51c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b51ca:	4718      	bx	r3

000b51cc <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b51cc:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b51ce:	6802      	ldr	r2, [r0, #0]
   b51d0:	9101      	str	r1, [sp, #4]
   b51d2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b51d6:	9100      	str	r1, [sp, #0]
   b51d8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b51da:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b51de:	2200      	movs	r2, #0
   b51e0:	4611      	mov	r1, r2
   b51e2:	47a0      	blx	r4
}
   b51e4:	b002      	add	sp, #8
   b51e6:	bd10      	pop	{r4, pc}

000b51e8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b51e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b51ec:	4299      	cmp	r1, r3
        uint16_t color) {
   b51ee:	4616      	mov	r6, r2
   b51f0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b51f4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b51f8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b51fa:	4680      	mov	r8, r0
   b51fc:	460d      	mov	r5, r1
   b51fe:	461c      	mov	r4, r3
    if(x0 == x1){
   b5200:	d113      	bne.n	b522a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5202:	42be      	cmp	r6, r7
   b5204:	bfc8      	it	gt
   b5206:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5208:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b520c:	bfc4      	itt	gt
   b520e:	463e      	movgt	r6, r7
   b5210:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5212:	1c7b      	adds	r3, r7, #1
   b5214:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5216:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5218:	b21b      	sxth	r3, r3
   b521a:	4632      	mov	r2, r6
   b521c:	4629      	mov	r1, r5
   b521e:	4640      	mov	r0, r8
   b5220:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5222:	b003      	add	sp, #12
   b5224:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5228:	4760      	bx	ip
    } else if(y0 == y1){
   b522a:	42be      	cmp	r6, r7
   b522c:	d10a      	bne.n	b5244 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b522e:	4299      	cmp	r1, r3
   b5230:	bfc2      	ittt	gt
   b5232:	460b      	movgt	r3, r1
   b5234:	4625      	movgt	r5, r4
   b5236:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5238:	1c63      	adds	r3, r4, #1
   b523a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b523e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5240:	1b5b      	subs	r3, r3, r5
   b5242:	e7e9      	b.n	b5218 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5244:	6953      	ldr	r3, [r2, #20]
   b5246:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5248:	e9cd 7900 	strd	r7, r9, [sp]
   b524c:	f8d8 3000 	ldr.w	r3, [r8]
   b5250:	4640      	mov	r0, r8
   b5252:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5254:	4632      	mov	r2, r6
   b5256:	4623      	mov	r3, r4
   b5258:	4629      	mov	r1, r5
   b525a:	47b8      	blx	r7
        endWrite();
   b525c:	f8d8 3000 	ldr.w	r3, [r8]
   b5260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5262:	4640      	mov	r0, r8
}
   b5264:	b003      	add	sp, #12
   b5266:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b526a:	4718      	bx	r3

000b526c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b526c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5270:	461d      	mov	r5, r3
    startWrite();
   b5272:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5274:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5278:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b527a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b527e:	4604      	mov	r4, r0
   b5280:	460f      	mov	r7, r1
   b5282:	4616      	mov	r6, r2
    startWrite();
   b5284:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5286:	6823      	ldr	r3, [r4, #0]
   b5288:	f8cd 8000 	str.w	r8, [sp]
   b528c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5290:	4632      	mov	r2, r6
   b5292:	462b      	mov	r3, r5
   b5294:	4639      	mov	r1, r7
   b5296:	4620      	mov	r0, r4
   b5298:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b529a:	6823      	ldr	r3, [r4, #0]
   b529c:	f8cd 8000 	str.w	r8, [sp]
   b52a0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b52a4:	4432      	add	r2, r6
   b52a6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b52aa:	4639      	mov	r1, r7
   b52ac:	462b      	mov	r3, r5
   b52ae:	4620      	mov	r0, r4
   b52b0:	b212      	sxth	r2, r2
   b52b2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b52b4:	6823      	ldr	r3, [r4, #0]
   b52b6:	f8cd 8000 	str.w	r8, [sp]
   b52ba:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b52be:	4632      	mov	r2, r6
   b52c0:	464b      	mov	r3, r9
   b52c2:	4639      	mov	r1, r7
   b52c4:	4620      	mov	r0, r4
   b52c6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b52c8:	1e6b      	subs	r3, r5, #1
   b52ca:	19d9      	adds	r1, r3, r7
   b52cc:	6823      	ldr	r3, [r4, #0]
   b52ce:	f8cd 8000 	str.w	r8, [sp]
   b52d2:	6a1d      	ldr	r5, [r3, #32]
   b52d4:	4620      	mov	r0, r4
   b52d6:	464b      	mov	r3, r9
   b52d8:	4632      	mov	r2, r6
   b52da:	b209      	sxth	r1, r1
   b52dc:	47a8      	blx	r5
    endWrite();
   b52de:	6823      	ldr	r3, [r4, #0]
   b52e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52e2:	4620      	mov	r0, r4
}
   b52e4:	b002      	add	sp, #8
   b52e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b52ea:	4718      	bx	r3

000b52ec <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b52ec:	4770      	bx	lr

000b52ee <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b52ee:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b52f2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b52f6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b52f8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b52fa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b52fe:	bf59      	ittee	pl
   b5300:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5302:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5304:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5306:	81c3      	strhmi	r3, [r0, #14]
}
   b5308:	4770      	bx	lr
	...

000b530c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b530c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b530e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5310:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5312:	4a07      	ldr	r2, [pc, #28]	; (b5330 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5314:	4d07      	ldr	r5, [pc, #28]	; (b5334 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5316:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5318:	2400      	movs	r4, #0
    _width    = WIDTH;
   b531a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b531c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5320:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5324:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5326:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5328:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b532a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b532c:	6204      	str	r4, [r0, #32]
}
   b532e:	bd30      	pop	{r4, r5, pc}
   b5330:	01000101 	.word	0x01000101
   b5334:	000b9264 	.word	0x000b9264

000b5338 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b533c:	b089      	sub	sp, #36	; 0x24
   b533e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5342:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5344:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5348:	9304      	str	r3, [sp, #16]
   b534a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b534e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5350:	9305      	str	r3, [sp, #20]
   b5352:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5356:	4604      	mov	r4, r0
    startWrite();
   b5358:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b535a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b535e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5362:	bf48      	it	mi
   b5364:	f108 020e 	addmi.w	r2, r8, #14
   b5368:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b536c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b536e:	4635      	mov	r5, r6
   b5370:	9b03      	ldr	r3, [sp, #12]
   b5372:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5374:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5378:	189a      	adds	r2, r3, r2
   b537a:	9b05      	ldr	r3, [sp, #20]
   b537c:	428b      	cmp	r3, r1
   b537e:	b212      	sxth	r2, r2
   b5380:	dd27      	ble.n	b53d2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5382:	9b04      	ldr	r3, [sp, #16]
   b5384:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5386:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b538a:	9306      	str	r3, [sp, #24]
   b538c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5390:	4580      	cmp	r8, r0
   b5392:	fa1f f189 	uxth.w	r1, r9
   b5396:	dd17      	ble.n	b53c8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5398:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b539a:	bf05      	ittet	eq
   b539c:	9b06      	ldreq	r3, [sp, #24]
   b539e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b53a0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b53a2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b53a4:	bf18      	it	ne
   b53a6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b53a8:	062b      	lsls	r3, r5, #24
   b53aa:	d50a      	bpl.n	b53c2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b53ac:	9b02      	ldr	r3, [sp, #8]
   b53ae:	6820      	ldr	r0, [r4, #0]
   b53b0:	9207      	str	r2, [sp, #28]
   b53b2:	4419      	add	r1, r3
   b53b4:	6983      	ldr	r3, [r0, #24]
   b53b6:	b209      	sxth	r1, r1
   b53b8:	461f      	mov	r7, r3
   b53ba:	4620      	mov	r0, r4
   b53bc:	4653      	mov	r3, sl
   b53be:	47b8      	blx	r7
   b53c0:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b53c2:	f109 0901 	add.w	r9, r9, #1
   b53c6:	e7e1      	b.n	b538c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b53c8:	9b01      	ldr	r3, [sp, #4]
   b53ca:	3301      	adds	r3, #1
   b53cc:	9301      	str	r3, [sp, #4]
   b53ce:	445e      	add	r6, fp
   b53d0:	e7ce      	b.n	b5370 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b53d2:	6823      	ldr	r3, [r4, #0]
   b53d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53d6:	4620      	mov	r0, r4
}
   b53d8:	b009      	add	sp, #36	; 0x24
   b53da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b53de:	4718      	bx	r3

000b53e0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b53e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53e4:	ed2d 8b02 	vpush	{d8}
   b53e8:	b091      	sub	sp, #68	; 0x44
   b53ea:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b53ec:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b53ee:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b53f2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b53f6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b53fa:	9103      	str	r1, [sp, #12]
   b53fc:	461f      	mov	r7, r3
   b53fe:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5402:	9304      	str	r3, [sp, #16]
   b5404:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5406:	2a00      	cmp	r2, #0
   b5408:	f040 80c5 	bne.w	b5596 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b540c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5410:	428b      	cmp	r3, r1
   b5412:	f340 814c 	ble.w	b56ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5416:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b541a:	42b3      	cmp	r3, r6
   b541c:	f340 8147 	ble.w	b56ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5420:	2306      	movs	r3, #6
   b5422:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5426:	2b00      	cmp	r3, #0
   b5428:	f340 8141 	ble.w	b56ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b542c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5430:	2b00      	cmp	r3, #0
   b5432:	f340 813c 	ble.w	b56ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5436:	7f03      	ldrb	r3, [r0, #28]
   b5438:	b91b      	cbnz	r3, b5442 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b543a:	2faf      	cmp	r7, #175	; 0xaf
   b543c:	bf84      	itt	hi
   b543e:	3701      	addhi	r7, #1
   b5440:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5442:	f8db 3000 	ldr.w	r3, [fp]
   b5446:	4658      	mov	r0, fp
   b5448:	695b      	ldr	r3, [r3, #20]
   b544a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b544c:	2205      	movs	r2, #5
   b544e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5450:	2200      	movs	r2, #0
   b5452:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5454:	4a98      	ldr	r2, [pc, #608]	; (b56b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5456:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b545a:	18d3      	adds	r3, r2, r3
   b545c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b545e:	b2b3      	uxth	r3, r6
   b5460:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5462:	9a05      	ldr	r2, [sp, #20]
   b5464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5466:	5c9b      	ldrb	r3, [r3, r2]
   b5468:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b546a:	b2ab      	uxth	r3, r5
   b546c:	930b      	str	r3, [sp, #44]	; 0x2c
   b546e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5472:	9308      	str	r3, [sp, #32]
   b5474:	9b03      	ldr	r3, [sp, #12]
   b5476:	fb02 f905 	mul.w	r9, r2, r5
   b547a:	fa19 f983 	uxtah	r9, r9, r3
   b547e:	fa0f f389 	sxth.w	r3, r9
   b5482:	ee08 3a10 	vmov	s16, r3
   b5486:	2308      	movs	r3, #8
   b5488:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b548a:	9b03      	ldr	r3, [sp, #12]
   b548c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5490:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5494:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5498:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b549a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b549e:	07d2      	lsls	r2, r2, #31
   b54a0:	d552      	bpl.n	b5548 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b54a2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b54a4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b54a8:	d13e      	bne.n	b5528 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b54aa:	2c01      	cmp	r4, #1
   b54ac:	d13c      	bne.n	b5528 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b54ae:	699b      	ldr	r3, [r3, #24]
   b54b0:	9906      	ldr	r1, [sp, #24]
   b54b2:	461f      	mov	r7, r3
   b54b4:	9b04      	ldr	r3, [sp, #16]
   b54b6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b54b8:	b212      	sxth	r2, r2
   b54ba:	4651      	mov	r1, sl
   b54bc:	4658      	mov	r0, fp
   b54be:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b54c0:	f109 0301 	add.w	r3, r9, #1
   b54c4:	fa4f f983 	sxtb.w	r9, r3
   b54c8:	9b07      	ldr	r3, [sp, #28]
   b54ca:	085b      	lsrs	r3, r3, #1
   b54cc:	9307      	str	r3, [sp, #28]
   b54ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b54d0:	3b01      	subs	r3, #1
   b54d2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b54d6:	930a      	str	r3, [sp, #40]	; 0x28
   b54d8:	d1de      	bne.n	b5498 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b54da:	9f05      	ldr	r7, [sp, #20]
   b54dc:	3701      	adds	r7, #1
   b54de:	b27b      	sxtb	r3, r7
   b54e0:	9305      	str	r3, [sp, #20]
   b54e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b54e4:	3b01      	subs	r3, #1
   b54e6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b54ea:	9309      	str	r3, [sp, #36]	; 0x24
   b54ec:	d1b9      	bne.n	b5462 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b54ee:	9b04      	ldr	r3, [sp, #16]
   b54f0:	4543      	cmp	r3, r8
   b54f2:	d00f      	beq.n	b5514 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b54f4:	2d01      	cmp	r5, #1
   b54f6:	f8db 3000 	ldr.w	r3, [fp]
   b54fa:	d13b      	bne.n	b5574 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b54fc:	2c01      	cmp	r4, #1
   b54fe:	d139      	bne.n	b5574 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5500:	9908      	ldr	r1, [sp, #32]
   b5502:	f8cd 8000 	str.w	r8, [sp]
   b5506:	3105      	adds	r1, #5
   b5508:	6a1c      	ldr	r4, [r3, #32]
   b550a:	4632      	mov	r2, r6
   b550c:	2308      	movs	r3, #8
   b550e:	b209      	sxth	r1, r1
   b5510:	4658      	mov	r0, fp
   b5512:	47a0      	blx	r4
        endWrite();
   b5514:	f8db 3000 	ldr.w	r3, [fp]
   b5518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b551a:	4658      	mov	r0, fp
}
   b551c:	b011      	add	sp, #68	; 0x44
   b551e:	ecbd 8b02 	vpop	{d8}
   b5522:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5526:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5528:	9906      	ldr	r1, [sp, #24]
   b552a:	fb14 f202 	smulbb	r2, r4, r2
   b552e:	440a      	add	r2, r1
   b5530:	9904      	ldr	r1, [sp, #16]
   b5532:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5534:	9400      	str	r4, [sp, #0]
   b5536:	69db      	ldr	r3, [r3, #28]
   b5538:	ee18 1a10 	vmov	r1, s16
   b553c:	461f      	mov	r7, r3
   b553e:	b212      	sxth	r2, r2
   b5540:	462b      	mov	r3, r5
   b5542:	4658      	mov	r0, fp
   b5544:	47b8      	blx	r7
   b5546:	e7bb      	b.n	b54c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5548:	9a04      	ldr	r2, [sp, #16]
   b554a:	4542      	cmp	r2, r8
   b554c:	d0b8      	beq.n	b54c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b554e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5550:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5554:	d107      	bne.n	b5566 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5556:	2c01      	cmp	r4, #1
   b5558:	d105      	bne.n	b5566 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b555a:	699b      	ldr	r3, [r3, #24]
   b555c:	9906      	ldr	r1, [sp, #24]
   b555e:	461f      	mov	r7, r3
   b5560:	440a      	add	r2, r1
   b5562:	4643      	mov	r3, r8
   b5564:	e7a8      	b.n	b54b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5566:	9906      	ldr	r1, [sp, #24]
   b5568:	f8cd 8004 	str.w	r8, [sp, #4]
   b556c:	fb14 f202 	smulbb	r2, r4, r2
   b5570:	440a      	add	r2, r1
   b5572:	e7df      	b.n	b5534 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5576:	f8cd 8004 	str.w	r8, [sp, #4]
   b557a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b557e:	9a08      	ldr	r2, [sp, #32]
   b5580:	00e4      	lsls	r4, r4, #3
   b5582:	440a      	add	r2, r1
   b5584:	4611      	mov	r1, r2
   b5586:	9400      	str	r4, [sp, #0]
   b5588:	69dc      	ldr	r4, [r3, #28]
   b558a:	4632      	mov	r2, r6
   b558c:	462b      	mov	r3, r5
   b558e:	b209      	sxth	r1, r1
   b5590:	4658      	mov	r0, fp
   b5592:	47a0      	blx	r4
        endWrite();
   b5594:	e7be      	b.n	b5514 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5596:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5598:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b559a:	6812      	ldr	r2, [r2, #0]
   b559c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b559e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b55a0:	b2ff      	uxtb	r7, r7
   b55a2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b55a6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b55aa:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b55ac:	789a      	ldrb	r2, [r3, #2]
   b55ae:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b55b0:	78da      	ldrb	r2, [r3, #3]
   b55b2:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b55b4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b55b6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b55ba:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b55be:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b55c0:	d801      	bhi.n	b55c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b55c2:	2c01      	cmp	r4, #1
   b55c4:	d957      	bls.n	b5676 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b55c6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b55ca:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b55cc:	fa0f f38a 	sxth.w	r3, sl
   b55d0:	9307      	str	r3, [sp, #28]
        startWrite();
   b55d2:	f8db 3000 	ldr.w	r3, [fp]
   b55d6:	4658      	mov	r0, fp
   b55d8:	695b      	ldr	r3, [r3, #20]
   b55da:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b55dc:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b55de:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b55e2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b55e4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b55e8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b55ea:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b55ec:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b55ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b55f0:	429f      	cmp	r7, r3
   b55f2:	d28f      	bcs.n	b5514 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b55f4:	9b07      	ldr	r3, [sp, #28]
   b55f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b55f8:	443b      	add	r3, r7
   b55fa:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b55fe:	2200      	movs	r2, #0
   b5600:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5602:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5604:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5606:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b560a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b560e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5612:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5614:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5616:	9905      	ldr	r1, [sp, #20]
   b5618:	4291      	cmp	r1, r2
   b561a:	d241      	bcs.n	b56a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b561c:	1c5a      	adds	r2, r3, #1
   b561e:	b2d2      	uxtb	r2, r2
   b5620:	075b      	lsls	r3, r3, #29
   b5622:	920d      	str	r2, [sp, #52]	; 0x34
   b5624:	d107      	bne.n	b5636 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5626:	9b06      	ldr	r3, [sp, #24]
   b5628:	9906      	ldr	r1, [sp, #24]
   b562a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b562c:	3301      	adds	r3, #1
   b562e:	b29b      	uxth	r3, r3
   b5630:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5634:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b5636:	f019 0f80 	tst.w	r9, #128	; 0x80
   b563a:	d012      	beq.n	b5662 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b563c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b563e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5642:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b5646:	d11a      	bne.n	b567e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5648:	2c01      	cmp	r4, #1
   b564a:	d118      	bne.n	b567e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b564c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b564e:	699b      	ldr	r3, [r3, #24]
   b5650:	4411      	add	r1, r2
   b5652:	9a05      	ldr	r2, [sp, #20]
   b5654:	4411      	add	r1, r2
   b5656:	461e      	mov	r6, r3
   b5658:	4652      	mov	r2, sl
   b565a:	9b04      	ldr	r3, [sp, #16]
   b565c:	b209      	sxth	r1, r1
   b565e:	4658      	mov	r0, fp
   b5660:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5662:	9e05      	ldr	r6, [sp, #20]
   b5664:	3601      	adds	r6, #1
   b5666:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5668:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b566c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b566e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5674:	e7ce      	b.n	b5614 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5676:	2300      	movs	r3, #0
   b5678:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b567c:	e7a9      	b.n	b55d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b567e:	9805      	ldr	r0, [sp, #20]
   b5680:	9a08      	ldr	r2, [sp, #32]
   b5682:	4402      	add	r2, r0
   b5684:	fb02 1105 	mla	r1, r2, r5, r1
   b5688:	9a04      	ldr	r2, [sp, #16]
   b568a:	e9cd 4200 	strd	r4, r2, [sp]
   b568e:	69db      	ldr	r3, [r3, #28]
   b5690:	ee18 2a10 	vmov	r2, s16
   b5694:	461e      	mov	r6, r3
   b5696:	b209      	sxth	r1, r1
   b5698:	462b      	mov	r3, r5
   b569a:	4658      	mov	r0, fp
   b569c:	47b0      	blx	r6
   b569e:	e7e0      	b.n	b5662 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b56a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b56a2:	3701      	adds	r7, #1
   b56a4:	4498      	add	r8, r3
   b56a6:	fa5f f888 	uxtb.w	r8, r8
   b56aa:	b2ff      	uxtb	r7, r7
   b56ac:	e79f      	b.n	b55ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b56ae:	b011      	add	sp, #68	; 0x44
   b56b0:	ecbd 8b02 	vpop	{d8}
   b56b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b56b8:	000b8d5a 	.word	0x000b8d5a

000b56bc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b56bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b56be:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b56c0:	b085      	sub	sp, #20
   b56c2:	4604      	mov	r4, r0
   b56c4:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b56c6:	2a00      	cmp	r2, #0
   b56c8:	d134      	bne.n	b5734 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b56ca:	290a      	cmp	r1, #10
   b56cc:	d108      	bne.n	b56e0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b56ce:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b56d0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b56d2:	7e42      	ldrb	r2, [r0, #25]
   b56d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b56d8:	8263      	strh	r3, [r4, #18]
}
   b56da:	2001      	movs	r0, #1
   b56dc:	b005      	add	sp, #20
   b56de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b56e0:	290d      	cmp	r1, #13
   b56e2:	d0fa      	beq.n	b56da <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b56e4:	7ee1      	ldrb	r1, [r4, #27]
   b56e6:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b56e8:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b56ea:	b171      	cbz	r1, b570a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b56ec:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b56f0:	2106      	movs	r1, #6
   b56f2:	fb11 6100 	smlabb	r1, r1, r0, r6
   b56f6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b56fa:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b56fc:	bfc1      	itttt	gt
   b56fe:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b5702:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5704:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5708:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b570a:	8ae2      	ldrh	r2, [r4, #22]
   b570c:	9201      	str	r2, [sp, #4]
   b570e:	8aa2      	ldrh	r2, [r4, #20]
   b5710:	9200      	str	r2, [sp, #0]
   b5712:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b5716:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b571a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b571e:	4620      	mov	r0, r4
   b5720:	f7ff fe5e 	bl	b53e0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5724:	7e23      	ldrb	r3, [r4, #24]
   b5726:	8a22      	ldrh	r2, [r4, #16]
   b5728:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b572c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5730:	8223      	strh	r3, [r4, #16]
   b5732:	e7d2      	b.n	b56da <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b5734:	290a      	cmp	r1, #10
   b5736:	d107      	bne.n	b5748 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b5738:	2300      	movs	r3, #0
   b573a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b573c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b573e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b5740:	8a43      	ldrh	r3, [r0, #18]
   b5742:	fb01 3302 	mla	r3, r1, r2, r3
   b5746:	e7c7      	b.n	b56d8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b5748:	290d      	cmp	r1, #13
   b574a:	d0c6      	beq.n	b56da <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b574c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b574e:	42a9      	cmp	r1, r5
   b5750:	d3c3      	bcc.n	b56da <_ZN12Adafruit_GFX5writeEh+0x1e>
   b5752:	7a51      	ldrb	r1, [r2, #9]
   b5754:	4299      	cmp	r1, r3
   b5756:	d3c0      	bcc.n	b56da <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5758:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b575a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b575c:	b2ed      	uxtb	r5, r5
   b575e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5762:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5764:	b328      	cbz	r0, b57b2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b5766:	78e9      	ldrb	r1, [r5, #3]
   b5768:	b319      	cbz	r1, b57b2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b576a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b576c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b576e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5770:	b191      	cbz	r1, b5798 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5772:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5776:	4408      	add	r0, r1
   b5778:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b577c:	fb06 1100 	mla	r1, r6, r0, r1
   b5780:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5784:	4281      	cmp	r1, r0
   b5786:	dd07      	ble.n	b5798 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5788:	2000      	movs	r0, #0
   b578a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b578c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5790:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5792:	fb02 1207 	mla	r2, r2, r7, r1
   b5796:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5798:	8ae2      	ldrh	r2, [r4, #22]
   b579a:	9201      	str	r2, [sp, #4]
   b579c:	8aa2      	ldrh	r2, [r4, #20]
   b579e:	9200      	str	r2, [sp, #0]
   b57a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b57a4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b57a8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b57ac:	4620      	mov	r0, r4
   b57ae:	f7ff fe17 	bl	b53e0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b57b2:	7929      	ldrb	r1, [r5, #4]
   b57b4:	7e22      	ldrb	r2, [r4, #24]
   b57b6:	8a23      	ldrh	r3, [r4, #16]
   b57b8:	fb01 3302 	mla	r3, r1, r2, r3
   b57bc:	e7b8      	b.n	b5730 <_ZN12Adafruit_GFX5writeEh+0x74>

000b57be <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b57be:	2901      	cmp	r1, #1
   b57c0:	bf38      	it	cc
   b57c2:	2101      	movcc	r1, #1
   b57c4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b57c6:	7641      	strb	r1, [r0, #25]
}
   b57c8:	4770      	bx	lr

000b57ca <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b57ca:	4770      	bx	lr

000b57cc <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b57cc:	b510      	push	{r4, lr}
  }
   b57ce:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b57d0:	4604      	mov	r4, r0
  }
   b57d2:	f7fe fc64 	bl	b409e <_ZdlPvj>
   b57d6:	4620      	mov	r0, r4
   b57d8:	bd10      	pop	{r4, pc}

000b57da <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b57da:	b40e      	push	{r1, r2, r3}
   b57dc:	b503      	push	{r0, r1, lr}
   b57de:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b57e0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b57e2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b57e6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b57e8:	f001 ff45 	bl	b7676 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b57ec:	b002      	add	sp, #8
   b57ee:	f85d eb04 	ldr.w	lr, [sp], #4
   b57f2:	b003      	add	sp, #12
   b57f4:	4770      	bx	lr
	...

000b57f8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b57f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b57fa:	4604      	mov	r4, r0
   b57fc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b57fe:	7922      	ldrb	r2, [r4, #4]
   b5800:	68a3      	ldr	r3, [r4, #8]
   b5802:	b132      	cbz	r2, b5812 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5804:	b9a3      	cbnz	r3, b5830 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5806:	490b      	ldr	r1, [pc, #44]	; (b5834 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5808:	b002      	add	sp, #8
   b580a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b580e:	f001 bef7 	b.w	b7600 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5812:	4a09      	ldr	r2, [pc, #36]	; (b5838 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5814:	7b26      	ldrb	r6, [r4, #12]
   b5816:	4d09      	ldr	r5, [pc, #36]	; (b583c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5818:	4909      	ldr	r1, [pc, #36]	; (b5840 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b581a:	7b64      	ldrb	r4, [r4, #13]
   b581c:	2e01      	cmp	r6, #1
   b581e:	bf18      	it	ne
   b5820:	4629      	movne	r1, r5
   b5822:	e9cd 1400 	strd	r1, r4, [sp]
   b5826:	4907      	ldr	r1, [pc, #28]	; (b5844 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5828:	f7ff ffd7 	bl	b57da <_ZN5Print6printfEPKcz>
  }
   b582c:	b002      	add	sp, #8
   b582e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5830:	4a05      	ldr	r2, [pc, #20]	; (b5848 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5832:	e7ef      	b.n	b5814 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5834:	000b92c5 	.word	0x000b92c5
   b5838:	000b8cd0 	.word	0x000b8cd0
   b583c:	000b92c1 	.word	0x000b92c1
   b5840:	000b92bd 	.word	0x000b92bd
   b5844:	000b92db 	.word	0x000b92db
   b5848:	000b92b4 	.word	0x000b92b4

000b584c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b584c:	b510      	push	{r4, lr}
   b584e:	4b04      	ldr	r3, [pc, #16]	; (b5860 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b5850:	6003      	str	r3, [r0, #0]
   b5852:	4604      	mov	r4, r0
  if(buffer) {
   b5854:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5856:	b108      	cbz	r0, b585c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b5858:	f001 fc90 	bl	b717c <free>
    buffer = NULL;
  }
}
   b585c:	4620      	mov	r0, r4
   b585e:	bd10      	pop	{r4, pc}
   b5860:	000b97b4 	.word	0x000b97b4

000b5864 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5864:	b510      	push	{r4, lr}
   b5866:	4604      	mov	r4, r0
}
   b5868:	f7ff fff0 	bl	b584c <_ZN16Adafruit_SSD1306D1Ev>
   b586c:	4620      	mov	r0, r4
   b586e:	2150      	movs	r1, #80	; 0x50
   b5870:	f7fe fc15 	bl	b409e <_ZdlPvj>
   b5874:	4620      	mov	r0, r4
   b5876:	bd10      	pop	{r4, pc}

000b5878 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5878:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b587a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b587c:	db4b      	blt.n	b5916 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b587e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5882:	428c      	cmp	r4, r1
   b5884:	dd47      	ble.n	b5916 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5886:	2a00      	cmp	r2, #0
   b5888:	db45      	blt.n	b5916 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b588a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b588e:	4294      	cmp	r4, r2
   b5890:	dd41      	ble.n	b5916 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5892:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b5894:	2c02      	cmp	r4, #2
   b5896:	d01f      	beq.n	b58d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b5898:	2c03      	cmp	r4, #3
   b589a:	d026      	beq.n	b58ea <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b589c:	2c01      	cmp	r4, #1
   b589e:	d104      	bne.n	b58aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b58a0:	8904      	ldrh	r4, [r0, #8]
   b58a2:	43d2      	mvns	r2, r2
   b58a4:	4414      	add	r4, r2
      break;
   b58a6:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b58a8:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b58aa:	2b01      	cmp	r3, #1
   b58ac:	d023      	beq.n	b58f6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b58ae:	2b02      	cmp	r3, #2
   b58b0:	d032      	beq.n	b5918 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b58b2:	bb83      	cbnz	r3, b5916 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b58b4:	2a00      	cmp	r2, #0
   b58b6:	4613      	mov	r3, r2
   b58b8:	8904      	ldrh	r4, [r0, #8]
   b58ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b58bc:	bfb8      	it	lt
   b58be:	1dd3      	addlt	r3, r2, #7
   b58c0:	10db      	asrs	r3, r3, #3
   b58c2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b58c6:	f002 0207 	and.w	r2, r2, #7
   b58ca:	2301      	movs	r3, #1
   b58cc:	4093      	lsls	r3, r2
   b58ce:	5c42      	ldrb	r2, [r0, r1]
   b58d0:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b58d4:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b58d6:	e01e      	b.n	b5916 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b58d8:	8904      	ldrh	r4, [r0, #8]
   b58da:	3c01      	subs	r4, #1
   b58dc:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b58de:	8944      	ldrh	r4, [r0, #10]
   b58e0:	43d2      	mvns	r2, r2
   b58e2:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b58e4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b58e6:	b212      	sxth	r2, r2
      break;
   b58e8:	e7df      	b.n	b58aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b58ea:	8944      	ldrh	r4, [r0, #10]
   b58ec:	3c01      	subs	r4, #1
   b58ee:	1a64      	subs	r4, r4, r1
      break;
   b58f0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b58f2:	b222      	sxth	r2, r4
      break;
   b58f4:	e7d9      	b.n	b58aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b58f6:	2a00      	cmp	r2, #0
   b58f8:	8904      	ldrh	r4, [r0, #8]
   b58fa:	4613      	mov	r3, r2
   b58fc:	bfb8      	it	lt
   b58fe:	1dd3      	addlt	r3, r2, #7
   b5900:	10db      	asrs	r3, r3, #3
   b5902:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5906:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5908:	f002 0007 	and.w	r0, r2, #7
   b590c:	2201      	movs	r2, #1
   b590e:	4082      	lsls	r2, r0
   b5910:	5c58      	ldrb	r0, [r3, r1]
   b5912:	4302      	orrs	r2, r0
   b5914:	545a      	strb	r2, [r3, r1]
}
   b5916:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5918:	2a00      	cmp	r2, #0
   b591a:	4613      	mov	r3, r2
   b591c:	8904      	ldrh	r4, [r0, #8]
   b591e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5920:	bfb8      	it	lt
   b5922:	1dd3      	addlt	r3, r2, #7
   b5924:	10db      	asrs	r3, r3, #3
   b5926:	fb13 1104 	smlabb	r1, r3, r4, r1
   b592a:	f002 0207 	and.w	r2, r2, #7
   b592e:	2301      	movs	r3, #1
   b5930:	fa03 f202 	lsl.w	r2, r3, r2
   b5934:	5c43      	ldrb	r3, [r0, r1]
   b5936:	405a      	eors	r2, r3
   b5938:	e7cc      	b.n	b58d4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b593c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b593c:	b570      	push	{r4, r5, r6, lr}
   b593e:	4604      	mov	r4, r0
   b5940:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5942:	2600      	movs	r6, #0
   b5944:	f7ff fce2 	bl	b530c <_ZN12Adafruit_GFXC1Ess>
   b5948:	4b11      	ldr	r3, [pc, #68]	; (b5990 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b594a:	6023      	str	r3, [r4, #0]
   b594c:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b594e:	b915      	cbnz	r5, b5956 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b5950:	f002 fe50 	bl	b85f4 <_Z19__fetch_global_Wirev>
   b5954:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5956:	23ff      	movs	r3, #255	; 0xff
   b5958:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b595c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b5960:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5964:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b5968:	4b0a      	ldr	r3, [pc, #40]	; (b5994 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b596a:	63a3      	str	r3, [r4, #56]	; 0x38
   b596c:	2301      	movs	r3, #1
   b596e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5972:	9b05      	ldr	r3, [sp, #20]
   b5974:	64a3      	str	r3, [r4, #72]	; 0x48
   b5976:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b597a:	9b06      	ldr	r3, [sp, #24]
   b597c:	86a2      	strh	r2, [r4, #52]	; 0x34
   b597e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b5982:	6426      	str	r6, [r4, #64]	; 0x40
   b5984:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b5988:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b598a:	4620      	mov	r0, r4
   b598c:	bd70      	pop	{r4, r5, r6, pc}
   b598e:	bf00      	nop
   b5990:	000b97b4 	.word	0x000b97b4
   b5994:	000b9300 	.word	0x000b9300

000b5998 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b599a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b599c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b599e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b59a0:	b190      	cbz	r0, b59c8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b59a2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b59a6:	f001 fcb7 	bl	b7318 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b59aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b59ac:	6803      	ldr	r3, [r0, #0]
   b59ae:	2100      	movs	r1, #0
   b59b0:	689b      	ldr	r3, [r3, #8]
   b59b2:	4798      	blx	r3
    WIRE_WRITE(c);
   b59b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b59b6:	6803      	ldr	r3, [r0, #0]
   b59b8:	4629      	mov	r1, r5
   b59ba:	689b      	ldr	r3, [r3, #8]
   b59bc:	4798      	blx	r3
    wire->endTransmission();
   b59be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b59c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b59c4:	f001 bcaf 	b.w	b7326 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b59c8:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b59cc:	4601      	mov	r1, r0
   b59ce:	b298      	uxth	r0, r3
   b59d0:	f002 fd8f 	bl	b84f2 <digitalWrite>
  if(spi) {
   b59d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b59d6:	b120      	cbz	r0, b59e2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b59d8:	4629      	mov	r1, r5
}
   b59da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b59de:	f001 bf2d 	b.w	b783c <_ZN8SPIClass8transferEh>
   b59e2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b59e4:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b59e6:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b59ea:	ea05 0107 	and.w	r1, r5, r7
   b59ee:	b280      	uxth	r0, r0
   b59f0:	f002 fd7f 	bl	b84f2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b59f4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b59f8:	2101      	movs	r1, #1
   b59fa:	b280      	uxth	r0, r0
   b59fc:	f002 fd79 	bl	b84f2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5a00:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5a04:	2100      	movs	r1, #0
   b5a06:	b280      	uxth	r0, r0
   b5a08:	f002 fd73 	bl	b84f2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5a0c:	3e01      	subs	r6, #1
   b5a0e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b5a12:	d1e8      	bne.n	b59e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b5a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5a16 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5a16:	b538      	push	{r3, r4, r5, lr}
   b5a18:	4604      	mov	r4, r0
  TRANSACTION_START
   b5a1a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5a1c:	460d      	mov	r5, r1
  TRANSACTION_START
   b5a1e:	b180      	cbz	r0, b5a42 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b5a20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5a22:	f001 fc6b 	bl	b72fc <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b5a26:	2d00      	cmp	r5, #0
   b5a28:	4620      	mov	r0, r4
   b5a2a:	bf14      	ite	ne
   b5a2c:	21a7      	movne	r1, #167	; 0xa7
   b5a2e:	21a6      	moveq	r1, #166	; 0xa6
   b5a30:	f7ff ffb2 	bl	b5998 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5a34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a36:	b188      	cbz	r0, b5a5c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5a38:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5a3e:	f001 bc5d 	b.w	b72fc <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b5a42:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a44:	b118      	cbz	r0, b5a4e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b5a46:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5a4a:	f001 fe89 	bl	b7760 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5a4e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5a52:	2100      	movs	r1, #0
   b5a54:	b280      	uxth	r0, r0
   b5a56:	f002 fd4c 	bl	b84f2 <digitalWrite>
   b5a5a:	e7e4      	b.n	b5a26 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b5a5c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5a60:	2101      	movs	r1, #1
   b5a62:	b280      	uxth	r0, r0
   b5a64:	f002 fd45 	bl	b84f2 <digitalWrite>
   b5a68:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a6a:	b118      	cbz	r0, b5a74 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5a70:	f001 be5c 	b.w	b772c <_ZN8SPIClass14endTransactionEv>
}
   b5a74:	bd38      	pop	{r3, r4, r5, pc}

000b5a76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5a76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5a7a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5a7c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5a7e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5a80:	188f      	adds	r7, r1, r2
   b5a82:	b340      	cbz	r0, b5ad6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5a84:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5a88:	f001 fc46 	bl	b7318 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5a8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a8e:	6803      	ldr	r3, [r0, #0]
   b5a90:	2100      	movs	r1, #0
   b5a92:	689b      	ldr	r3, [r3, #8]
   b5a94:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5a96:	2601      	movs	r6, #1
    while(n--) {
   b5a98:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5a9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b5a9c:	d017      	beq.n	b5ace <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b5a9e:	2e1f      	cmp	r6, #31
   b5aa0:	d90c      	bls.n	b5abc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5aa2:	f001 fc40 	bl	b7326 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5aa6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5aaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5aac:	f001 fc34 	bl	b7318 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5ab0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5ab2:	6803      	ldr	r3, [r0, #0]
   b5ab4:	2100      	movs	r1, #0
   b5ab6:	689b      	ldr	r3, [r3, #8]
   b5ab8:	4798      	blx	r3
        bytesOut = 1;
   b5aba:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5abc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5abe:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5ac2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5ac4:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5ac6:	689b      	ldr	r3, [r3, #8]
   b5ac8:	4798      	blx	r3
      bytesOut++;
   b5aca:	b2f6      	uxtb	r6, r6
    while(n--) {
   b5acc:	e7e4      	b.n	b5a98 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5ace:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5ad2:	f001 bc28 	b.w	b7326 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5ad6:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5ada:	4601      	mov	r1, r0
   b5adc:	b298      	uxth	r0, r3
   b5ade:	f002 fd08 	bl	b84f2 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5ae2:	42bd      	cmp	r5, r7
   b5ae4:	d022      	beq.n	b5b2c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b5ae6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5ae8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5aec:	b118      	cbz	r0, b5af6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5aee:	4649      	mov	r1, r9
   b5af0:	f001 fea4 	bl	b783c <_ZN8SPIClass8transferEh>
   b5af4:	e7f5      	b.n	b5ae2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5af6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5af8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5afc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5b00:	ea09 0108 	and.w	r1, r9, r8
   b5b04:	b280      	uxth	r0, r0
   b5b06:	f002 fcf4 	bl	b84f2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5b0a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5b0e:	2101      	movs	r1, #1
   b5b10:	b280      	uxth	r0, r0
   b5b12:	f002 fcee 	bl	b84f2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5b16:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5b1a:	2100      	movs	r1, #0
   b5b1c:	b280      	uxth	r0, r0
   b5b1e:	f002 fce8 	bl	b84f2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5b22:	3e01      	subs	r6, #1
   b5b24:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5b28:	d1e8      	bne.n	b5afc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b5b2a:	e7da      	b.n	b5ae2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b5b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5b30 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5b30:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5b34:	1dda      	adds	r2, r3, #7
   b5b36:	bf48      	it	mi
   b5b38:	f103 020e 	addmi.w	r2, r3, #14
   b5b3c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5b40:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5b42:	10d2      	asrs	r2, r2, #3
   b5b44:	435a      	muls	r2, r3
   b5b46:	2100      	movs	r1, #0
   b5b48:	f002 bee8 	b.w	b891c <memset>

000b5b4c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b5b4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5b50:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5b52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b5b54:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5b58:	4604      	mov	r4, r0
   b5b5a:	460f      	mov	r7, r1
   b5b5c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5b5e:	b1c3      	cbz	r3, b5b92 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b5b60:	4620      	mov	r0, r4
   b5b62:	f7ff ffe5 	bl	b5b30 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b5b66:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b5b6a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5b6e:	2820      	cmp	r0, #32
   b5b70:	dc21      	bgt.n	b5bb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5b72:	2320      	movs	r3, #32
   b5b74:	2201      	movs	r2, #1
   b5b76:	3820      	subs	r0, #32
   b5b78:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5b7c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b5b80:	2373      	movs	r3, #115	; 0x73
   b5b82:	3973      	subs	r1, #115	; 0x73
   b5b84:	9300      	str	r3, [sp, #0]
   b5b86:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5b8a:	4b89      	ldr	r3, [pc, #548]	; (b5db0 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5b8c:	f340 024f 	sbfx	r2, r0, #1, #16
   b5b90:	e021      	b.n	b5bd6 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5b92:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5b96:	1dd8      	adds	r0, r3, #7
   b5b98:	bf48      	it	mi
   b5b9a:	f103 000e 	addmi.w	r0, r3, #14
   b5b9e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5ba2:	10c0      	asrs	r0, r0, #3
   b5ba4:	4358      	muls	r0, r3
   b5ba6:	f001 fae1 	bl	b716c <malloc>
   b5baa:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5bac:	2800      	cmp	r0, #0
   b5bae:	d1d7      	bne.n	b5b60 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5bb0:	b004      	add	sp, #16
   b5bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b5bb6:	3840      	subs	r0, #64	; 0x40
   b5bb8:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5bbc:	fa02 f280 	sxtah	r2, r2, r0
   b5bc0:	2340      	movs	r3, #64	; 0x40
   b5bc2:	2001      	movs	r0, #1
   b5bc4:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5bc8:	2352      	movs	r3, #82	; 0x52
   b5bca:	3952      	subs	r1, #82	; 0x52
   b5bcc:	9300      	str	r3, [sp, #0]
   b5bce:	4b79      	ldr	r3, [pc, #484]	; (b5db4 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5bd0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5bd4:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5bd6:	4620      	mov	r0, r4
   b5bd8:	f341 014f 	sbfx	r1, r1, #1, #16
   b5bdc:	f7ff fbac 	bl	b5338 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5be0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5be2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b5be6:	2800      	cmp	r0, #0
   b5be8:	d078      	beq.n	b5cdc <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5bea:	2d00      	cmp	r5, #0
   b5bec:	d174      	bne.n	b5cd8 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b5bee:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5bf2:	2b20      	cmp	r3, #32
   b5bf4:	bf0c      	ite	eq
   b5bf6:	253c      	moveq	r5, #60	; 0x3c
   b5bf8:	253d      	movne	r5, #61	; 0x3d
   b5bfa:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b5bfe:	f1b8 0f00 	cmp.w	r8, #0
   b5c02:	d001      	beq.n	b5c08 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5c04:	f001 fb7e 	bl	b7304 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b5c08:	b1fe      	cbz	r6, b5c4a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b5c0a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5c0e:	2800      	cmp	r0, #0
   b5c10:	db1b      	blt.n	b5c4a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b5c12:	2101      	movs	r1, #1
   b5c14:	b280      	uxth	r0, r0
   b5c16:	f002 fc5b 	bl	b84d0 <pinMode>
    digitalWrite(rstPin, HIGH);
   b5c1a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5c1e:	2101      	movs	r1, #1
   b5c20:	b280      	uxth	r0, r0
   b5c22:	f002 fc66 	bl	b84f2 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b5c26:	2001      	movs	r0, #1
   b5c28:	f001 fae0 	bl	b71ec <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5c2c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5c30:	2100      	movs	r1, #0
   b5c32:	b280      	uxth	r0, r0
   b5c34:	f002 fc5d 	bl	b84f2 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b5c38:	200a      	movs	r0, #10
   b5c3a:	f001 fad7 	bl	b71ec <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b5c3e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5c42:	2101      	movs	r1, #1
   b5c44:	b280      	uxth	r0, r0
   b5c46:	f002 fc54 	bl	b84f2 <digitalWrite>
  TRANSACTION_START
   b5c4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5c4c:	2800      	cmp	r0, #0
   b5c4e:	d074      	beq.n	b5d3a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b5c50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5c52:	f001 fb53 	bl	b72fc <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5c56:	2204      	movs	r2, #4
   b5c58:	4957      	ldr	r1, [pc, #348]	; (b5db8 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b5c5a:	4620      	mov	r0, r4
   b5c5c:	f7ff ff0b 	bl	b5a76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5c60:	8961      	ldrh	r1, [r4, #10]
   b5c62:	3901      	subs	r1, #1
   b5c64:	b2c9      	uxtb	r1, r1
   b5c66:	4620      	mov	r0, r4
   b5c68:	f7ff fe96 	bl	b5998 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5c6c:	4953      	ldr	r1, [pc, #332]	; (b5dbc <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b5c6e:	2204      	movs	r2, #4
   b5c70:	4620      	mov	r0, r4
   b5c72:	f7ff ff00 	bl	b5a76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5c76:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5c7a:	2b01      	cmp	r3, #1
   b5c7c:	bf0c      	ite	eq
   b5c7e:	2110      	moveq	r1, #16
   b5c80:	2114      	movne	r1, #20
   b5c82:	4620      	mov	r0, r4
   b5c84:	f7ff fe88 	bl	b5998 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5c88:	2204      	movs	r2, #4
   b5c8a:	494d      	ldr	r1, [pc, #308]	; (b5dc0 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5c8c:	4620      	mov	r0, r4
   b5c8e:	f7ff fef2 	bl	b5a76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b5c92:	68a3      	ldr	r3, [r4, #8]
   b5c94:	4a4b      	ldr	r2, [pc, #300]	; (b5dc4 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5c96:	4293      	cmp	r3, r2
   b5c98:	d15c      	bne.n	b5d54 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5c9a:	494b      	ldr	r1, [pc, #300]	; (b5dc8 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5c9c:	2204      	movs	r2, #4
   b5c9e:	4620      	mov	r0, r4
   b5ca0:	f7ff fee9 	bl	b5a76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5ca4:	21d9      	movs	r1, #217	; 0xd9
   b5ca6:	4620      	mov	r0, r4
   b5ca8:	f7ff fe76 	bl	b5998 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5cac:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5cb0:	2b01      	cmp	r3, #1
   b5cb2:	bf0c      	ite	eq
   b5cb4:	2122      	moveq	r1, #34	; 0x22
   b5cb6:	21f1      	movne	r1, #241	; 0xf1
   b5cb8:	4620      	mov	r0, r4
   b5cba:	f7ff fe6d 	bl	b5998 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5cbe:	4620      	mov	r0, r4
   b5cc0:	4942      	ldr	r1, [pc, #264]	; (b5dcc <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5cc2:	2206      	movs	r2, #6
   b5cc4:	f7ff fed7 	bl	b5a76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5cc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5cca:	2800      	cmp	r0, #0
   b5ccc:	d063      	beq.n	b5d96 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b5cce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5cd0:	f001 fb14 	bl	b72fc <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5cd4:	2001      	movs	r0, #1
   b5cd6:	e76b      	b.n	b5bb0 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5cd8:	b26d      	sxtb	r5, r5
   b5cda:	e78e      	b.n	b5bfa <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5cdc:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5ce0:	2101      	movs	r1, #1
   b5ce2:	b280      	uxth	r0, r0
   b5ce4:	f002 fbf4 	bl	b84d0 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5ce8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5cec:	2101      	movs	r1, #1
   b5cee:	b280      	uxth	r0, r0
   b5cf0:	f002 fbee 	bl	b84d0 <pinMode>
    SSD1306_DESELECT
   b5cf4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5cf8:	2101      	movs	r1, #1
   b5cfa:	b280      	uxth	r0, r0
   b5cfc:	f002 fbf9 	bl	b84f2 <digitalWrite>
    if(spi) { // Hardware SPI
   b5d00:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5d02:	b13d      	cbz	r5, b5d14 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b5d04:	f1b8 0f00 	cmp.w	r8, #0
   b5d08:	f43f af7e 	beq.w	b5c08 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5d0c:	4628      	mov	r0, r5
   b5d0e:	f001 fcf9 	bl	b7704 <_ZN8SPIClass5beginEv>
   b5d12:	e779      	b.n	b5c08 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5d14:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5d18:	2101      	movs	r1, #1
   b5d1a:	b280      	uxth	r0, r0
   b5d1c:	f002 fbd8 	bl	b84d0 <pinMode>
      pinMode(clkPin , OUTPUT);
   b5d20:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5d24:	2101      	movs	r1, #1
   b5d26:	b280      	uxth	r0, r0
   b5d28:	f002 fbd2 	bl	b84d0 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5d2c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5d30:	4629      	mov	r1, r5
   b5d32:	b280      	uxth	r0, r0
   b5d34:	f002 fbdd 	bl	b84f2 <digitalWrite>
   b5d38:	e766      	b.n	b5c08 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b5d3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d3c:	b118      	cbz	r0, b5d46 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b5d3e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5d42:	f001 fd0d 	bl	b7760 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5d46:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d4a:	2100      	movs	r1, #0
   b5d4c:	b280      	uxth	r0, r0
   b5d4e:	f002 fbd0 	bl	b84f2 <digitalWrite>
   b5d52:	e780      	b.n	b5c56 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b5d54:	4a1e      	ldr	r2, [pc, #120]	; (b5dd0 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5d56:	4293      	cmp	r3, r2
   b5d58:	d10e      	bne.n	b5d78 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b5d5a:	491e      	ldr	r1, [pc, #120]	; (b5dd4 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b5d5c:	2203      	movs	r2, #3
   b5d5e:	4620      	mov	r0, r4
   b5d60:	f7ff fe89 	bl	b5a76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5d64:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5d68:	2b01      	cmp	r3, #1
   b5d6a:	bf0c      	ite	eq
   b5d6c:	219f      	moveq	r1, #159	; 0x9f
   b5d6e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5d70:	4620      	mov	r0, r4
   b5d72:	f7ff fe11 	bl	b5998 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5d76:	e795      	b.n	b5ca4 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5d78:	4a17      	ldr	r2, [pc, #92]	; (b5dd8 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b5d7a:	4293      	cmp	r3, r2
   b5d7c:	d192      	bne.n	b5ca4 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5d7e:	4917      	ldr	r1, [pc, #92]	; (b5ddc <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5d80:	2203      	movs	r2, #3
   b5d82:	4620      	mov	r0, r4
   b5d84:	f7ff fe77 	bl	b5a76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5d88:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5d8c:	2b01      	cmp	r3, #1
   b5d8e:	bf0c      	ite	eq
   b5d90:	2110      	moveq	r1, #16
   b5d92:	21af      	movne	r1, #175	; 0xaf
   b5d94:	e7ec      	b.n	b5d70 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5d96:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d9a:	2101      	movs	r1, #1
   b5d9c:	b280      	uxth	r0, r0
   b5d9e:	f002 fba8 	bl	b84f2 <digitalWrite>
   b5da2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5da4:	2800      	cmp	r0, #0
   b5da6:	d095      	beq.n	b5cd4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5da8:	f001 fcc0 	bl	b772c <_ZN8SPIClass14endTransactionEv>
   b5dac:	e792      	b.n	b5cd4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5dae:	bf00      	nop
   b5db0:	000b95cc 	.word	0x000b95cc
   b5db4:	000b930c 	.word	0x000b930c
   b5db8:	000b9814 	.word	0x000b9814
   b5dbc:	000b9818 	.word	0x000b9818
   b5dc0:	000b981c 	.word	0x000b981c
   b5dc4:	00200080 	.word	0x00200080
   b5dc8:	000b9826 	.word	0x000b9826
   b5dcc:	000b9820 	.word	0x000b9820
   b5dd0:	00400080 	.word	0x00400080
   b5dd4:	000b982a 	.word	0x000b982a
   b5dd8:	00100060 	.word	0x00100060
   b5ddc:	000b982d 	.word	0x000b982d

000b5de0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5de0:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5de2:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5de4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5de8:	db3d      	blt.n	b5e66 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5dea:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5dee:	4294      	cmp	r4, r2
   b5df0:	dd39      	ble.n	b5e66 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5df2:	2900      	cmp	r1, #0
      w += x;
   b5df4:	bfbe      	ittt	lt
   b5df6:	185b      	addlt	r3, r3, r1
   b5df8:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5dfa:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5dfc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5e00:	18ce      	adds	r6, r1, r3
   b5e02:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5e04:	bfc4      	itt	gt
   b5e06:	1a63      	subgt	r3, r4, r1
   b5e08:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5e0a:	2b00      	cmp	r3, #0
   b5e0c:	dd2b      	ble.n	b5e66 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5e0e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5e10:	10d6      	asrs	r6, r2, #3
   b5e12:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5e16:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5e18:	f002 0007 	and.w	r0, r2, #7
   b5e1c:	2201      	movs	r2, #1
   b5e1e:	4082      	lsls	r2, r0
      switch(color) {
   b5e20:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5e22:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5e24:	d016      	beq.n	b5e54 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5e26:	2d02      	cmp	r5, #2
   b5e28:	d00b      	beq.n	b5e42 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5e2a:	b9e5      	cbnz	r5, b5e66 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5e2c:	43d2      	mvns	r2, r2
   b5e2e:	b2d2      	uxtb	r2, r2
   b5e30:	440b      	add	r3, r1
   b5e32:	4299      	cmp	r1, r3
   b5e34:	d017      	beq.n	b5e66 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5e36:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5e3a:	4010      	ands	r0, r2
   b5e3c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5e40:	e7f7      	b.n	b5e32 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5e42:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5e44:	4299      	cmp	r1, r3
   b5e46:	d00e      	beq.n	b5e66 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5e48:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5e4c:	4050      	eors	r0, r2
   b5e4e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5e52:	e7f7      	b.n	b5e44 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5e54:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5e56:	4299      	cmp	r1, r3
   b5e58:	d005      	beq.n	b5e66 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5e5a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5e5e:	4310      	orrs	r0, r2
   b5e60:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5e64:	e7f7      	b.n	b5e56 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5e66:	bd70      	pop	{r4, r5, r6, pc}

000b5e68 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5e68:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5e6a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5e6c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5e70:	db76      	blt.n	b5f60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5e72:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5e76:	42b1      	cmp	r1, r6
   b5e78:	da72      	bge.n	b5f60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5e7a:	2a00      	cmp	r2, #0
      __h += __y;
   b5e7c:	bfbe      	ittt	lt
   b5e7e:	189b      	addlt	r3, r3, r2
   b5e80:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5e82:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5e84:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5e88:	18d7      	adds	r7, r2, r3
   b5e8a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5e8c:	bfc4      	itt	gt
   b5e8e:	1aa3      	subgt	r3, r4, r2
   b5e90:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5e92:	2b00      	cmp	r3, #0
   b5e94:	dd64      	ble.n	b5f60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5e96:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5e9a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5e9c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5ea0:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5ea4:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5ea6:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5eaa:	d023      	beq.n	b5ef4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5eac:	f1c2 0208 	rsb	r2, r2, #8
   b5eb0:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5eb2:	492d      	ldr	r1, [pc, #180]	; (b5f68 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5eb4:	4293      	cmp	r3, r2
   b5eb6:	bf3c      	itt	cc
   b5eb8:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5ebc:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5ec0:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5ec2:	bf3c      	itt	cc
   b5ec4:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5ec8:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5ecc:	2d01      	cmp	r5, #1
   b5ece:	d007      	beq.n	b5ee0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5ed0:	2d02      	cmp	r5, #2
   b5ed2:	d02e      	beq.n	b5f32 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5ed4:	b94d      	cbnz	r5, b5eea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5ed6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5eda:	ea2c 0101 	bic.w	r1, ip, r1
   b5ede:	e003      	b.n	b5ee8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5ee0:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5ee4:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5ee8:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5eea:	4293      	cmp	r3, r2
   b5eec:	d338      	bcc.n	b5f60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5eee:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5ef2:	440c      	add	r4, r1
        h -= mod;
   b5ef4:	1a9a      	subs	r2, r3, r2
   b5ef6:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5ef8:	2a07      	cmp	r2, #7
   b5efa:	d90e      	bls.n	b5f1a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5efc:	2d02      	cmp	r5, #2
   b5efe:	d11d      	bne.n	b5f3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5f00:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b5f02:	7821      	ldrb	r1, [r4, #0]
   b5f04:	43c9      	mvns	r1, r1
   b5f06:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5f08:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5f0a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b5f0e:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5f10:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5f12:	440c      	add	r4, r1
            } while(h >= 8);
   b5f14:	d8f5      	bhi.n	b5f02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5f16:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5f1a:	b30a      	cbz	r2, b5f60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5f1c:	4b13      	ldr	r3, [pc, #76]	; (b5f6c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b5f1e:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5f20:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b5f22:	d01a      	beq.n	b5f5a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5f24:	2d02      	cmp	r5, #2
   b5f26:	d01c      	beq.n	b5f62 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5f28:	b9d5      	cbnz	r5, b5f60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b5f2a:	7822      	ldrb	r2, [r4, #0]
   b5f2c:	ea22 0303 	bic.w	r3, r2, r3
   b5f30:	e015      	b.n	b5f5e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b5f32:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5f36:	ea81 010c 	eor.w	r1, r1, ip
   b5f3a:	e7d5      	b.n	b5ee8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5f3c:	1e29      	subs	r1, r5, #0
   b5f3e:	bf18      	it	ne
   b5f40:	2101      	movne	r1, #1
   b5f42:	4249      	negs	r1, r1
   b5f44:	b2c9      	uxtb	r1, r1
   b5f46:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b5f48:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b5f4a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5f4c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b5f50:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5f52:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5f54:	4434      	add	r4, r6
            } while(h >= 8);
   b5f56:	d8f7      	bhi.n	b5f48 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5f58:	e7dd      	b.n	b5f16 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b5f5a:	7822      	ldrb	r2, [r4, #0]
   b5f5c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b5f5e:	7023      	strb	r3, [r4, #0]
}
   b5f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5f62:	7822      	ldrb	r2, [r4, #0]
   b5f64:	4053      	eors	r3, r2
   b5f66:	e7fa      	b.n	b5f5e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5f68:	000b9804 	.word	0x000b9804
   b5f6c:	000b980c 	.word	0x000b980c

000b5f70 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5f70:	b470      	push	{r4, r5, r6}
   b5f72:	4614      	mov	r4, r2
  switch(rotation) {
   b5f74:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5f76:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b5f7a:	2a02      	cmp	r2, #2
   b5f7c:	d00d      	beq.n	b5f9a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b5f7e:	2a03      	cmp	r2, #3
   b5f80:	d018      	beq.n	b5fb4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5f82:	2a01      	cmp	r2, #1
   b5f84:	d111      	bne.n	b5faa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5f86:	8902      	ldrh	r2, [r0, #8]
   b5f88:	43e4      	mvns	r4, r4
   b5f8a:	4414      	add	r4, r2
   b5f8c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5f8e:	9603      	str	r6, [sp, #12]
   b5f90:	460a      	mov	r2, r1
   b5f92:	4621      	mov	r1, r4
}
   b5f94:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5f96:	f7ff bf67 	b.w	b5e68 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b5f9a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5f9c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b5f9e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5fa0:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5fa2:	4414      	add	r4, r2
    x -= (w-1);
   b5fa4:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5fa6:	b224      	sxth	r4, r4
    x -= (w-1);
   b5fa8:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b5faa:	9603      	str	r6, [sp, #12]
   b5fac:	4622      	mov	r2, r4
}
   b5fae:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5fb0:	f7ff bf16 	b.w	b5de0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5fb4:	8945      	ldrh	r5, [r0, #10]
   b5fb6:	4419      	add	r1, r3
   b5fb8:	1a69      	subs	r1, r5, r1
   b5fba:	b209      	sxth	r1, r1
    break;
   b5fbc:	e7e7      	b.n	b5f8e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5fbe <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5fbe:	b430      	push	{r4, r5}
   b5fc0:	4614      	mov	r4, r2
  switch(rotation) {
   b5fc2:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5fc4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5fc8:	2a02      	cmp	r2, #2
   b5fca:	d00d      	beq.n	b5fe8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5fcc:	2a03      	cmp	r2, #3
   b5fce:	d018      	beq.n	b6002 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5fd0:	2a01      	cmp	r2, #1
   b5fd2:	d111      	bne.n	b5ff8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5fd4:	18e2      	adds	r2, r4, r3
   b5fd6:	8904      	ldrh	r4, [r0, #8]
   b5fd8:	1aa4      	subs	r4, r4, r2
   b5fda:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5fdc:	9502      	str	r5, [sp, #8]
   b5fde:	460a      	mov	r2, r1
   b5fe0:	4621      	mov	r1, r4
}
   b5fe2:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5fe4:	f7ff befc 	b.w	b5de0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5fe8:	8902      	ldrh	r2, [r0, #8]
   b5fea:	43c9      	mvns	r1, r1
   b5fec:	4411      	add	r1, r2
    y -= (h-1);
   b5fee:	18e2      	adds	r2, r4, r3
   b5ff0:	8944      	ldrh	r4, [r0, #10]
   b5ff2:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5ff4:	b209      	sxth	r1, r1
    y -= (h-1);
   b5ff6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5ff8:	9502      	str	r5, [sp, #8]
   b5ffa:	4622      	mov	r2, r4
}
   b5ffc:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b5ffe:	f7ff bf33 	b.w	b5e68 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b6002:	8942      	ldrh	r2, [r0, #10]
   b6004:	43c9      	mvns	r1, r1
   b6006:	4411      	add	r1, r2
   b6008:	b209      	sxth	r1, r1
    break;
   b600a:	e7e7      	b.n	b5fdc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b600c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b600c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6010:	4604      	mov	r4, r0
  TRANSACTION_START
   b6012:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b6014:	2800      	cmp	r0, #0
   b6016:	d042      	beq.n	b609e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b6018:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b601a:	f001 f96f 	bl	b72fc <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b601e:	4947      	ldr	r1, [pc, #284]	; (b613c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b6020:	2205      	movs	r2, #5
   b6022:	4620      	mov	r0, r4
   b6024:	f7ff fd27 	bl	b5a76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6028:	8921      	ldrh	r1, [r4, #8]
   b602a:	3901      	subs	r1, #1
   b602c:	4620      	mov	r0, r4
   b602e:	b2c9      	uxtb	r1, r1
   b6030:	f7ff fcb2 	bl	b5998 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6034:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6038:	1dde      	adds	r6, r3, #7
   b603a:	bf48      	it	mi
   b603c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b6040:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6044:	8923      	ldrh	r3, [r4, #8]
   b6046:	10f6      	asrs	r6, r6, #3
   b6048:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b604c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b6050:	2800      	cmp	r0, #0
   b6052:	d03a      	beq.n	b60ca <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6054:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6058:	f001 f95e 	bl	b7318 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b605c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b605e:	6803      	ldr	r3, [r0, #0]
   b6060:	2140      	movs	r1, #64	; 0x40
   b6062:	689b      	ldr	r3, [r3, #8]
   b6064:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6066:	2701      	movs	r7, #1
    while(count--) {
   b6068:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b606a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b606c:	d024      	beq.n	b60b8 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b606e:	2f1f      	cmp	r7, #31
   b6070:	d90c      	bls.n	b608c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b6072:	f001 f958 	bl	b7326 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6076:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b607a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b607c:	f001 f94c 	bl	b7318 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b6080:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6082:	6803      	ldr	r3, [r0, #0]
   b6084:	2140      	movs	r1, #64	; 0x40
   b6086:	689b      	ldr	r3, [r3, #8]
   b6088:	4798      	blx	r3
        bytesOut = 1;
   b608a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b608c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b608e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6092:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6094:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6096:	689b      	ldr	r3, [r3, #8]
   b6098:	4798      	blx	r3
      bytesOut++;
   b609a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b609c:	e7e4      	b.n	b6068 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b609e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b60a0:	b118      	cbz	r0, b60aa <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b60a2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b60a6:	f001 fb5b 	bl	b7760 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b60aa:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b60ae:	2100      	movs	r1, #0
   b60b0:	b280      	uxth	r0, r0
   b60b2:	f002 fa1e 	bl	b84f2 <digitalWrite>
   b60b6:	e7b2      	b.n	b601e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b60b8:	f001 f935 	bl	b7326 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b60bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b60be:	b378      	cbz	r0, b6120 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b60c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b60c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b60c6:	f001 b919 	b.w	b72fc <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b60ca:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b60ce:	2101      	movs	r1, #1
   b60d0:	b280      	uxth	r0, r0
   b60d2:	f002 fa0e 	bl	b84f2 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b60d6:	42ae      	cmp	r6, r5
   b60d8:	d0f0      	beq.n	b60bc <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b60da:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b60dc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b60e0:	b118      	cbz	r0, b60ea <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b60e2:	4649      	mov	r1, r9
   b60e4:	f001 fbaa 	bl	b783c <_ZN8SPIClass8transferEh>
   b60e8:	e7f5      	b.n	b60d6 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b60ea:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b60ec:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b60f0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b60f4:	ea09 0108 	and.w	r1, r9, r8
   b60f8:	b280      	uxth	r0, r0
   b60fa:	f002 f9fa 	bl	b84f2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b60fe:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6102:	2101      	movs	r1, #1
   b6104:	b280      	uxth	r0, r0
   b6106:	f002 f9f4 	bl	b84f2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b610a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b610e:	2100      	movs	r1, #0
   b6110:	b280      	uxth	r0, r0
   b6112:	f002 f9ee 	bl	b84f2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6116:	3f01      	subs	r7, #1
   b6118:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b611c:	d1e8      	bne.n	b60f0 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b611e:	e7da      	b.n	b60d6 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b6120:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6124:	2101      	movs	r1, #1
   b6126:	b280      	uxth	r0, r0
   b6128:	f002 f9e3 	bl	b84f2 <digitalWrite>
   b612c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b612e:	b118      	cbz	r0, b6138 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b6130:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6134:	f001 bafa 	b.w	b772c <_ZN8SPIClass14endTransactionEv>
}
   b6138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b613c:	000b9830 	.word	0x000b9830

000b6140 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b6140:	2100      	movs	r1, #0
   b6142:	220a      	movs	r2, #10
   b6144:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6148:	4770      	bx	lr

000b614a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b614a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b614c:	b510      	push	{r4, lr}
   b614e:	4604      	mov	r4, r0
    this->pin = pin;
   b6150:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6152:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6154:	b288      	uxth	r0, r1
   b6156:	f002 f9e5 	bl	b8524 <digitalRead>
   b615a:	b108      	cbz	r0, b6160 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b615c:	2303      	movs	r3, #3
   b615e:	71a3      	strb	r3, [r4, #6]
   b6160:	f000 fd98 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6164:	6020      	str	r0, [r4, #0]
#endif
}
   b6166:	bd10      	pop	{r4, pc}

000b6168 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6168:	b538      	push	{r3, r4, r5, lr}
   b616a:	460c      	mov	r4, r1
   b616c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b616e:	4611      	mov	r1, r2
   b6170:	b2a0      	uxth	r0, r4
   b6172:	f002 f9ad 	bl	b84d0 <pinMode>
  
  this->attach(pin);
   b6176:	4621      	mov	r1, r4
   b6178:	4628      	mov	r0, r5
}
   b617a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b617e:	f7ff bfe4 	b.w	b614a <_ZN8Debounce6attachEi>

000b6182 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b6182:	b538      	push	{r3, r4, r5, lr}
   b6184:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b6186:	79c0      	ldrb	r0, [r0, #7]
   b6188:	f002 f9cc 	bl	b8524 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b618c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b618e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b6190:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b6194:	bf18      	it	ne
   b6196:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6198:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b619c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b619e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b61a0:	d00a      	beq.n	b61b8 <_ZN8Debounce6updateEv+0x36>
   b61a2:	f000 fd77 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b61a6:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b61a8:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b61aa:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b61ae:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b61b0:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b61b2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b61b6:	bd38      	pop	{r3, r4, r5, pc}
   b61b8:	f000 fd6c 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b61bc:	6823      	ldr	r3, [r4, #0]
   b61be:	1ac0      	subs	r0, r0, r3
   b61c0:	88a3      	ldrh	r3, [r4, #4]
   b61c2:	4298      	cmp	r0, r3
   b61c4:	d3f4      	bcc.n	b61b0 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b61c6:	79a3      	ldrb	r3, [r4, #6]
   b61c8:	f003 0301 	and.w	r3, r3, #1
   b61cc:	42ab      	cmp	r3, r5
   b61ce:	d0ef      	beq.n	b61b0 <_ZN8Debounce6updateEv+0x2e>
   b61d0:	f000 fd60 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b61d4:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b61d6:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b61d8:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b61dc:	f043 0308 	orr.w	r3, r3, #8
   b61e0:	e7e5      	b.n	b61ae <_ZN8Debounce6updateEv+0x2c>

000b61e2 <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b61e2:	7980      	ldrb	r0, [r0, #6]
   b61e4:	f000 0009 	and.w	r0, r0, #9
   b61e8:	f1a0 0308 	sub.w	r3, r0, #8
   b61ec:	4258      	negs	r0, r3
   b61ee:	4158      	adcs	r0, r3
   b61f0:	4770      	bx	lr

000b61f2 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b61f2:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b61f6:	b510      	push	{r4, lr}
   b61f8:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b61fa:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b61fc:	b113      	cbz	r3, b6204 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b61fe:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b6200:	f000 fd20 	bl	b6c44 <os_mutex_lock>
#endif
#endif
#endif
        }
   b6204:	4620      	mov	r0, r4
   b6206:	bd10      	pop	{r4, pc}

000b6208 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b6208:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b620a:	6803      	ldr	r3, [r0, #0]
   b620c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b6210:	4604      	mov	r4, r0
            if (mqtt->thread)
   b6212:	b112      	cbz	r2, b621a <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b6214:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b6216:	f000 fd1d 	bl	b6c54 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b621a:	4620      	mov	r0, r4
   b621c:	bd10      	pop	{r4, pc}

000b621e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b621e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6220:	461f      	mov	r7, r3
   b6222:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b6226:	4604      	mov	r4, r0
   b6228:	460d      	mov	r5, r1
   b622a:	4616      	mov	r6, r2
    if (thread) {
   b622c:	b12b      	cbz	r3, b623a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b622e:	2301      	movs	r3, #1
   b6230:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b6234:	3058      	adds	r0, #88	; 0x58
   b6236:	f000 fcf5 	bl	b6c24 <os_mutex_create>
    }
    this->callback = callback;
   b623a:	9b08      	ldr	r3, [sp, #32]
   b623c:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b623e:	2300      	movs	r3, #0
   b6240:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b6242:	b106      	cbz	r6, b6246 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b6244:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b6246:	b125      	cbz	r5, b6252 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b6248:	4629      	mov	r1, r5
   b624a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b624e:	f001 fb9e 	bl	b798e <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b6252:	9b06      	ldr	r3, [sp, #24]
   b6254:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b6256:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b6258:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b625a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b625e:	2bff      	cmp	r3, #255	; 0xff
   b6260:	bfb8      	it	lt
   b6262:	23ff      	movlt	r3, #255	; 0xff
   b6264:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b6268:	b108      	cbz	r0, b626e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b626a:	f7fd ff16 	bl	b409a <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b626e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b6272:	f7fd ff10 	bl	b4096 <_Znaj>
   b6276:	61e0      	str	r0, [r4, #28]
}
   b6278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b627c <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b627c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6280:	4604      	mov	r4, r0
            bool thread) {
   b6282:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b6284:	4617      	mov	r7, r2
   b6286:	4698      	mov	r8, r3
   b6288:	460e      	mov	r6, r1
            bool thread) {
   b628a:	f001 fec9 	bl	b8020 <_ZN9TCPClientC1Ev>
   b628e:	490d      	ldr	r1, [pc, #52]	; (b62c4 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b6290:	61e5      	str	r5, [r4, #28]
   b6292:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b6296:	f001 fb4c 	bl	b7932 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b629a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b629e:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b62a0:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b62a4:	22ff      	movs	r2, #255	; 0xff
   b62a6:	230f      	movs	r3, #15
   b62a8:	e9cd 3200 	strd	r3, r2, [sp]
   b62ac:	4620      	mov	r0, r4
            bool thread) {
   b62ae:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b62b2:	463b      	mov	r3, r7
   b62b4:	462a      	mov	r2, r5
   b62b6:	4631      	mov	r1, r6
   b62b8:	f7ff ffb1 	bl	b621e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b62bc:	4620      	mov	r0, r4
   b62be:	b004      	add	sp, #16
   b62c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b62c4:	000b8cd0 	.word	0x000b8cd0

000b62c8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b62c8:	b510      	push	{r4, lr}
   b62ca:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b62cc:	4620      	mov	r0, r4
   b62ce:	f001 fe03 	bl	b7ed8 <_ZN9TCPClient9availableEv>
   b62d2:	2800      	cmp	r0, #0
   b62d4:	d0fa      	beq.n	b62cc <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b62d6:	4620      	mov	r0, r4
   b62d8:	f001 fbe8 	bl	b7aac <_ZN9TCPClient4readEv>
}
   b62dc:	b2c0      	uxtb	r0, r0
   b62de:	bd10      	pop	{r4, pc}

000b62e0 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b62e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b62e4:	4605      	mov	r5, r0
   b62e6:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b62e8:	f7ff ffee 	bl	b62c8 <_ZN4MQTT8readByteEv>
   b62ec:	69eb      	ldr	r3, [r5, #28]
   b62ee:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b62f0:	69eb      	ldr	r3, [r5, #28]
   b62f2:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b62f6:	f04f 0901 	mov.w	r9, #1
   b62fa:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b62fe:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b6300:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b6302:	4628      	mov	r0, r5
   b6304:	f7ff ffe0 	bl	b62c8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b6308:	4626      	mov	r6, r4
   b630a:	69eb      	ldr	r3, [r5, #28]
   b630c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b630e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b6312:	fb13 f309 	smulbb	r3, r3, r9
   b6316:	441f      	add	r7, r3
        buffer[len++] = digit;
   b6318:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b631a:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b631c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b631e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b6320:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b6324:	d4ed      	bmi.n	b6302 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b6326:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b6328:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b632c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b6330:	d11e      	bne.n	b6370 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b6332:	4628      	mov	r0, r5
   b6334:	f7ff ffc8 	bl	b62c8 <_ZN4MQTT8readByteEv>
   b6338:	69eb      	ldr	r3, [r5, #28]
   b633a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b633c:	4628      	mov	r0, r5
   b633e:	f7ff ffc3 	bl	b62c8 <_ZN4MQTT8readByteEv>
   b6342:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b6344:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b6346:	b2b6      	uxth	r6, r6
   b6348:	69eb      	ldr	r3, [r5, #28]
   b634a:	b2a4      	uxth	r4, r4
   b634c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b634e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b6350:	b2b6      	uxth	r6, r6
   b6352:	42be      	cmp	r6, r7
   b6354:	d20e      	bcs.n	b6374 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b6356:	4628      	mov	r0, r5
   b6358:	f7ff ffb6 	bl	b62c8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b635c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b6360:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b6362:	bf84      	itt	hi
   b6364:	69eb      	ldrhi	r3, [r5, #28]
   b6366:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b6368:	3401      	adds	r4, #1
   b636a:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b636c:	3601      	adds	r6, #1
   b636e:	e7ef      	b.n	b6350 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b6370:	2600      	movs	r6, #0
   b6372:	e7ed      	b.n	b6350 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b6374:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b6378:	42a3      	cmp	r3, r4
   b637a:	bf2c      	ite	cs
   b637c:	4620      	movcs	r0, r4
   b637e:	2000      	movcc	r0, #0
   b6380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b6384 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6388:	4615      	mov	r5, r2
   b638a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b638c:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b638e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b6390:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b6392:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b6394:	a802      	add	r0, sp, #8
        digit = len % 128;
   b6396:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b639a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b639e:	f103 0401 	add.w	r4, r3, #1
   b63a2:	4403      	add	r3, r0
            digit |= 0x80;
   b63a4:	bf88      	it	hi
   b63a6:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b63aa:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b63ae:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b63b2:	b2e4      	uxtb	r4, r4
   b63b4:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b63b8:	d81e      	bhi.n	b63f8 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b63ba:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b63be:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b63c2:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b63c4:	4622      	mov	r2, r4
   b63c6:	a901      	add	r1, sp, #4
   b63c8:	4428      	add	r0, r5
    buf[4-llen] = header;
   b63ca:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b63ce:	f002 fa97 	bl	b8900 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b63d2:	1c72      	adds	r2, r6, #1
   b63d4:	4422      	add	r2, r4
   b63d6:	4641      	mov	r1, r8
   b63d8:	4638      	mov	r0, r7
   b63da:	f001 fb52 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
   b63de:	4605      	mov	r5, r0
   b63e0:	f000 fc58 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b63e4:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b63e6:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b63e8:	4432      	add	r2, r6
   b63ea:	b2a8      	uxth	r0, r5
}
   b63ec:	1a13      	subs	r3, r2, r0
   b63ee:	4258      	negs	r0, r3
   b63f0:	4158      	adcs	r0, r3
   b63f2:	b002      	add	sp, #8
   b63f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b63f8:	4623      	mov	r3, r4
   b63fa:	e7ca      	b.n	b6392 <_ZN4MQTT5writeEhPht+0xe>

000b63fc <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b63fc:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b63fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6400:	4605      	mov	r5, r0
    pos += 2;
   b6402:	b298      	uxth	r0, r3
   b6404:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b6406:	5cce      	ldrb	r6, [r1, r3]
   b6408:	b29c      	uxth	r4, r3
   b640a:	b156      	cbz	r6, b6422 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b640c:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b6410:	4584      	cmp	ip, r0
   b6412:	f103 0701 	add.w	r7, r3, #1
   b6416:	d904      	bls.n	b6422 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b6418:	1c44      	adds	r4, r0, #1
   b641a:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b641c:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b641e:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b6420:	e7f1      	b.n	b6406 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b6422:	b299      	uxth	r1, r3
   b6424:	1a41      	subs	r1, r0, r1
   b6426:	440a      	add	r2, r1
   b6428:	0a21      	lsrs	r1, r4, #8
   b642a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b642e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b6432:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6434 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b6434:	b538      	push	{r3, r4, r5, lr}
   b6436:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b6438:	f001 fc70 	bl	b7d1c <_ZN9TCPClient9connectedEv>
   b643c:	2800      	cmp	r0, #0
   b643e:	bf14      	ite	ne
   b6440:	2501      	movne	r5, #1
   b6442:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b6444:	d102      	bne.n	b644c <_ZN4MQTT11isConnectedEv+0x18>
   b6446:	4620      	mov	r0, r4
   b6448:	f001 fda0 	bl	b7f8c <_ZN9TCPClient4stopEv>
    return rc;
}
   b644c:	4628      	mov	r0, r5
   b644e:	bd38      	pop	{r3, r4, r5, pc}

000b6450 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b6450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6454:	b088      	sub	sp, #32
   b6456:	4604      	mov	r4, r0
   b6458:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b645c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6460:	4689      	mov	r9, r1
   b6462:	4617      	mov	r7, r2
   b6464:	461e      	mov	r6, r3
    if (!isConnected()) {
   b6466:	f7ff ffe5 	bl	b6434 <_ZN4MQTT11isConnectedEv>
   b646a:	4605      	mov	r5, r0
   b646c:	2800      	cmp	r0, #0
   b646e:	f040 80cd 	bne.w	b660c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b6472:	4621      	mov	r1, r4
   b6474:	a801      	add	r0, sp, #4
   b6476:	f7ff febc 	bl	b61f2 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b647a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b647c:	2900      	cmp	r1, #0
   b647e:	f040 8088 	bne.w	b6592 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b6482:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6486:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6488:	462b      	mov	r3, r5
   b648a:	4620      	mov	r0, r4
   b648c:	f001 fbc8 	bl	b7c20 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b6490:	2800      	cmp	r0, #0
   b6492:	d07a      	beq.n	b658a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b6494:	2301      	movs	r3, #1
   b6496:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b6498:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b649c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b649e:	2b04      	cmp	r3, #4
   b64a0:	4b5b      	ldr	r3, [pc, #364]	; (b6610 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b64a2:	f040 8081 	bne.w	b65a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b64a6:	6818      	ldr	r0, [r3, #0]
   b64a8:	8899      	ldrh	r1, [r3, #4]
   b64aa:	799b      	ldrb	r3, [r3, #6]
   b64ac:	f8ad 100c 	strh.w	r1, [sp, #12]
   b64b0:	f88d 300e 	strb.w	r3, [sp, #14]
   b64b4:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b64b6:	f8c2 0005 	str.w	r0, [r2, #5]
   b64ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b64be:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b64c2:	f8a2 1009 	strh.w	r1, [r2, #9]
   b64c6:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b64c8:	230c      	movs	r3, #12
            if (willTopic) {
   b64ca:	f1b8 0f00 	cmp.w	r8, #0
   b64ce:	f000 8081 	beq.w	b65d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b64d2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b64d6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b64da:	0140      	lsls	r0, r0, #5
   b64dc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b64e0:	f040 0006 	orr.w	r0, r0, #6
   b64e4:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b64e6:	f1ba 0f00 	cmp.w	sl, #0
   b64ea:	d101      	bne.n	b64f0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b64ec:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b64f0:	b11f      	cbz	r7, b64fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b64f2:	2e00      	cmp	r6, #0
   b64f4:	d170      	bne.n	b65d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b64f6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b64fa:	69e2      	ldr	r2, [r4, #28]
   b64fc:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b64fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b6500:	69e1      	ldr	r1, [r4, #28]
   b6502:	1c58      	adds	r0, r3, #1
   b6504:	1212      	asrs	r2, r2, #8
   b6506:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b6508:	1c9a      	adds	r2, r3, #2
   b650a:	69e1      	ldr	r1, [r4, #28]
   b650c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b650e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b6510:	3303      	adds	r3, #3
   b6512:	69e2      	ldr	r2, [r4, #28]
   b6514:	4649      	mov	r1, r9
   b6516:	4620      	mov	r0, r4
   b6518:	f7ff ff70 	bl	b63fc <_ZN4MQTT11writeStringEPKcPht>
   b651c:	4603      	mov	r3, r0
            if (willTopic) {
   b651e:	f1b8 0f00 	cmp.w	r8, #0
   b6522:	d00b      	beq.n	b653c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b6524:	69e2      	ldr	r2, [r4, #28]
   b6526:	4641      	mov	r1, r8
   b6528:	4620      	mov	r0, r4
   b652a:	f7ff ff67 	bl	b63fc <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b652e:	69e2      	ldr	r2, [r4, #28]
   b6530:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b6532:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b6534:	4620      	mov	r0, r4
   b6536:	f7ff ff61 	bl	b63fc <_ZN4MQTT11writeStringEPKcPht>
   b653a:	4603      	mov	r3, r0
            if(user != NULL) {
   b653c:	b167      	cbz	r7, b6558 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b653e:	69e2      	ldr	r2, [r4, #28]
   b6540:	4639      	mov	r1, r7
   b6542:	4620      	mov	r0, r4
   b6544:	f7ff ff5a 	bl	b63fc <_ZN4MQTT11writeStringEPKcPht>
   b6548:	4603      	mov	r3, r0
                if(pass != NULL) {
   b654a:	b12e      	cbz	r6, b6558 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b654c:	69e2      	ldr	r2, [r4, #28]
   b654e:	4631      	mov	r1, r6
   b6550:	4620      	mov	r0, r4
   b6552:	f7ff ff53 	bl	b63fc <_ZN4MQTT11writeStringEPKcPht>
   b6556:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b6558:	3b05      	subs	r3, #5
   b655a:	69e2      	ldr	r2, [r4, #28]
   b655c:	b29b      	uxth	r3, r3
   b655e:	2110      	movs	r1, #16
   b6560:	4620      	mov	r0, r4
   b6562:	f7ff ff0f 	bl	b6384 <_ZN4MQTT5writeEhPht>
   b6566:	f000 fb95 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b656a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b656e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b6572:	4620      	mov	r0, r4
   b6574:	f001 fcb0 	bl	b7ed8 <_ZN9TCPClient9availableEv>
   b6578:	bb88      	cbnz	r0, b65de <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b657a:	f000 fb8b 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b657e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6580:	1ac0      	subs	r0, r0, r3
   b6582:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6584:	4373      	muls	r3, r6
   b6586:	4298      	cmp	r0, r3
   b6588:	d9f3      	bls.n	b6572 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b658a:	4620      	mov	r0, r4
   b658c:	f001 fcfe 	bl	b7f8c <_ZN9TCPClient4stopEv>
   b6590:	e035      	b.n	b65fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b6592:	a802      	add	r0, sp, #8
   b6594:	f000 ff54 	bl	b7440 <_ZN9IPAddressC1EPKh>
   b6598:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b659c:	462b      	mov	r3, r5
   b659e:	a902      	add	r1, sp, #8
   b65a0:	4620      	mov	r0, r4
   b65a2:	f001 fc1d 	bl	b7de0 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b65a6:	e773      	b.n	b6490 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b65a8:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b65ac:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b65b0:	7bdb      	ldrb	r3, [r3, #15]
   b65b2:	f10d 0c08 	add.w	ip, sp, #8
   b65b6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b65ba:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b65be:	ab02      	add	r3, sp, #8
   b65c0:	cb03      	ldmia	r3!, {r0, r1}
   b65c2:	f8c2 0005 	str.w	r0, [r2, #5]
   b65c6:	f8c2 1009 	str.w	r1, [r2, #9]
   b65ca:	f89c 3000 	ldrb.w	r3, [ip]
   b65ce:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b65d0:	230e      	movs	r3, #14
   b65d2:	e77a      	b.n	b64ca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b65d4:	2002      	movs	r0, #2
   b65d6:	e786      	b.n	b64e6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b65d8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b65dc:	e78d      	b.n	b64fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b65de:	a902      	add	r1, sp, #8
   b65e0:	4620      	mov	r0, r4
   b65e2:	f7ff fe7d 	bl	b62e0 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b65e6:	2804      	cmp	r0, #4
   b65e8:	d1cf      	bne.n	b658a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b65ea:	69e3      	ldr	r3, [r4, #28]
   b65ec:	78de      	ldrb	r6, [r3, #3]
   b65ee:	2e00      	cmp	r6, #0
   b65f0:	d1cb      	bne.n	b658a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b65f2:	f000 fb4f 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b65f6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b65f8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b65fa:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b65fe:	a801      	add	r0, sp, #4
   b6600:	f7ff fe02 	bl	b6208 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6604:	4628      	mov	r0, r5
   b6606:	b008      	add	sp, #32
   b6608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b660c:	2500      	movs	r5, #0
   b660e:	e7f9      	b.n	b6604 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b6610:	000b9835 	.word	0x000b9835

000b6614 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b6614:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b6616:	2301      	movs	r3, #1
   b6618:	2204      	movs	r2, #4
   b661a:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b661e:	2300      	movs	r3, #0
   b6620:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6624:	e9cd 3300 	strd	r3, r3, [sp]
   b6628:	461a      	mov	r2, r3
   b662a:	f7ff ff11 	bl	b6450 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b662e:	b007      	add	sp, #28
   b6630:	f85d fb04 	ldr.w	pc, [sp], #4

000b6634 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6638:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b663c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b6640:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b6644:	4604      	mov	r4, r0
   b6646:	468b      	mov	fp, r1
   b6648:	4616      	mov	r6, r2
   b664a:	461f      	mov	r7, r3
    if (isConnected()) {
   b664c:	f7ff fef2 	bl	b6434 <_ZN4MQTT11isConnectedEv>
   b6650:	4682      	mov	sl, r0
   b6652:	2800      	cmp	r0, #0
   b6654:	d051      	beq.n	b66fa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b6656:	4621      	mov	r1, r4
   b6658:	a801      	add	r0, sp, #4
   b665a:	f7ff fdca 	bl	b61f2 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b665e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b6662:	69e0      	ldr	r0, [r4, #28]
   b6664:	2100      	movs	r1, #0
   b6666:	f002 f959 	bl	b891c <memset>
        length = writeString(topic, buffer, length);
   b666a:	2305      	movs	r3, #5
   b666c:	69e2      	ldr	r2, [r4, #28]
   b666e:	4659      	mov	r1, fp
   b6670:	4620      	mov	r0, r4
   b6672:	f7ff fec3 	bl	b63fc <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b6676:	1e6b      	subs	r3, r5, #1
   b6678:	2b01      	cmp	r3, #1
   b667a:	d815      	bhi.n	b66a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b667c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b667e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b6680:	3101      	adds	r1, #1
   b6682:	b289      	uxth	r1, r1
   b6684:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6686:	0a09      	lsrs	r1, r1, #8
   b6688:	5419      	strb	r1, [r3, r0]
   b668a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b668c:	69e3      	ldr	r3, [r4, #28]
   b668e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6690:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b6692:	3002      	adds	r0, #2
   b6694:	5499      	strb	r1, [r3, r2]
   b6696:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b6698:	f1b8 0f00 	cmp.w	r8, #0
   b669c:	d004      	beq.n	b66a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b669e:	8c23      	ldrh	r3, [r4, #32]
   b66a0:	1c5a      	adds	r2, r3, #1
   b66a2:	8422      	strh	r2, [r4, #32]
   b66a4:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b66a8:	2100      	movs	r1, #0
   b66aa:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b66ac:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b66ae:	69e2      	ldr	r2, [r4, #28]
   b66b0:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b66b2:	d90a      	bls.n	b66ca <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b66b4:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b66b8:	459c      	cmp	ip, r3
   b66ba:	d906      	bls.n	b66ca <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b66bc:	f816 c001 	ldrb.w	ip, [r6, r1]
   b66c0:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b66c4:	3101      	adds	r1, #1
   b66c6:	b289      	uxth	r1, r1
   b66c8:	e7ef      	b.n	b66aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b66ca:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b66ce:	2900      	cmp	r1, #0
   b66d0:	bf0c      	ite	eq
   b66d2:	2130      	moveq	r1, #48	; 0x30
   b66d4:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b66d6:	f1b9 0f00 	cmp.w	r9, #0
   b66da:	d001      	beq.n	b66e0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b66dc:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b66e0:	2d02      	cmp	r5, #2
   b66e2:	d10e      	bne.n	b6702 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b66e4:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b66e8:	3b05      	subs	r3, #5
   b66ea:	b29b      	uxth	r3, r3
   b66ec:	4620      	mov	r0, r4
   b66ee:	f7ff fe49 	bl	b6384 <_ZN4MQTT5writeEhPht>
   b66f2:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b66f4:	a801      	add	r0, sp, #4
   b66f6:	f7ff fd87 	bl	b6208 <_ZN4MQTT11MutexLockerD1Ev>
}
   b66fa:	4650      	mov	r0, sl
   b66fc:	b003      	add	sp, #12
   b66fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b6702:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b6704:	bf08      	it	eq
   b6706:	f041 0102 	orreq.w	r1, r1, #2
   b670a:	e7ed      	b.n	b66e8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b670c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b670c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b670e:	9c08      	ldr	r4, [sp, #32]
   b6710:	9403      	str	r4, [sp, #12]
   b6712:	2400      	movs	r4, #0
   b6714:	9402      	str	r4, [sp, #8]
   b6716:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b671a:	9401      	str	r4, [sp, #4]
   b671c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b6720:	9400      	str	r4, [sp, #0]
   b6722:	f7ff ff87 	bl	b6634 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b6726:	b004      	add	sp, #16
   b6728:	bd10      	pop	{r4, pc}

000b672a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b672a:	b530      	push	{r4, r5, lr}
   b672c:	b087      	sub	sp, #28
   b672e:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6730:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b6732:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6734:	9204      	str	r2, [sp, #16]
   b6736:	f002 f939 	bl	b89ac <strlen>
   b673a:	2500      	movs	r5, #0
   b673c:	4603      	mov	r3, r0
   b673e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b6742:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b6746:	9500      	str	r5, [sp, #0]
   b6748:	4620      	mov	r0, r4
   b674a:	f7ff ffdf 	bl	b670c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b674e:	b007      	add	sp, #28
   b6750:	bd30      	pop	{r4, r5, pc}

000b6752 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b6752:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6754:	4604      	mov	r4, r0
   b6756:	460e      	mov	r6, r1
    if (isConnected()) {
   b6758:	f7ff fe6c 	bl	b6434 <_ZN4MQTT11isConnectedEv>
   b675c:	4605      	mov	r5, r0
   b675e:	b1c8      	cbz	r0, b6794 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b6760:	4621      	mov	r1, r4
   b6762:	a801      	add	r0, sp, #4
   b6764:	f7ff fd45 	bl	b61f2 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b6768:	69e3      	ldr	r3, [r4, #28]
   b676a:	2262      	movs	r2, #98	; 0x62
   b676c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b676e:	69e3      	ldr	r3, [r4, #28]
   b6770:	2202      	movs	r2, #2
   b6772:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6774:	69e3      	ldr	r3, [r4, #28]
   b6776:	0a32      	lsrs	r2, r6, #8
   b6778:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b677a:	69e3      	ldr	r3, [r4, #28]
   b677c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b677e:	69e1      	ldr	r1, [r4, #28]
   b6780:	2204      	movs	r2, #4
   b6782:	4620      	mov	r0, r4
   b6784:	f001 f97d 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
   b6788:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b678a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b678c:	bf18      	it	ne
   b678e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6790:	f7ff fd3a 	bl	b6208 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6794:	4628      	mov	r0, r5
   b6796:	b002      	add	sp, #8
   b6798:	bd70      	pop	{r4, r5, r6, pc}

000b679a <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b679a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b679c:	4604      	mov	r4, r0
   b679e:	460e      	mov	r6, r1
    if (isConnected()) {
   b67a0:	f7ff fe48 	bl	b6434 <_ZN4MQTT11isConnectedEv>
   b67a4:	4605      	mov	r5, r0
   b67a6:	b1c8      	cbz	r0, b67dc <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b67a8:	4621      	mov	r1, r4
   b67aa:	a801      	add	r0, sp, #4
   b67ac:	f7ff fd21 	bl	b61f2 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b67b0:	69e3      	ldr	r3, [r4, #28]
   b67b2:	2272      	movs	r2, #114	; 0x72
   b67b4:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b67b6:	69e3      	ldr	r3, [r4, #28]
   b67b8:	2202      	movs	r2, #2
   b67ba:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b67bc:	69e3      	ldr	r3, [r4, #28]
   b67be:	0a32      	lsrs	r2, r6, #8
   b67c0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b67c2:	69e3      	ldr	r3, [r4, #28]
   b67c4:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b67c6:	69e1      	ldr	r1, [r4, #28]
   b67c8:	2204      	movs	r2, #4
   b67ca:	4620      	mov	r0, r4
   b67cc:	f001 f959 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
   b67d0:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b67d2:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b67d4:	bf18      	it	ne
   b67d6:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b67d8:	f7ff fd16 	bl	b6208 <_ZN4MQTT11MutexLockerD1Ev>
}
   b67dc:	4628      	mov	r0, r5
   b67de:	b002      	add	sp, #8
   b67e0:	bd70      	pop	{r4, r5, r6, pc}

000b67e2 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b67e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b67e6:	ed2d 8b02 	vpush	{d8}
   b67ea:	b087      	sub	sp, #28
   b67ec:	af00      	add	r7, sp, #0
   b67ee:	4604      	mov	r4, r0
    if (isConnected()) {
   b67f0:	f7ff fe20 	bl	b6434 <_ZN4MQTT11isConnectedEv>
   b67f4:	4681      	mov	r9, r0
   b67f6:	b1f8      	cbz	r0, b6838 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b67f8:	4621      	mov	r1, r4
   b67fa:	f107 0014 	add.w	r0, r7, #20
   b67fe:	f7ff fcf8 	bl	b61f2 <_ZN4MQTT11MutexLockerC1EPS_>
   b6802:	f000 fa47 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b6806:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6808:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b680c:	4353      	muls	r3, r2
   b680e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b6810:	1a82      	subs	r2, r0, r2
   b6812:	429a      	cmp	r2, r3
   b6814:	4606      	mov	r6, r0
   b6816:	d803      	bhi.n	b6820 <_ZN4MQTT4loopEv+0x3e>
   b6818:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b681a:	1a82      	subs	r2, r0, r2
   b681c:	4293      	cmp	r3, r2
   b681e:	d221      	bcs.n	b6864 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b6820:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b6824:	b17b      	cbz	r3, b6846 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b6826:	4620      	mov	r0, r4
   b6828:	f001 fbb0 	bl	b7f8c <_ZN9TCPClient4stopEv>
                return false;
   b682c:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b6830:	f107 0014 	add.w	r0, r7, #20
   b6834:	f7ff fce8 	bl	b6208 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6838:	4648      	mov	r0, r9
   b683a:	371c      	adds	r7, #28
   b683c:	46bd      	mov	sp, r7
   b683e:	ecbd 8b02 	vpop	{d8}
   b6842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b6846:	69e2      	ldr	r2, [r4, #28]
   b6848:	21c0      	movs	r1, #192	; 0xc0
   b684a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b684c:	69e2      	ldr	r2, [r4, #28]
   b684e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b6850:	69e1      	ldr	r1, [r4, #28]
   b6852:	2202      	movs	r2, #2
   b6854:	4620      	mov	r0, r4
   b6856:	f001 f914 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b685a:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b685e:	2301      	movs	r3, #1
   b6860:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b6864:	4620      	mov	r0, r4
   b6866:	f001 fb37 	bl	b7ed8 <_ZN9TCPClient9availableEv>
   b686a:	2800      	cmp	r0, #0
   b686c:	d0e0      	beq.n	b6830 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b686e:	f107 0113 	add.w	r1, r7, #19
   b6872:	4620      	mov	r0, r4
   b6874:	f7ff fd34 	bl	b62e0 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b6878:	4683      	mov	fp, r0
   b687a:	2800      	cmp	r0, #0
   b687c:	d0d8      	beq.n	b6830 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b687e:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b6880:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b6882:	7819      	ldrb	r1, [r3, #0]
   b6884:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b6888:	2a30      	cmp	r2, #48	; 0x30
   b688a:	d17f      	bne.n	b698c <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b688c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b6890:	f1ba 0f00 	cmp.w	sl, #0
   b6894:	d0cc      	beq.n	b6830 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6896:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b689a:	466a      	mov	r2, sp
   b689c:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b68a0:	eb03 020c 	add.w	r2, r3, ip
   b68a4:	7851      	ldrb	r1, [r2, #1]
   b68a6:	7895      	ldrb	r5, [r2, #2]
   b68a8:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b68ac:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b68ae:	f105 0208 	add.w	r2, r5, #8
   b68b2:	4669      	mov	r1, sp
   b68b4:	08d2      	lsrs	r2, r2, #3
   b68b6:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b68ba:	4695      	mov	sp, r2
   b68bc:	f10c 0203 	add.w	r2, ip, #3
   b68c0:	60fa      	str	r2, [r7, #12]
   b68c2:	eb03 0e02 	add.w	lr, r3, r2
   b68c6:	eb0d 0205 	add.w	r2, sp, r5
   b68ca:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b68cc:	f8c7 d008 	str.w	sp, [r7, #8]
   b68d0:	607a      	str	r2, [r7, #4]
   b68d2:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b68d6:	428a      	cmp	r2, r1
   b68d8:	d006      	beq.n	b68e8 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b68da:	460a      	mov	r2, r1
   b68dc:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b68e0:	f802 8b01 	strb.w	r8, [r2], #1
   b68e4:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b68e6:	e7f4      	b.n	b68d2 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b68e8:	2200      	movs	r2, #0
   b68ea:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b68ec:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b68f0:	68f9      	ldr	r1, [r7, #12]
   b68f2:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b68f6:	ebab 020c 	sub.w	r2, fp, ip
   b68fa:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b68fc:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b6900:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6904:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6906:	d125      	bne.n	b6954 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6908:	f813 e001 	ldrb.w	lr, [r3, r1]
   b690c:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b690e:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6910:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b6914:	f10c 0105 	add.w	r1, ip, #5
   b6918:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b691a:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b691c:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b6920:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b6922:	69e3      	ldr	r3, [r4, #28]
   b6924:	2240      	movs	r2, #64	; 0x40
   b6926:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b6928:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b692a:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b692e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b6932:	69e3      	ldr	r3, [r4, #28]
   b6934:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b6938:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b693a:	69e3      	ldr	r3, [r4, #28]
   b693c:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b6940:	69e1      	ldr	r1, [r4, #28]
   b6942:	2204      	movs	r2, #4
   b6944:	4620      	mov	r0, r4
   b6946:	f001 f89c 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b694a:	6266      	str	r6, [r4, #36]	; 0x24
   b694c:	ee18 3a10 	vmov	r3, s16
   b6950:	469d      	mov	sp, r3
   b6952:	e76d      	b.n	b6830 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b6954:	f1b8 0f04 	cmp.w	r8, #4
   b6958:	d115      	bne.n	b6986 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b695a:	f813 e001 	ldrb.w	lr, [r3, r1]
   b695e:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6960:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6962:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b6966:	f10c 0105 	add.w	r1, ip, #5
   b696a:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b696c:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b696e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6972:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b6974:	69e3      	ldr	r3, [r4, #28]
   b6976:	2250      	movs	r2, #80	; 0x50
   b6978:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b697a:	69e3      	ldr	r3, [r4, #28]
   b697c:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b697e:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b6982:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b6984:	e7d5      	b.n	b6932 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b6986:	4419      	add	r1, r3
   b6988:	47d0      	blx	sl
   b698a:	e7df      	b.n	b694c <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b698c:	2a50      	cmp	r2, #80	; 0x50
   b698e:	d108      	bne.n	b69a2 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b6990:	789a      	ldrb	r2, [r3, #2]
   b6992:	78d9      	ldrb	r1, [r3, #3]
   b6994:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b6998:	b289      	uxth	r1, r1
   b699a:	4620      	mov	r0, r4
   b699c:	f7ff fed9 	bl	b6752 <_ZN4MQTT14publishReleaseEt>
   b69a0:	e746      	b.n	b6830 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b69a2:	2a40      	cmp	r2, #64	; 0x40
   b69a4:	d112      	bne.n	b69cc <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b69a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b69a8:	2a00      	cmp	r2, #0
   b69aa:	f43f af41 	beq.w	b6830 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b69ae:	f1bb 0f04 	cmp.w	fp, #4
   b69b2:	f47f af3d 	bne.w	b6830 <_ZN4MQTT4loopEv+0x4e>
   b69b6:	f011 0f06 	tst.w	r1, #6
   b69ba:	f47f af39 	bne.w	b6830 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b69be:	7899      	ldrb	r1, [r3, #2]
   b69c0:	78d8      	ldrb	r0, [r3, #3]
   b69c2:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b69c6:	b280      	uxth	r0, r0
   b69c8:	4790      	blx	r2
   b69ca:	e731      	b.n	b6830 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b69cc:	2a60      	cmp	r2, #96	; 0x60
   b69ce:	d108      	bne.n	b69e2 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b69d0:	789a      	ldrb	r2, [r3, #2]
   b69d2:	78d9      	ldrb	r1, [r3, #3]
   b69d4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b69d8:	b289      	uxth	r1, r1
   b69da:	4620      	mov	r0, r4
   b69dc:	f7ff fedd 	bl	b679a <_ZN4MQTT15publishCompleteEt>
   b69e0:	e726      	b.n	b6830 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b69e2:	2a70      	cmp	r2, #112	; 0x70
   b69e4:	d0df      	beq.n	b69a6 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b69e6:	2a90      	cmp	r2, #144	; 0x90
   b69e8:	f43f af22 	beq.w	b6830 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b69ec:	2ac0      	cmp	r2, #192	; 0xc0
   b69ee:	d10a      	bne.n	b6a06 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b69f0:	22d0      	movs	r2, #208	; 0xd0
   b69f2:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b69f4:	69e3      	ldr	r3, [r4, #28]
   b69f6:	2200      	movs	r2, #0
   b69f8:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b69fa:	69e1      	ldr	r1, [r4, #28]
   b69fc:	2202      	movs	r2, #2
   b69fe:	4620      	mov	r0, r4
   b6a00:	f001 f83f 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
   b6a04:	e714      	b.n	b6830 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b6a06:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b6a08:	bf04      	itt	eq
   b6a0a:	2300      	moveq	r3, #0
   b6a0c:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b6a10:	e70e      	b.n	b6830 <_ZN4MQTT4loopEv+0x4e>

000b6a12 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b6a12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6a14:	4604      	mov	r4, r0
   b6a16:	460f      	mov	r7, r1
   b6a18:	4616      	mov	r6, r2
    if (isConnected()) {
   b6a1a:	f7ff fd0b 	bl	b6434 <_ZN4MQTT11isConnectedEv>
   b6a1e:	4605      	mov	r5, r0
   b6a20:	b310      	cbz	r0, b6a68 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b6a22:	4621      	mov	r1, r4
   b6a24:	a801      	add	r0, sp, #4
   b6a26:	f7ff fbe4 	bl	b61f2 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b6a2a:	8c23      	ldrh	r3, [r4, #32]
   b6a2c:	3301      	adds	r3, #1
   b6a2e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b6a30:	b1eb      	cbz	r3, b6a6e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b6a32:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b6a34:	8c23      	ldrh	r3, [r4, #32]
   b6a36:	69e2      	ldr	r2, [r4, #28]
   b6a38:	0a1b      	lsrs	r3, r3, #8
   b6a3a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b6a3c:	69e3      	ldr	r3, [r4, #28]
   b6a3e:	8c22      	ldrh	r2, [r4, #32]
   b6a40:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b6a42:	69e2      	ldr	r2, [r4, #28]
   b6a44:	2307      	movs	r3, #7
   b6a46:	4639      	mov	r1, r7
   b6a48:	4620      	mov	r0, r4
   b6a4a:	f7ff fcd7 	bl	b63fc <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b6a4e:	69e3      	ldr	r3, [r4, #28]
   b6a50:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b6a52:	3804      	subs	r0, #4
   b6a54:	b283      	uxth	r3, r0
   b6a56:	69e2      	ldr	r2, [r4, #28]
   b6a58:	2182      	movs	r1, #130	; 0x82
   b6a5a:	4620      	mov	r0, r4
   b6a5c:	f7ff fc92 	bl	b6384 <_ZN4MQTT5writeEhPht>
   b6a60:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b6a62:	a801      	add	r0, sp, #4
   b6a64:	f7ff fbd0 	bl	b6208 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6a68:	4628      	mov	r0, r5
   b6a6a:	b003      	add	sp, #12
   b6a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b6a6e:	2301      	movs	r3, #1
   b6a70:	e7df      	b.n	b6a32 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b6a72 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b6a72:	2200      	movs	r2, #0
   b6a74:	f7ff bfcd 	b.w	b6a12 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b6a78 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6a78:	b513      	push	{r0, r1, r4, lr}
   b6a7a:	4604      	mov	r4, r0
    }
   b6a7c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6a7e:	b159      	cbz	r1, b6a98 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6a80:	9101      	str	r1, [sp, #4]
   b6a82:	f001 ff93 	bl	b89ac <strlen>
   b6a86:	6823      	ldr	r3, [r4, #0]
   b6a88:	9901      	ldr	r1, [sp, #4]
   b6a8a:	68db      	ldr	r3, [r3, #12]
   b6a8c:	4602      	mov	r2, r0
   b6a8e:	4620      	mov	r0, r4
    }
   b6a90:	b002      	add	sp, #8
   b6a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6a96:	4718      	bx	r3
    }
   b6a98:	b002      	add	sp, #8
   b6a9a:	bd10      	pop	{r4, pc}

000b6a9c <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b6a9c:	f000 bba6 	b.w	b71ec <delay>

000b6aa0 <_Z11BlynkMillisv>:
   b6aa0:	f000 b8f8 	b.w	b6c94 <HAL_Timer_Get_Milli_Seconds>

000b6aa4 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b6aa4:	4770      	bx	lr

000b6aa6 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b6aa6:	4770      	bx	lr

000b6aa8 <BlynkNoOpCbk>:
{}
   b6aa8:	4770      	bx	lr
	...

000b6aac <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b6aac:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b6aae:	bf5a      	itte	pl
   b6ab0:	4b02      	ldrpl	r3, [pc, #8]	; (b6abc <GetReadHandler+0x10>)
   b6ab2:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6ab6:	2000      	movmi	r0, #0
#endif
}
   b6ab8:	4770      	bx	lr
   b6aba:	bf00      	nop
   b6abc:	000b9848 	.word	0x000b9848

000b6ac0 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b6ac0:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b6ac2:	bf5a      	itte	pl
   b6ac4:	4b02      	ldrpl	r3, [pc, #8]	; (b6ad0 <GetWriteHandler+0x10>)
   b6ac6:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6aca:	2000      	movmi	r0, #0
#endif
}
   b6acc:	4770      	bx	lr
   b6ace:	bf00      	nop
   b6ad0:	000b9a48 	.word	0x000b9a48

000b6ad4 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b6ad4:	b510      	push	{r4, lr}
   b6ad6:	4b06      	ldr	r3, [pc, #24]	; (b6af0 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b6ad8:	6003      	str	r3, [r0, #0]
   b6ada:	4604      	mov	r4, r0
	if (mutex) {
   b6adc:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b6ade:	b108      	cbz	r0, b6ae4 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b6ae0:	f000 f8a8 	bl	b6c34 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b6ae4:	4620      	mov	r0, r4
   b6ae6:	f7fe feb1 	bl	b584c <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b6aea:	4620      	mov	r0, r4
   b6aec:	bd10      	pop	{r4, pc}
   b6aee:	bf00      	nop
   b6af0:	000b9c50 	.word	0x000b9c50

000b6af4 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b6af4:	b510      	push	{r4, lr}
   b6af6:	4604      	mov	r4, r0
}
   b6af8:	f7ff ffec 	bl	b6ad4 <_ZN16OledWingAdafruitD1Ev>
   b6afc:	4620      	mov	r0, r4
   b6afe:	2170      	movs	r1, #112	; 0x70
   b6b00:	f7fd facd 	bl	b409e <_ZdlPvj>
   b6b04:	4620      	mov	r0, r4
   b6b06:	bd10      	pop	{r4, pc}

000b6b08 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b6b08:	b530      	push	{r4, r5, lr}
   b6b0a:	b085      	sub	sp, #20
   b6b0c:	4604      	mov	r4, r0
   b6b0e:	460d      	mov	r5, r1
   b6b10:	f001 fd70 	bl	b85f4 <_Z19__fetch_global_Wirev>
   b6b14:	4a10      	ldr	r2, [pc, #64]	; (b6b58 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b6b16:	4911      	ldr	r1, [pc, #68]	; (b6b5c <_ZN16OledWingAdafruitC1Ei+0x54>)
   b6b18:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6b20:	2180      	movs	r1, #128	; 0x80
   b6b22:	4603      	mov	r3, r0
   b6b24:	9200      	str	r2, [sp, #0]
   b6b26:	4620      	mov	r0, r4
   b6b28:	2220      	movs	r2, #32
   b6b2a:	f7fe ff07 	bl	b593c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6b2e:	4b0c      	ldr	r3, [pc, #48]	; (b6b60 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6b30:	6023      	str	r3, [r4, #0]
   b6b32:	2300      	movs	r3, #0
   b6b34:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6b38:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6b3c:	f7ff fb00 	bl	b6140 <_ZN8DebounceC1Ev>
   b6b40:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6b44:	f7ff fafc 	bl	b6140 <_ZN8DebounceC1Ev>
   b6b48:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6b4c:	f7ff faf8 	bl	b6140 <_ZN8DebounceC1Ev>
}
   b6b50:	4620      	mov	r0, r4
   b6b52:	b005      	add	sp, #20
   b6b54:	bd30      	pop	{r4, r5, pc}
   b6b56:	bf00      	nop
   b6b58:	00061a80 	.word	0x00061a80
   b6b5c:	000186a0 	.word	0x000186a0
   b6b60:	000b9c50 	.word	0x000b9c50

000b6b64 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b6b64:	b513      	push	{r0, r1, r4, lr}
   b6b66:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b6b68:	3050      	adds	r0, #80	; 0x50
   b6b6a:	f000 f85b 	bl	b6c24 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b6b6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6b70:	07d9      	lsls	r1, r3, #31
   b6b72:	d505      	bpl.n	b6b80 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b6b74:	2202      	movs	r2, #2
   b6b76:	2104      	movs	r1, #4
   b6b78:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6b7c:	f7ff faf4 	bl	b6168 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b6b80:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6b82:	079a      	lsls	r2, r3, #30
   b6b84:	d505      	bpl.n	b6b92 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b6b86:	2200      	movs	r2, #0
   b6b88:	2103      	movs	r1, #3
   b6b8a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6b8e:	f7ff faeb 	bl	b6168 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b6b92:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6b94:	075b      	lsls	r3, r3, #29
   b6b96:	d505      	bpl.n	b6ba4 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b6b98:	2202      	movs	r2, #2
   b6b9a:	4611      	mov	r1, r2
   b6b9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6ba0:	f7ff fae2 	bl	b6168 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b6ba4:	2301      	movs	r3, #1
   b6ba6:	9300      	str	r3, [sp, #0]
   b6ba8:	223c      	movs	r2, #60	; 0x3c
   b6baa:	2102      	movs	r1, #2
   b6bac:	4620      	mov	r0, r4
   b6bae:	f7fe ffcd 	bl	b5b4c <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b6bb2:	b002      	add	sp, #8
   b6bb4:	bd10      	pop	{r4, pc}

000b6bb6 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b6bb6:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b6bb8:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b6bba:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b6bbc:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b6bbe:	d502      	bpl.n	b6bc6 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b6bc0:	3058      	adds	r0, #88	; 0x58
   b6bc2:	f7ff fade 	bl	b6182 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b6bc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6bc8:	079a      	lsls	r2, r3, #30
   b6bca:	d503      	bpl.n	b6bd4 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b6bcc:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6bd0:	f7ff fad7 	bl	b6182 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b6bd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6bd6:	075b      	lsls	r3, r3, #29
   b6bd8:	d505      	bpl.n	b6be6 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b6bda:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b6bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b6be2:	f7ff bace 	b.w	b6182 <_ZN8Debounce6updateEv>
}
   b6be6:	bd10      	pop	{r4, pc}

000b6be8 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b6be8:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b6bea:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b6bec:	f013 0001 	ands.w	r0, r3, #1
   b6bf0:	d003      	beq.n	b6bfa <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b6bf2:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b6bf6:	f7ff baf4 	b.w	b61e2 <_ZN8Debounce4fellEv>
}
   b6bfa:	4770      	bx	lr

000b6bfc <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b6bfc:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   b6bfe:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b6c00:	f013 0002 	ands.w	r0, r3, #2
   b6c04:	d003      	beq.n	b6c0e <_ZN16OledWingAdafruit8pressedBEv+0x12>
   b6c06:	f102 0060 	add.w	r0, r2, #96	; 0x60
   b6c0a:	f7ff baea 	b.w	b61e2 <_ZN8Debounce4fellEv>
}
   b6c0e:	4770      	bx	lr

000b6c10 <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b6c10:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   b6c12:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b6c14:	f013 0004 	ands.w	r0, r3, #4
   b6c18:	d003      	beq.n	b6c22 <_ZN16OledWingAdafruit8pressedCEv+0x12>
   b6c1a:	f102 0068 	add.w	r0, r2, #104	; 0x68
   b6c1e:	f7ff bae0 	b.w	b61e2 <_ZN8Debounce4fellEv>
}
   b6c22:	4770      	bx	lr

000b6c24 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6c24:	b508      	push	{r3, lr}
   b6c26:	4b02      	ldr	r3, [pc, #8]	; (b6c30 <os_mutex_create+0xc>)
   b6c28:	681b      	ldr	r3, [r3, #0]
   b6c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c2c:	9301      	str	r3, [sp, #4]
   b6c2e:	bd08      	pop	{r3, pc}
   b6c30:	00030248 	.word	0x00030248

000b6c34 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6c34:	b508      	push	{r3, lr}
   b6c36:	4b02      	ldr	r3, [pc, #8]	; (b6c40 <os_mutex_destroy+0xc>)
   b6c38:	681b      	ldr	r3, [r3, #0]
   b6c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6c3c:	9301      	str	r3, [sp, #4]
   b6c3e:	bd08      	pop	{r3, pc}
   b6c40:	00030248 	.word	0x00030248

000b6c44 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6c44:	b508      	push	{r3, lr}
   b6c46:	4b02      	ldr	r3, [pc, #8]	; (b6c50 <os_mutex_lock+0xc>)
   b6c48:	681b      	ldr	r3, [r3, #0]
   b6c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6c4c:	9301      	str	r3, [sp, #4]
   b6c4e:	bd08      	pop	{r3, pc}
   b6c50:	00030248 	.word	0x00030248

000b6c54 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6c54:	b508      	push	{r3, lr}
   b6c56:	4b02      	ldr	r3, [pc, #8]	; (b6c60 <os_mutex_unlock+0xc>)
   b6c58:	681b      	ldr	r3, [r3, #0]
   b6c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c5c:	9301      	str	r3, [sp, #4]
   b6c5e:	bd08      	pop	{r3, pc}
   b6c60:	00030248 	.word	0x00030248

000b6c64 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6c64:	b508      	push	{r3, lr}
   b6c66:	4b02      	ldr	r3, [pc, #8]	; (b6c70 <os_mutex_recursive_create+0xc>)
   b6c68:	681b      	ldr	r3, [r3, #0]
   b6c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c6c:	9301      	str	r3, [sp, #4]
   b6c6e:	bd08      	pop	{r3, pc}
   b6c70:	00030248 	.word	0x00030248

000b6c74 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6c74:	b508      	push	{r3, lr}
   b6c76:	4b02      	ldr	r3, [pc, #8]	; (b6c80 <HAL_RNG_GetRandomNumber+0xc>)
   b6c78:	681b      	ldr	r3, [r3, #0]
   b6c7a:	685b      	ldr	r3, [r3, #4]
   b6c7c:	9301      	str	r3, [sp, #4]
   b6c7e:	bd08      	pop	{r3, pc}
   b6c80:	00030218 	.word	0x00030218

000b6c84 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6c84:	b508      	push	{r3, lr}
   b6c86:	4b02      	ldr	r3, [pc, #8]	; (b6c90 <HAL_Delay_Microseconds+0xc>)
   b6c88:	681b      	ldr	r3, [r3, #0]
   b6c8a:	68db      	ldr	r3, [r3, #12]
   b6c8c:	9301      	str	r3, [sp, #4]
   b6c8e:	bd08      	pop	{r3, pc}
   b6c90:	00030218 	.word	0x00030218

000b6c94 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6c94:	b508      	push	{r3, lr}
   b6c96:	4b02      	ldr	r3, [pc, #8]	; (b6ca0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6c98:	681b      	ldr	r3, [r3, #0]
   b6c9a:	695b      	ldr	r3, [r3, #20]
   b6c9c:	9301      	str	r3, [sp, #4]
   b6c9e:	bd08      	pop	{r3, pc}
   b6ca0:	00030218 	.word	0x00030218

000b6ca4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6ca4:	b508      	push	{r3, lr}
   b6ca6:	4b02      	ldr	r3, [pc, #8]	; (b6cb0 <HAL_Validate_Pin_Function+0xc>)
   b6ca8:	681b      	ldr	r3, [r3, #0]
   b6caa:	685b      	ldr	r3, [r3, #4]
   b6cac:	9301      	str	r3, [sp, #4]
   b6cae:	bd08      	pop	{r3, pc}
   b6cb0:	0003022c 	.word	0x0003022c

000b6cb4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6cb4:	b508      	push	{r3, lr}
   b6cb6:	4b02      	ldr	r3, [pc, #8]	; (b6cc0 <HAL_Pin_Mode+0xc>)
   b6cb8:	681b      	ldr	r3, [r3, #0]
   b6cba:	689b      	ldr	r3, [r3, #8]
   b6cbc:	9301      	str	r3, [sp, #4]
   b6cbe:	bd08      	pop	{r3, pc}
   b6cc0:	0003022c 	.word	0x0003022c

000b6cc4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6cc4:	b508      	push	{r3, lr}
   b6cc6:	4b02      	ldr	r3, [pc, #8]	; (b6cd0 <HAL_Get_Pin_Mode+0xc>)
   b6cc8:	681b      	ldr	r3, [r3, #0]
   b6cca:	68db      	ldr	r3, [r3, #12]
   b6ccc:	9301      	str	r3, [sp, #4]
   b6cce:	bd08      	pop	{r3, pc}
   b6cd0:	0003022c 	.word	0x0003022c

000b6cd4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6cd4:	b508      	push	{r3, lr}
   b6cd6:	4b02      	ldr	r3, [pc, #8]	; (b6ce0 <HAL_GPIO_Write+0xc>)
   b6cd8:	681b      	ldr	r3, [r3, #0]
   b6cda:	691b      	ldr	r3, [r3, #16]
   b6cdc:	9301      	str	r3, [sp, #4]
   b6cde:	bd08      	pop	{r3, pc}
   b6ce0:	0003022c 	.word	0x0003022c

000b6ce4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6ce4:	b508      	push	{r3, lr}
   b6ce6:	4b02      	ldr	r3, [pc, #8]	; (b6cf0 <HAL_GPIO_Read+0xc>)
   b6ce8:	681b      	ldr	r3, [r3, #0]
   b6cea:	695b      	ldr	r3, [r3, #20]
   b6cec:	9301      	str	r3, [sp, #4]
   b6cee:	bd08      	pop	{r3, pc}
   b6cf0:	0003022c 	.word	0x0003022c

000b6cf4 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b6cf4:	b508      	push	{r3, lr}
   b6cf6:	4b02      	ldr	r3, [pc, #8]	; (b6d00 <HAL_DAC_Write+0xc>)
   b6cf8:	681b      	ldr	r3, [r3, #0]
   b6cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6cfc:	9301      	str	r3, [sp, #4]
   b6cfe:	bd08      	pop	{r3, pc}
   b6d00:	0003022c 	.word	0x0003022c

000b6d04 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6d04:	b508      	push	{r3, lr}
   b6d06:	4b02      	ldr	r3, [pc, #8]	; (b6d10 <hal_adc_read+0xc>)
   b6d08:	681b      	ldr	r3, [r3, #0]
   b6d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6d0c:	9301      	str	r3, [sp, #4]
   b6d0e:	bd08      	pop	{r3, pc}
   b6d10:	0003022c 	.word	0x0003022c

000b6d14 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b6d14:	b508      	push	{r3, lr}
   b6d16:	4b02      	ldr	r3, [pc, #8]	; (b6d20 <hal_pwm_write_ext+0xc>)
   b6d18:	681b      	ldr	r3, [r3, #0]
   b6d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b6d1c:	9301      	str	r3, [sp, #4]
   b6d1e:	bd08      	pop	{r3, pc}
   b6d20:	0003022c 	.word	0x0003022c

000b6d24 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6d24:	b508      	push	{r3, lr}
   b6d26:	4b02      	ldr	r3, [pc, #8]	; (b6d30 <hal_i2c_set_speed+0xc>)
   b6d28:	681b      	ldr	r3, [r3, #0]
   b6d2a:	681b      	ldr	r3, [r3, #0]
   b6d2c:	9301      	str	r3, [sp, #4]
   b6d2e:	bd08      	pop	{r3, pc}
   b6d30:	00030228 	.word	0x00030228

000b6d34 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6d34:	b508      	push	{r3, lr}
   b6d36:	4b02      	ldr	r3, [pc, #8]	; (b6d40 <hal_i2c_begin+0xc>)
   b6d38:	681b      	ldr	r3, [r3, #0]
   b6d3a:	68db      	ldr	r3, [r3, #12]
   b6d3c:	9301      	str	r3, [sp, #4]
   b6d3e:	bd08      	pop	{r3, pc}
   b6d40:	00030228 	.word	0x00030228

000b6d44 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6d44:	b508      	push	{r3, lr}
   b6d46:	4b02      	ldr	r3, [pc, #8]	; (b6d50 <hal_i2c_begin_transmission+0xc>)
   b6d48:	681b      	ldr	r3, [r3, #0]
   b6d4a:	699b      	ldr	r3, [r3, #24]
   b6d4c:	9301      	str	r3, [sp, #4]
   b6d4e:	bd08      	pop	{r3, pc}
   b6d50:	00030228 	.word	0x00030228

000b6d54 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6d54:	b508      	push	{r3, lr}
   b6d56:	4b02      	ldr	r3, [pc, #8]	; (b6d60 <hal_i2c_end_transmission+0xc>)
   b6d58:	681b      	ldr	r3, [r3, #0]
   b6d5a:	69db      	ldr	r3, [r3, #28]
   b6d5c:	9301      	str	r3, [sp, #4]
   b6d5e:	bd08      	pop	{r3, pc}
   b6d60:	00030228 	.word	0x00030228

000b6d64 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6d64:	b508      	push	{r3, lr}
   b6d66:	4b02      	ldr	r3, [pc, #8]	; (b6d70 <hal_i2c_write+0xc>)
   b6d68:	681b      	ldr	r3, [r3, #0]
   b6d6a:	6a1b      	ldr	r3, [r3, #32]
   b6d6c:	9301      	str	r3, [sp, #4]
   b6d6e:	bd08      	pop	{r3, pc}
   b6d70:	00030228 	.word	0x00030228

000b6d74 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6d74:	b508      	push	{r3, lr}
   b6d76:	4b02      	ldr	r3, [pc, #8]	; (b6d80 <hal_i2c_available+0xc>)
   b6d78:	681b      	ldr	r3, [r3, #0]
   b6d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6d7c:	9301      	str	r3, [sp, #4]
   b6d7e:	bd08      	pop	{r3, pc}
   b6d80:	00030228 	.word	0x00030228

000b6d84 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6d84:	b508      	push	{r3, lr}
   b6d86:	4b02      	ldr	r3, [pc, #8]	; (b6d90 <hal_i2c_read+0xc>)
   b6d88:	681b      	ldr	r3, [r3, #0]
   b6d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6d8c:	9301      	str	r3, [sp, #4]
   b6d8e:	bd08      	pop	{r3, pc}
   b6d90:	00030228 	.word	0x00030228

000b6d94 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6d94:	b508      	push	{r3, lr}
   b6d96:	4b02      	ldr	r3, [pc, #8]	; (b6da0 <hal_i2c_peek+0xc>)
   b6d98:	681b      	ldr	r3, [r3, #0]
   b6d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d9c:	9301      	str	r3, [sp, #4]
   b6d9e:	bd08      	pop	{r3, pc}
   b6da0:	00030228 	.word	0x00030228

000b6da4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6da4:	b508      	push	{r3, lr}
   b6da6:	4b02      	ldr	r3, [pc, #8]	; (b6db0 <hal_i2c_flush+0xc>)
   b6da8:	681b      	ldr	r3, [r3, #0]
   b6daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6dac:	9301      	str	r3, [sp, #4]
   b6dae:	bd08      	pop	{r3, pc}
   b6db0:	00030228 	.word	0x00030228

000b6db4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6db4:	b508      	push	{r3, lr}
   b6db6:	4b02      	ldr	r3, [pc, #8]	; (b6dc0 <hal_i2c_is_enabled+0xc>)
   b6db8:	681b      	ldr	r3, [r3, #0]
   b6dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6dbc:	9301      	str	r3, [sp, #4]
   b6dbe:	bd08      	pop	{r3, pc}
   b6dc0:	00030228 	.word	0x00030228

000b6dc4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6dc4:	b508      	push	{r3, lr}
   b6dc6:	4b02      	ldr	r3, [pc, #8]	; (b6dd0 <hal_i2c_init+0xc>)
   b6dc8:	681b      	ldr	r3, [r3, #0]
   b6dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6dcc:	9301      	str	r3, [sp, #4]
   b6dce:	bd08      	pop	{r3, pc}
   b6dd0:	00030228 	.word	0x00030228

000b6dd4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6dd4:	b508      	push	{r3, lr}
   b6dd6:	4b02      	ldr	r3, [pc, #8]	; (b6de0 <if_index_to_name+0xc>)
   b6dd8:	681b      	ldr	r3, [r3, #0]
   b6dda:	695b      	ldr	r3, [r3, #20]
   b6ddc:	9301      	str	r3, [sp, #4]
   b6dde:	bd08      	pop	{r3, pc}
   b6de0:	0003026c 	.word	0x0003026c

000b6de4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6de4:	b508      	push	{r3, lr}
   b6de6:	4b02      	ldr	r3, [pc, #8]	; (b6df0 <inet_inet_ntop+0xc>)
   b6de8:	681b      	ldr	r3, [r3, #0]
   b6dea:	695b      	ldr	r3, [r3, #20]
   b6dec:	9301      	str	r3, [sp, #4]
   b6dee:	bd08      	pop	{r3, pc}
   b6df0:	00030264 	.word	0x00030264

000b6df4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6df4:	b508      	push	{r3, lr}
   b6df6:	4b02      	ldr	r3, [pc, #8]	; (b6e00 <inet_htonl+0xc>)
   b6df8:	681b      	ldr	r3, [r3, #0]
   b6dfa:	6a1b      	ldr	r3, [r3, #32]
   b6dfc:	9301      	str	r3, [sp, #4]
   b6dfe:	bd08      	pop	{r3, pc}
   b6e00:	00030264 	.word	0x00030264

000b6e04 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6e04:	b508      	push	{r3, lr}
   b6e06:	4b02      	ldr	r3, [pc, #8]	; (b6e10 <inet_htons+0xc>)
   b6e08:	681b      	ldr	r3, [r3, #0]
   b6e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e0c:	9301      	str	r3, [sp, #4]
   b6e0e:	bd08      	pop	{r3, pc}
   b6e10:	00030264 	.word	0x00030264

000b6e14 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6e14:	b508      	push	{r3, lr}
   b6e16:	4b02      	ldr	r3, [pc, #8]	; (b6e20 <netdb_freeaddrinfo+0xc>)
   b6e18:	681b      	ldr	r3, [r3, #0]
   b6e1a:	689b      	ldr	r3, [r3, #8]
   b6e1c:	9301      	str	r3, [sp, #4]
   b6e1e:	bd08      	pop	{r3, pc}
   b6e20:	00030268 	.word	0x00030268

000b6e24 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6e24:	b508      	push	{r3, lr}
   b6e26:	4b02      	ldr	r3, [pc, #8]	; (b6e30 <netdb_getaddrinfo+0xc>)
   b6e28:	681b      	ldr	r3, [r3, #0]
   b6e2a:	68db      	ldr	r3, [r3, #12]
   b6e2c:	9301      	str	r3, [sp, #4]
   b6e2e:	bd08      	pop	{r3, pc}
   b6e30:	00030268 	.word	0x00030268

000b6e34 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6e34:	b508      	push	{r3, lr}
   b6e36:	4b02      	ldr	r3, [pc, #8]	; (b6e40 <sock_setsockopt+0xc>)
   b6e38:	681b      	ldr	r3, [r3, #0]
   b6e3a:	699b      	ldr	r3, [r3, #24]
   b6e3c:	9301      	str	r3, [sp, #4]
   b6e3e:	bd08      	pop	{r3, pc}
   b6e40:	00030238 	.word	0x00030238

000b6e44 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6e44:	b508      	push	{r3, lr}
   b6e46:	4b02      	ldr	r3, [pc, #8]	; (b6e50 <sock_close+0xc>)
   b6e48:	681b      	ldr	r3, [r3, #0]
   b6e4a:	69db      	ldr	r3, [r3, #28]
   b6e4c:	9301      	str	r3, [sp, #4]
   b6e4e:	bd08      	pop	{r3, pc}
   b6e50:	00030238 	.word	0x00030238

000b6e54 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6e54:	b508      	push	{r3, lr}
   b6e56:	4b02      	ldr	r3, [pc, #8]	; (b6e60 <sock_connect+0xc>)
   b6e58:	681b      	ldr	r3, [r3, #0]
   b6e5a:	6a1b      	ldr	r3, [r3, #32]
   b6e5c:	9301      	str	r3, [sp, #4]
   b6e5e:	bd08      	pop	{r3, pc}
   b6e60:	00030238 	.word	0x00030238

000b6e64 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6e64:	b508      	push	{r3, lr}
   b6e66:	4b02      	ldr	r3, [pc, #8]	; (b6e70 <sock_recv+0xc>)
   b6e68:	681b      	ldr	r3, [r3, #0]
   b6e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e6c:	9301      	str	r3, [sp, #4]
   b6e6e:	bd08      	pop	{r3, pc}
   b6e70:	00030238 	.word	0x00030238

000b6e74 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6e74:	b508      	push	{r3, lr}
   b6e76:	4b02      	ldr	r3, [pc, #8]	; (b6e80 <sock_send+0xc>)
   b6e78:	681b      	ldr	r3, [r3, #0]
   b6e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e7c:	9301      	str	r3, [sp, #4]
   b6e7e:	bd08      	pop	{r3, pc}
   b6e80:	00030238 	.word	0x00030238

000b6e84 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6e84:	b508      	push	{r3, lr}
   b6e86:	4b02      	ldr	r3, [pc, #8]	; (b6e90 <sock_socket+0xc>)
   b6e88:	681b      	ldr	r3, [r3, #0]
   b6e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6e8c:	9301      	str	r3, [sp, #4]
   b6e8e:	bd08      	pop	{r3, pc}
   b6e90:	00030238 	.word	0x00030238

000b6e94 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6e94:	b508      	push	{r3, lr}
   b6e96:	4b02      	ldr	r3, [pc, #8]	; (b6ea0 <hal_spi_begin+0xc>)
   b6e98:	681b      	ldr	r3, [r3, #0]
   b6e9a:	681b      	ldr	r3, [r3, #0]
   b6e9c:	9301      	str	r3, [sp, #4]
   b6e9e:	bd08      	pop	{r3, pc}
   b6ea0:	00030230 	.word	0x00030230

000b6ea4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6ea4:	b508      	push	{r3, lr}
   b6ea6:	4b02      	ldr	r3, [pc, #8]	; (b6eb0 <hal_spi_transfer+0xc>)
   b6ea8:	681b      	ldr	r3, [r3, #0]
   b6eaa:	695b      	ldr	r3, [r3, #20]
   b6eac:	9301      	str	r3, [sp, #4]
   b6eae:	bd08      	pop	{r3, pc}
   b6eb0:	00030230 	.word	0x00030230

000b6eb4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6eb4:	b508      	push	{r3, lr}
   b6eb6:	4b02      	ldr	r3, [pc, #8]	; (b6ec0 <hal_spi_init+0xc>)
   b6eb8:	681b      	ldr	r3, [r3, #0]
   b6eba:	69db      	ldr	r3, [r3, #28]
   b6ebc:	9301      	str	r3, [sp, #4]
   b6ebe:	bd08      	pop	{r3, pc}
   b6ec0:	00030230 	.word	0x00030230

000b6ec4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6ec4:	b508      	push	{r3, lr}
   b6ec6:	4b02      	ldr	r3, [pc, #8]	; (b6ed0 <hal_spi_is_enabled+0xc>)
   b6ec8:	681b      	ldr	r3, [r3, #0]
   b6eca:	6a1b      	ldr	r3, [r3, #32]
   b6ecc:	9301      	str	r3, [sp, #4]
   b6ece:	bd08      	pop	{r3, pc}
   b6ed0:	00030230 	.word	0x00030230

000b6ed4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6ed4:	b508      	push	{r3, lr}
   b6ed6:	4b02      	ldr	r3, [pc, #8]	; (b6ee0 <hal_spi_info+0xc>)
   b6ed8:	681b      	ldr	r3, [r3, #0]
   b6eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6edc:	9301      	str	r3, [sp, #4]
   b6ede:	bd08      	pop	{r3, pc}
   b6ee0:	00030230 	.word	0x00030230

000b6ee4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6ee4:	b508      	push	{r3, lr}
   b6ee6:	4b02      	ldr	r3, [pc, #8]	; (b6ef0 <hal_spi_set_settings+0xc>)
   b6ee8:	681b      	ldr	r3, [r3, #0]
   b6eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6eec:	9301      	str	r3, [sp, #4]
   b6eee:	bd08      	pop	{r3, pc}
   b6ef0:	00030230 	.word	0x00030230

000b6ef4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6ef4:	b508      	push	{r3, lr}
   b6ef6:	4b02      	ldr	r3, [pc, #8]	; (b6f00 <hal_spi_acquire+0xc>)
   b6ef8:	681b      	ldr	r3, [r3, #0]
   b6efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6efc:	9301      	str	r3, [sp, #4]
   b6efe:	bd08      	pop	{r3, pc}
   b6f00:	00030230 	.word	0x00030230

000b6f04 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6f04:	b508      	push	{r3, lr}
   b6f06:	4b02      	ldr	r3, [pc, #8]	; (b6f10 <hal_spi_release+0xc>)
   b6f08:	681b      	ldr	r3, [r3, #0]
   b6f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f0c:	9301      	str	r3, [sp, #4]
   b6f0e:	bd08      	pop	{r3, pc}
   b6f10:	00030230 	.word	0x00030230

000b6f14 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6f14:	b508      	push	{r3, lr}
   b6f16:	4b02      	ldr	r3, [pc, #8]	; (b6f20 <hal_usart_write+0xc>)
   b6f18:	681b      	ldr	r3, [r3, #0]
   b6f1a:	68db      	ldr	r3, [r3, #12]
   b6f1c:	9301      	str	r3, [sp, #4]
   b6f1e:	bd08      	pop	{r3, pc}
   b6f20:	0003023c 	.word	0x0003023c

000b6f24 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6f24:	b508      	push	{r3, lr}
   b6f26:	4b02      	ldr	r3, [pc, #8]	; (b6f30 <hal_usart_available+0xc>)
   b6f28:	681b      	ldr	r3, [r3, #0]
   b6f2a:	691b      	ldr	r3, [r3, #16]
   b6f2c:	9301      	str	r3, [sp, #4]
   b6f2e:	bd08      	pop	{r3, pc}
   b6f30:	0003023c 	.word	0x0003023c

000b6f34 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6f34:	b508      	push	{r3, lr}
   b6f36:	4b02      	ldr	r3, [pc, #8]	; (b6f40 <hal_usart_read+0xc>)
   b6f38:	681b      	ldr	r3, [r3, #0]
   b6f3a:	695b      	ldr	r3, [r3, #20]
   b6f3c:	9301      	str	r3, [sp, #4]
   b6f3e:	bd08      	pop	{r3, pc}
   b6f40:	0003023c 	.word	0x0003023c

000b6f44 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6f44:	b508      	push	{r3, lr}
   b6f46:	4b02      	ldr	r3, [pc, #8]	; (b6f50 <hal_usart_peek+0xc>)
   b6f48:	681b      	ldr	r3, [r3, #0]
   b6f4a:	699b      	ldr	r3, [r3, #24]
   b6f4c:	9301      	str	r3, [sp, #4]
   b6f4e:	bd08      	pop	{r3, pc}
   b6f50:	0003023c 	.word	0x0003023c

000b6f54 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6f54:	b508      	push	{r3, lr}
   b6f56:	4b02      	ldr	r3, [pc, #8]	; (b6f60 <hal_usart_flush+0xc>)
   b6f58:	681b      	ldr	r3, [r3, #0]
   b6f5a:	69db      	ldr	r3, [r3, #28]
   b6f5c:	9301      	str	r3, [sp, #4]
   b6f5e:	bd08      	pop	{r3, pc}
   b6f60:	0003023c 	.word	0x0003023c

000b6f64 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6f64:	b508      	push	{r3, lr}
   b6f66:	4b02      	ldr	r3, [pc, #8]	; (b6f70 <hal_usart_is_enabled+0xc>)
   b6f68:	681b      	ldr	r3, [r3, #0]
   b6f6a:	6a1b      	ldr	r3, [r3, #32]
   b6f6c:	9301      	str	r3, [sp, #4]
   b6f6e:	bd08      	pop	{r3, pc}
   b6f70:	0003023c 	.word	0x0003023c

000b6f74 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6f74:	b508      	push	{r3, lr}
   b6f76:	4b02      	ldr	r3, [pc, #8]	; (b6f80 <hal_usart_available_data_for_write+0xc>)
   b6f78:	681b      	ldr	r3, [r3, #0]
   b6f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6f7c:	9301      	str	r3, [sp, #4]
   b6f7e:	bd08      	pop	{r3, pc}
   b6f80:	0003023c 	.word	0x0003023c

000b6f84 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6f84:	b508      	push	{r3, lr}
   b6f86:	4b02      	ldr	r3, [pc, #8]	; (b6f90 <hal_usart_init_ex+0xc>)
   b6f88:	681b      	ldr	r3, [r3, #0]
   b6f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f8c:	9301      	str	r3, [sp, #4]
   b6f8e:	bd08      	pop	{r3, pc}
   b6f90:	0003023c 	.word	0x0003023c

000b6f94 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6f94:	b508      	push	{r3, lr}
   b6f96:	4b02      	ldr	r3, [pc, #8]	; (b6fa0 <HAL_USB_USART_Init+0xc>)
   b6f98:	681b      	ldr	r3, [r3, #0]
   b6f9a:	681b      	ldr	r3, [r3, #0]
   b6f9c:	9301      	str	r3, [sp, #4]
   b6f9e:	bd08      	pop	{r3, pc}
   b6fa0:	0003024c 	.word	0x0003024c

000b6fa4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6fa4:	b508      	push	{r3, lr}
   b6fa6:	4b02      	ldr	r3, [pc, #8]	; (b6fb0 <HAL_USB_USART_Begin+0xc>)
   b6fa8:	681b      	ldr	r3, [r3, #0]
   b6faa:	685b      	ldr	r3, [r3, #4]
   b6fac:	9301      	str	r3, [sp, #4]
   b6fae:	bd08      	pop	{r3, pc}
   b6fb0:	0003024c 	.word	0x0003024c

000b6fb4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6fb4:	b508      	push	{r3, lr}
   b6fb6:	4b02      	ldr	r3, [pc, #8]	; (b6fc0 <HAL_USB_USART_Available_Data+0xc>)
   b6fb8:	681b      	ldr	r3, [r3, #0]
   b6fba:	691b      	ldr	r3, [r3, #16]
   b6fbc:	9301      	str	r3, [sp, #4]
   b6fbe:	bd08      	pop	{r3, pc}
   b6fc0:	0003024c 	.word	0x0003024c

000b6fc4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6fc4:	b508      	push	{r3, lr}
   b6fc6:	4b02      	ldr	r3, [pc, #8]	; (b6fd0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6fc8:	681b      	ldr	r3, [r3, #0]
   b6fca:	695b      	ldr	r3, [r3, #20]
   b6fcc:	9301      	str	r3, [sp, #4]
   b6fce:	bd08      	pop	{r3, pc}
   b6fd0:	0003024c 	.word	0x0003024c

000b6fd4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6fd4:	b508      	push	{r3, lr}
   b6fd6:	4b02      	ldr	r3, [pc, #8]	; (b6fe0 <HAL_USB_USART_Receive_Data+0xc>)
   b6fd8:	681b      	ldr	r3, [r3, #0]
   b6fda:	699b      	ldr	r3, [r3, #24]
   b6fdc:	9301      	str	r3, [sp, #4]
   b6fde:	bd08      	pop	{r3, pc}
   b6fe0:	0003024c 	.word	0x0003024c

000b6fe4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6fe4:	b508      	push	{r3, lr}
   b6fe6:	4b02      	ldr	r3, [pc, #8]	; (b6ff0 <HAL_USB_USART_Send_Data+0xc>)
   b6fe8:	681b      	ldr	r3, [r3, #0]
   b6fea:	69db      	ldr	r3, [r3, #28]
   b6fec:	9301      	str	r3, [sp, #4]
   b6fee:	bd08      	pop	{r3, pc}
   b6ff0:	0003024c 	.word	0x0003024c

000b6ff4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6ff4:	b508      	push	{r3, lr}
   b6ff6:	4b02      	ldr	r3, [pc, #8]	; (b7000 <HAL_USB_USART_Flush_Data+0xc>)
   b6ff8:	681b      	ldr	r3, [r3, #0]
   b6ffa:	6a1b      	ldr	r3, [r3, #32]
   b6ffc:	9301      	str	r3, [sp, #4]
   b6ffe:	bd08      	pop	{r3, pc}
   b7000:	0003024c 	.word	0x0003024c

000b7004 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7004:	b508      	push	{r3, lr}
   b7006:	4b02      	ldr	r3, [pc, #8]	; (b7010 <panic_+0xc>)
   b7008:	681b      	ldr	r3, [r3, #0]
   b700a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b700c:	9301      	str	r3, [sp, #4]
   b700e:	bd08      	pop	{r3, pc}
   b7010:	00030260 	.word	0x00030260

000b7014 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7014:	b508      	push	{r3, lr}
   b7016:	4b02      	ldr	r3, [pc, #8]	; (b7020 <log_message+0xc>)
   b7018:	681b      	ldr	r3, [r3, #0]
   b701a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b701c:	9301      	str	r3, [sp, #4]
   b701e:	bd08      	pop	{r3, pc}
   b7020:	00030260 	.word	0x00030260

000b7024 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7024:	b508      	push	{r3, lr}
   b7026:	4b02      	ldr	r3, [pc, #8]	; (b7030 <set_system_mode+0xc>)
   b7028:	681b      	ldr	r3, [r3, #0]
   b702a:	685b      	ldr	r3, [r3, #4]
   b702c:	9301      	str	r3, [sp, #4]
   b702e:	bd08      	pop	{r3, pc}
   b7030:	00030220 	.word	0x00030220

000b7034 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7034:	b508      	push	{r3, lr}
   b7036:	4b02      	ldr	r3, [pc, #8]	; (b7040 <system_delay_ms+0xc>)
   b7038:	681b      	ldr	r3, [r3, #0]
   b703a:	695b      	ldr	r3, [r3, #20]
   b703c:	9301      	str	r3, [sp, #4]
   b703e:	bd08      	pop	{r3, pc}
   b7040:	00030220 	.word	0x00030220

000b7044 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7044:	b508      	push	{r3, lr}
   b7046:	4b02      	ldr	r3, [pc, #8]	; (b7050 <system_thread_set_state+0xc>)
   b7048:	681b      	ldr	r3, [r3, #0]
   b704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b704c:	9301      	str	r3, [sp, #4]
   b704e:	bd08      	pop	{r3, pc}
   b7050:	00030220 	.word	0x00030220

000b7054 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7054:	b508      	push	{r3, lr}
   b7056:	4b03      	ldr	r3, [pc, #12]	; (b7064 <system_ctrl_set_app_request_handler+0x10>)
   b7058:	681b      	ldr	r3, [r3, #0]
   b705a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b705e:	9301      	str	r3, [sp, #4]
   b7060:	bd08      	pop	{r3, pc}
   b7062:	0000      	.short	0x0000
   b7064:	00030220 	.word	0x00030220

000b7068 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7068:	b508      	push	{r3, lr}
   b706a:	4b03      	ldr	r3, [pc, #12]	; (b7078 <system_ctrl_set_result+0x10>)
   b706c:	681b      	ldr	r3, [r3, #0]
   b706e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7072:	9301      	str	r3, [sp, #4]
   b7074:	bd08      	pop	{r3, pc}
   b7076:	0000      	.short	0x0000
   b7078:	00030220 	.word	0x00030220

000b707c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <spark_process+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	689b      	ldr	r3, [r3, #8]
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	00030244 	.word	0x00030244

000b708c <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <spark_deviceID+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	69db      	ldr	r3, [r3, #28]
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	00030244 	.word	0x00030244

000b709c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b02      	ldr	r3, [pc, #8]	; (b70a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b70a4:	9301      	str	r3, [sp, #4]
   b70a6:	bd08      	pop	{r3, pc}
   b70a8:	00030244 	.word	0x00030244

000b70ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b70ac:	b508      	push	{r3, lr}
   b70ae:	4b02      	ldr	r3, [pc, #8]	; (b70b8 <network_connect+0xc>)
   b70b0:	681b      	ldr	r3, [r3, #0]
   b70b2:	685b      	ldr	r3, [r3, #4]
   b70b4:	9301      	str	r3, [sp, #4]
   b70b6:	bd08      	pop	{r3, pc}
   b70b8:	00030240 	.word	0x00030240

000b70bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b70bc:	b508      	push	{r3, lr}
   b70be:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <network_connecting+0xc>)
   b70c0:	681b      	ldr	r3, [r3, #0]
   b70c2:	689b      	ldr	r3, [r3, #8]
   b70c4:	9301      	str	r3, [sp, #4]
   b70c6:	bd08      	pop	{r3, pc}
   b70c8:	00030240 	.word	0x00030240

000b70cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b70cc:	b508      	push	{r3, lr}
   b70ce:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <network_disconnect+0xc>)
   b70d0:	681b      	ldr	r3, [r3, #0]
   b70d2:	68db      	ldr	r3, [r3, #12]
   b70d4:	9301      	str	r3, [sp, #4]
   b70d6:	bd08      	pop	{r3, pc}
   b70d8:	00030240 	.word	0x00030240

000b70dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b70dc:	b508      	push	{r3, lr}
   b70de:	4b02      	ldr	r3, [pc, #8]	; (b70e8 <network_ready+0xc>)
   b70e0:	681b      	ldr	r3, [r3, #0]
   b70e2:	691b      	ldr	r3, [r3, #16]
   b70e4:	9301      	str	r3, [sp, #4]
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	00030240 	.word	0x00030240

000b70ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b70ec:	b508      	push	{r3, lr}
   b70ee:	4b02      	ldr	r3, [pc, #8]	; (b70f8 <network_on+0xc>)
   b70f0:	681b      	ldr	r3, [r3, #0]
   b70f2:	695b      	ldr	r3, [r3, #20]
   b70f4:	9301      	str	r3, [sp, #4]
   b70f6:	bd08      	pop	{r3, pc}
   b70f8:	00030240 	.word	0x00030240

000b70fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b70fc:	b508      	push	{r3, lr}
   b70fe:	4b02      	ldr	r3, [pc, #8]	; (b7108 <network_off+0xc>)
   b7100:	681b      	ldr	r3, [r3, #0]
   b7102:	699b      	ldr	r3, [r3, #24]
   b7104:	9301      	str	r3, [sp, #4]
   b7106:	bd08      	pop	{r3, pc}
   b7108:	00030240 	.word	0x00030240

000b710c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b710c:	b508      	push	{r3, lr}
   b710e:	4b02      	ldr	r3, [pc, #8]	; (b7118 <network_listen+0xc>)
   b7110:	681b      	ldr	r3, [r3, #0]
   b7112:	69db      	ldr	r3, [r3, #28]
   b7114:	9301      	str	r3, [sp, #4]
   b7116:	bd08      	pop	{r3, pc}
   b7118:	00030240 	.word	0x00030240

000b711c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b711c:	b508      	push	{r3, lr}
   b711e:	4b02      	ldr	r3, [pc, #8]	; (b7128 <network_listening+0xc>)
   b7120:	681b      	ldr	r3, [r3, #0]
   b7122:	6a1b      	ldr	r3, [r3, #32]
   b7124:	9301      	str	r3, [sp, #4]
   b7126:	bd08      	pop	{r3, pc}
   b7128:	00030240 	.word	0x00030240

000b712c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b712c:	b508      	push	{r3, lr}
   b712e:	4b02      	ldr	r3, [pc, #8]	; (b7138 <network_set_listen_timeout+0xc>)
   b7130:	681b      	ldr	r3, [r3, #0]
   b7132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7134:	9301      	str	r3, [sp, #4]
   b7136:	bd08      	pop	{r3, pc}
   b7138:	00030240 	.word	0x00030240

000b713c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b713c:	b508      	push	{r3, lr}
   b713e:	4b02      	ldr	r3, [pc, #8]	; (b7148 <network_get_listen_timeout+0xc>)
   b7140:	681b      	ldr	r3, [r3, #0]
   b7142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7144:	9301      	str	r3, [sp, #4]
   b7146:	bd08      	pop	{r3, pc}
   b7148:	00030240 	.word	0x00030240

000b714c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b714c:	b508      	push	{r3, lr}
   b714e:	4b02      	ldr	r3, [pc, #8]	; (b7158 <network_is_on+0xc>)
   b7150:	681b      	ldr	r3, [r3, #0]
   b7152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7154:	9301      	str	r3, [sp, #4]
   b7156:	bd08      	pop	{r3, pc}
   b7158:	00030240 	.word	0x00030240

000b715c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b715c:	b508      	push	{r3, lr}
   b715e:	4b02      	ldr	r3, [pc, #8]	; (b7168 <network_is_off+0xc>)
   b7160:	681b      	ldr	r3, [r3, #0]
   b7162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7164:	9301      	str	r3, [sp, #4]
   b7166:	bd08      	pop	{r3, pc}
   b7168:	00030240 	.word	0x00030240

000b716c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b716c:	b508      	push	{r3, lr}
   b716e:	4b02      	ldr	r3, [pc, #8]	; (b7178 <malloc+0xc>)
   b7170:	681b      	ldr	r3, [r3, #0]
   b7172:	681b      	ldr	r3, [r3, #0]
   b7174:	9301      	str	r3, [sp, #4]
   b7176:	bd08      	pop	{r3, pc}
   b7178:	0003021c 	.word	0x0003021c

000b717c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b717c:	b508      	push	{r3, lr}
   b717e:	4b02      	ldr	r3, [pc, #8]	; (b7188 <free+0xc>)
   b7180:	681b      	ldr	r3, [r3, #0]
   b7182:	685b      	ldr	r3, [r3, #4]
   b7184:	9301      	str	r3, [sp, #4]
   b7186:	bd08      	pop	{r3, pc}
   b7188:	0003021c 	.word	0x0003021c

000b718c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b718c:	b508      	push	{r3, lr}
   b718e:	4b02      	ldr	r3, [pc, #8]	; (b7198 <realloc+0xc>)
   b7190:	681b      	ldr	r3, [r3, #0]
   b7192:	689b      	ldr	r3, [r3, #8]
   b7194:	9301      	str	r3, [sp, #4]
   b7196:	bd08      	pop	{r3, pc}
   b7198:	0003021c 	.word	0x0003021c

000b719c <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b719c:	b508      	push	{r3, lr}
   b719e:	4b02      	ldr	r3, [pc, #8]	; (b71a8 <snprintf+0xc>)
   b71a0:	681b      	ldr	r3, [r3, #0]
   b71a2:	69db      	ldr	r3, [r3, #28]
   b71a4:	9301      	str	r3, [sp, #4]
   b71a6:	bd08      	pop	{r3, pc}
   b71a8:	0003021c 	.word	0x0003021c

000b71ac <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b71ac:	b508      	push	{r3, lr}
   b71ae:	4b02      	ldr	r3, [pc, #8]	; (b71b8 <vsnprintf+0xc>)
   b71b0:	681b      	ldr	r3, [r3, #0]
   b71b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b71b4:	9301      	str	r3, [sp, #4]
   b71b6:	bd08      	pop	{r3, pc}
   b71b8:	0003021c 	.word	0x0003021c

000b71bc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b71bc:	b508      	push	{r3, lr}
   b71be:	4b02      	ldr	r3, [pc, #8]	; (b71c8 <__errno+0xc>)
   b71c0:	681b      	ldr	r3, [r3, #0]
   b71c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b71c4:	9301      	str	r3, [sp, #4]
   b71c6:	bd08      	pop	{r3, pc}
   b71c8:	0003021c 	.word	0x0003021c

000b71cc <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b71cc:	b508      	push	{r3, lr}
   b71ce:	4b02      	ldr	r3, [pc, #8]	; (b71d8 <__assert_func+0xc>)
   b71d0:	681b      	ldr	r3, [r3, #0]
   b71d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71d4:	9301      	str	r3, [sp, #4]
   b71d6:	bd08      	pop	{r3, pc}
   b71d8:	0003021c 	.word	0x0003021c

000b71dc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b71dc:	b508      	push	{r3, lr}
   b71de:	4b02      	ldr	r3, [pc, #8]	; (b71e8 <newlib_impure_ptr_callback+0xc>)
   b71e0:	681b      	ldr	r3, [r3, #0]
   b71e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b71e4:	9301      	str	r3, [sp, #4]
   b71e6:	bd08      	pop	{r3, pc}
   b71e8:	0003021c 	.word	0x0003021c

000b71ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b71ec:	2100      	movs	r1, #0
   b71ee:	f7ff bf21 	b.w	b7034 <system_delay_ms>
	...

000b71f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b71f4:	4802      	ldr	r0, [pc, #8]	; (b7200 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b71f6:	2300      	movs	r3, #0
   b71f8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b71fa:	f7ff bd33 	b.w	b6c64 <os_mutex_recursive_create>
   b71fe:	bf00      	nop
   b7200:	2003e6c4 	.word	0x2003e6c4

000b7204 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7204:	2200      	movs	r2, #0
   b7206:	6840      	ldr	r0, [r0, #4]
   b7208:	4611      	mov	r1, r2
   b720a:	f7ff bf87 	b.w	b711c <network_listening>

000b720e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b720e:	2200      	movs	r2, #0
   b7210:	6840      	ldr	r0, [r0, #4]
   b7212:	4611      	mov	r1, r2
   b7214:	f7ff bf92 	b.w	b713c <network_get_listen_timeout>

000b7218 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7218:	6840      	ldr	r0, [r0, #4]
   b721a:	2200      	movs	r2, #0
   b721c:	f7ff bf86 	b.w	b712c <network_set_listen_timeout>

000b7220 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7220:	6840      	ldr	r0, [r0, #4]
   b7222:	2200      	movs	r2, #0
   b7224:	f081 0101 	eor.w	r1, r1, #1
   b7228:	f7ff bf70 	b.w	b710c <network_listen>

000b722c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b722c:	2300      	movs	r3, #0
   b722e:	6840      	ldr	r0, [r0, #4]
   b7230:	461a      	mov	r2, r3
   b7232:	4619      	mov	r1, r3
   b7234:	f7ff bf62 	b.w	b70fc <network_off>

000b7238 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7238:	2300      	movs	r3, #0
   b723a:	6840      	ldr	r0, [r0, #4]
   b723c:	461a      	mov	r2, r3
   b723e:	4619      	mov	r1, r3
   b7240:	f7ff bf54 	b.w	b70ec <network_on>

000b7244 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7244:	2200      	movs	r2, #0
   b7246:	6840      	ldr	r0, [r0, #4]
   b7248:	4611      	mov	r1, r2
   b724a:	f7ff bf47 	b.w	b70dc <network_ready>

000b724e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b724e:	2200      	movs	r2, #0
   b7250:	6840      	ldr	r0, [r0, #4]
   b7252:	4611      	mov	r1, r2
   b7254:	f7ff bf32 	b.w	b70bc <network_connecting>

000b7258 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7258:	6840      	ldr	r0, [r0, #4]
   b725a:	2200      	movs	r2, #0
   b725c:	2102      	movs	r1, #2
   b725e:	f7ff bf35 	b.w	b70cc <network_disconnect>

000b7262 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7262:	2300      	movs	r3, #0
   b7264:	6840      	ldr	r0, [r0, #4]
   b7266:	461a      	mov	r2, r3
   b7268:	f7ff bf20 	b.w	b70ac <network_connect>

000b726c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b726c:	4b02      	ldr	r3, [pc, #8]	; (b7278 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b726e:	2203      	movs	r2, #3
   b7270:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7272:	4a02      	ldr	r2, [pc, #8]	; (b727c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7274:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7276:	4770      	bx	lr
   b7278:	2003e6c8 	.word	0x2003e6c8
   b727c:	000b9cb0 	.word	0x000b9cb0

000b7280 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7280:	4770      	bx	lr

000b7282 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7284:	4606      	mov	r6, r0
   b7286:	4615      	mov	r5, r2
   b7288:	460c      	mov	r4, r1
   b728a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b728c:	42bc      	cmp	r4, r7
   b728e:	d006      	beq.n	b729e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7290:	6833      	ldr	r3, [r6, #0]
   b7292:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7296:	689b      	ldr	r3, [r3, #8]
   b7298:	4630      	mov	r0, r6
   b729a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b729c:	e7f6      	b.n	b728c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b729e:	4628      	mov	r0, r5
   b72a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b72a2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b72a2:	7c00      	ldrb	r0, [r0, #16]
   b72a4:	2200      	movs	r2, #0
   b72a6:	f7ff bd5d 	b.w	b6d64 <hal_i2c_write>

000b72aa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b72aa:	7c00      	ldrb	r0, [r0, #16]
   b72ac:	2100      	movs	r1, #0
   b72ae:	f7ff bd61 	b.w	b6d74 <hal_i2c_available>

000b72b2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b72b2:	7c00      	ldrb	r0, [r0, #16]
   b72b4:	2100      	movs	r1, #0
   b72b6:	f7ff bd65 	b.w	b6d84 <hal_i2c_read>

000b72ba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b72ba:	7c00      	ldrb	r0, [r0, #16]
   b72bc:	2100      	movs	r1, #0
   b72be:	f7ff bd69 	b.w	b6d94 <hal_i2c_peek>

000b72c2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b72c2:	7c00      	ldrb	r0, [r0, #16]
   b72c4:	2100      	movs	r1, #0
   b72c6:	f7ff bd6d 	b.w	b6da4 <hal_i2c_flush>

000b72ca <_ZN7TwoWireD0Ev>:
   b72ca:	b510      	push	{r4, lr}
   b72cc:	2114      	movs	r1, #20
   b72ce:	4604      	mov	r4, r0
   b72d0:	f7fc fee5 	bl	b409e <_ZdlPvj>
   b72d4:	4620      	mov	r0, r4
   b72d6:	bd10      	pop	{r4, pc}

000b72d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b72d8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b72da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b72de:	4604      	mov	r4, r0
   b72e0:	4608      	mov	r0, r1
   b72e2:	2100      	movs	r1, #0
   b72e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b72e8:	4b03      	ldr	r3, [pc, #12]	; (b72f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b72ea:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b72ec:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b72ee:	4611      	mov	r1, r2
   b72f0:	f7ff fd68 	bl	b6dc4 <hal_i2c_init>
}
   b72f4:	4620      	mov	r0, r4
   b72f6:	bd10      	pop	{r4, pc}
   b72f8:	000b9cec 	.word	0x000b9cec

000b72fc <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b72fc:	7c00      	ldrb	r0, [r0, #16]
   b72fe:	2200      	movs	r2, #0
   b7300:	f7ff bd10 	b.w	b6d24 <hal_i2c_set_speed>

000b7304 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7304:	2300      	movs	r3, #0
   b7306:	7c00      	ldrb	r0, [r0, #16]
   b7308:	461a      	mov	r2, r3
   b730a:	4619      	mov	r1, r3
   b730c:	f7ff bd12 	b.w	b6d34 <hal_i2c_begin>

000b7310 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7310:	7c00      	ldrb	r0, [r0, #16]
   b7312:	2200      	movs	r2, #0
   b7314:	f7ff bd16 	b.w	b6d44 <hal_i2c_begin_transmission>

000b7318 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7318:	b2c9      	uxtb	r1, r1
   b731a:	f7ff bff9 	b.w	b7310 <_ZN7TwoWire17beginTransmissionEh>

000b731e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b731e:	7c00      	ldrb	r0, [r0, #16]
   b7320:	2200      	movs	r2, #0
   b7322:	f7ff bd17 	b.w	b6d54 <hal_i2c_end_transmission>

000b7326 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7326:	2101      	movs	r1, #1
   b7328:	f7ff bff9 	b.w	b731e <_ZN7TwoWire15endTransmissionEh>

000b732c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b732c:	4770      	bx	lr

000b732e <_ZN9IPAddressD0Ev>:
   b732e:	b510      	push	{r4, lr}
   b7330:	2118      	movs	r1, #24
   b7332:	4604      	mov	r4, r0
   b7334:	f7fc feb3 	bl	b409e <_ZdlPvj>
   b7338:	4620      	mov	r0, r4
   b733a:	bd10      	pop	{r4, pc}

000b733c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b733c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b733e:	7d03      	ldrb	r3, [r0, #20]
   b7340:	2b06      	cmp	r3, #6
{
   b7342:	b08d      	sub	sp, #52	; 0x34
   b7344:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7346:	f100 0704 	add.w	r7, r0, #4
   b734a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b734e:	d012      	beq.n	b7376 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7350:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7354:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7358:	220a      	movs	r2, #10
   b735a:	4630      	mov	r0, r6
   b735c:	f000 f96d 	bl	b763a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7360:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7362:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7364:	d019      	beq.n	b739a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7366:	2c00      	cmp	r4, #0
   b7368:	d0f4      	beq.n	b7354 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b736a:	212e      	movs	r1, #46	; 0x2e
   b736c:	4630      	mov	r0, r6
   b736e:	f000 f94b 	bl	b7608 <_ZN5Print5printEc>
   b7372:	4404      	add	r4, r0
   b7374:	e7ee      	b.n	b7354 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7376:	232f      	movs	r3, #47	; 0x2f
   b7378:	466a      	mov	r2, sp
   b737a:	4639      	mov	r1, r7
   b737c:	200a      	movs	r0, #10
		buf[0] = 0;
   b737e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7382:	f7ff fd2f 	bl	b6de4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7386:	4668      	mov	r0, sp
   b7388:	f001 fb10 	bl	b89ac <strlen>
   b738c:	6833      	ldr	r3, [r6, #0]
   b738e:	4602      	mov	r2, r0
   b7390:	68db      	ldr	r3, [r3, #12]
   b7392:	4669      	mov	r1, sp
   b7394:	4630      	mov	r0, r6
   b7396:	4798      	blx	r3
   b7398:	4604      	mov	r4, r0
    }
    return n;
}
   b739a:	4620      	mov	r0, r4
   b739c:	b00d      	add	sp, #52	; 0x34
   b739e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b73a0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b73a0:	b510      	push	{r4, lr}
   b73a2:	4b05      	ldr	r3, [pc, #20]	; (b73b8 <_ZN9IPAddressC1Ev+0x18>)
   b73a4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b73a6:	2211      	movs	r2, #17
   b73a8:	f840 3b04 	str.w	r3, [r0], #4
   b73ac:	2100      	movs	r1, #0
   b73ae:	f001 fab5 	bl	b891c <memset>
}
   b73b2:	4620      	mov	r0, r4
   b73b4:	bd10      	pop	{r4, pc}
   b73b6:	bf00      	nop
   b73b8:	000b9d14 	.word	0x000b9d14

000b73bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b73bc:	4603      	mov	r3, r0
   b73be:	4a07      	ldr	r2, [pc, #28]	; (b73dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b73c0:	b510      	push	{r4, lr}
   b73c2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b73c6:	f101 0210 	add.w	r2, r1, #16
   b73ca:	f851 4b04 	ldr.w	r4, [r1], #4
   b73ce:	f843 4b04 	str.w	r4, [r3], #4
   b73d2:	4291      	cmp	r1, r2
   b73d4:	d1f9      	bne.n	b73ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b73d6:	780a      	ldrb	r2, [r1, #0]
   b73d8:	701a      	strb	r2, [r3, #0]
}
   b73da:	bd10      	pop	{r4, pc}
   b73dc:	000b9d14 	.word	0x000b9d14

000b73e0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b73e0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b73e2:	2b04      	cmp	r3, #4
   b73e4:	d104      	bne.n	b73f0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b73e6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b73e8:	3800      	subs	r0, #0
   b73ea:	bf18      	it	ne
   b73ec:	2001      	movne	r0, #1
   b73ee:	4770      	bx	lr
    } else if (version() == 6) {
   b73f0:	2b06      	cmp	r3, #6
   b73f2:	d107      	bne.n	b7404 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b73f4:	6843      	ldr	r3, [r0, #4]
   b73f6:	b93b      	cbnz	r3, b7408 <_ZNK9IPAddresscvbEv+0x28>
   b73f8:	6883      	ldr	r3, [r0, #8]
   b73fa:	b92b      	cbnz	r3, b7408 <_ZNK9IPAddresscvbEv+0x28>
   b73fc:	68c3      	ldr	r3, [r0, #12]
   b73fe:	b91b      	cbnz	r3, b7408 <_ZNK9IPAddresscvbEv+0x28>
   b7400:	6900      	ldr	r0, [r0, #16]
   b7402:	e7f1      	b.n	b73e8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7404:	2000      	movs	r0, #0
   b7406:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7408:	2001      	movs	r0, #1
}
   b740a:	4770      	bx	lr

000b740c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b740c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b740e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7412:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7416:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b741a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b741e:	2304      	movs	r3, #4
   b7420:	6041      	str	r1, [r0, #4]
   b7422:	7503      	strb	r3, [r0, #20]
}
   b7424:	bd10      	pop	{r4, pc}
	...

000b7428 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b7428:	b513      	push	{r0, r1, r4, lr}
   b742a:	4c04      	ldr	r4, [pc, #16]	; (b743c <_ZN9IPAddressC1Ehhhh+0x14>)
   b742c:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b742e:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b7432:	9400      	str	r4, [sp, #0]
   b7434:	f7ff ffea 	bl	b740c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7438:	b002      	add	sp, #8
   b743a:	bd10      	pop	{r4, pc}
   b743c:	000b9d14 	.word	0x000b9d14

000b7440 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7440:	b507      	push	{r0, r1, r2, lr}
   b7442:	4b06      	ldr	r3, [pc, #24]	; (b745c <_ZN9IPAddressC1EPKh+0x1c>)
   b7444:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7446:	78cb      	ldrb	r3, [r1, #3]
   b7448:	9300      	str	r3, [sp, #0]
   b744a:	788b      	ldrb	r3, [r1, #2]
   b744c:	784a      	ldrb	r2, [r1, #1]
   b744e:	7809      	ldrb	r1, [r1, #0]
   b7450:	f7ff ffdc 	bl	b740c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7454:	b003      	add	sp, #12
   b7456:	f85d fb04 	ldr.w	pc, [sp], #4
   b745a:	bf00      	nop
   b745c:	000b9d14 	.word	0x000b9d14

000b7460 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7460:	4b01      	ldr	r3, [pc, #4]	; (b7468 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7462:	4a02      	ldr	r2, [pc, #8]	; (b746c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7464:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7466:	4770      	bx	lr
   b7468:	2003e6d0 	.word	0x2003e6d0
   b746c:	000b9d20 	.word	0x000b9d20

000b7470 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7470:	2300      	movs	r3, #0
   b7472:	6840      	ldr	r0, [r0, #4]
   b7474:	461a      	mov	r2, r3
   b7476:	f7ff be19 	b.w	b70ac <network_connect>

000b747a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b747a:	6840      	ldr	r0, [r0, #4]
   b747c:	2200      	movs	r2, #0
   b747e:	2102      	movs	r1, #2
   b7480:	f7ff be24 	b.w	b70cc <network_disconnect>

000b7484 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7484:	2200      	movs	r2, #0
   b7486:	6840      	ldr	r0, [r0, #4]
   b7488:	4611      	mov	r1, r2
   b748a:	f7ff be17 	b.w	b70bc <network_connecting>

000b748e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b748e:	2200      	movs	r2, #0
   b7490:	6840      	ldr	r0, [r0, #4]
   b7492:	4611      	mov	r1, r2
   b7494:	f7ff be22 	b.w	b70dc <network_ready>

000b7498 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7498:	2300      	movs	r3, #0
   b749a:	6840      	ldr	r0, [r0, #4]
   b749c:	461a      	mov	r2, r3
   b749e:	4619      	mov	r1, r3
   b74a0:	f7ff be24 	b.w	b70ec <network_on>

000b74a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b74a4:	2300      	movs	r3, #0
   b74a6:	6840      	ldr	r0, [r0, #4]
   b74a8:	461a      	mov	r2, r3
   b74aa:	4619      	mov	r1, r3
   b74ac:	f7ff be26 	b.w	b70fc <network_off>

000b74b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b74b0:	6840      	ldr	r0, [r0, #4]
   b74b2:	2100      	movs	r1, #0
   b74b4:	f7ff be4a 	b.w	b714c <network_is_on>

000b74b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b74b8:	6840      	ldr	r0, [r0, #4]
   b74ba:	2100      	movs	r1, #0
   b74bc:	f7ff be4e 	b.w	b715c <network_is_off>

000b74c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b74c0:	6840      	ldr	r0, [r0, #4]
   b74c2:	2200      	movs	r2, #0
   b74c4:	f081 0101 	eor.w	r1, r1, #1
   b74c8:	f7ff be20 	b.w	b710c <network_listen>

000b74cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b74cc:	6840      	ldr	r0, [r0, #4]
   b74ce:	2200      	movs	r2, #0
   b74d0:	f7ff be2c 	b.w	b712c <network_set_listen_timeout>

000b74d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b74d4:	2200      	movs	r2, #0
   b74d6:	6840      	ldr	r0, [r0, #4]
   b74d8:	4611      	mov	r1, r2
   b74da:	f7ff be2f 	b.w	b713c <network_get_listen_timeout>

000b74de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b74de:	2200      	movs	r2, #0
   b74e0:	6840      	ldr	r0, [r0, #4]
   b74e2:	4611      	mov	r1, r2
   b74e4:	f7ff be1a 	b.w	b711c <network_listening>

000b74e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b74e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b74ec:	b095      	sub	sp, #84	; 0x54
   b74ee:	4614      	mov	r4, r2
   b74f0:	460d      	mov	r5, r1
   b74f2:	4607      	mov	r7, r0
    IPAddress addr;
   b74f4:	f7ff ff54 	bl	b73a0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b74f8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b74fa:	221c      	movs	r2, #28
   b74fc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b74fe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7500:	f001 fa0c 	bl	b891c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7504:	2340      	movs	r3, #64	; 0x40
   b7506:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7508:	4620      	mov	r0, r4
   b750a:	466b      	mov	r3, sp
   b750c:	aa0c      	add	r2, sp, #48	; 0x30
   b750e:	2100      	movs	r1, #0
   b7510:	f7ff fc88 	bl	b6e24 <netdb_getaddrinfo>
    if (!r) {
   b7514:	4604      	mov	r4, r0
   b7516:	2800      	cmp	r0, #0
   b7518:	d14b      	bne.n	b75b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b751a:	4602      	mov	r2, r0
   b751c:	2101      	movs	r1, #1
   b751e:	6868      	ldr	r0, [r5, #4]
   b7520:	f7ff fddc 	bl	b70dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7524:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7526:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7528:	4622      	mov	r2, r4
   b752a:	6868      	ldr	r0, [r5, #4]
   b752c:	f7ff fdd6 	bl	b70dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7530:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7532:	4681      	mov	r9, r0
        bool ok = false;
   b7534:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7536:	2e00      	cmp	r6, #0
   b7538:	d03b      	beq.n	b75b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b753a:	2900      	cmp	r1, #0
   b753c:	d139      	bne.n	b75b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b753e:	6873      	ldr	r3, [r6, #4]
   b7540:	2b02      	cmp	r3, #2
   b7542:	d003      	beq.n	b754c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7544:	2b0a      	cmp	r3, #10
   b7546:	d011      	beq.n	b756c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7548:	69f6      	ldr	r6, [r6, #28]
   b754a:	e7f4      	b.n	b7536 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b754c:	f1b8 0f00 	cmp.w	r8, #0
   b7550:	d0fa      	beq.n	b7548 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7552:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7554:	a806      	add	r0, sp, #24
   b7556:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7558:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b755a:	f7ff ff71 	bl	b7440 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b755e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7560:	1d3c      	adds	r4, r7, #4
   b7562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7564:	682b      	ldr	r3, [r5, #0]
   b7566:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7568:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b756a:	e7ed      	b.n	b7548 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b756c:	f1b9 0f00 	cmp.w	r9, #0
   b7570:	d0ea      	beq.n	b7548 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7572:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7574:	2210      	movs	r2, #16
   b7576:	a801      	add	r0, sp, #4
   b7578:	f001 f9d0 	bl	b891c <memset>
                    a.v = 6;
   b757c:	2306      	movs	r3, #6
   b757e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7582:	ad01      	add	r5, sp, #4
   b7584:	f104 0308 	add.w	r3, r4, #8
   b7588:	3418      	adds	r4, #24
   b758a:	6818      	ldr	r0, [r3, #0]
   b758c:	6859      	ldr	r1, [r3, #4]
   b758e:	462a      	mov	r2, r5
   b7590:	c203      	stmia	r2!, {r0, r1}
   b7592:	3308      	adds	r3, #8
   b7594:	42a3      	cmp	r3, r4
   b7596:	4615      	mov	r5, r2
   b7598:	d1f7      	bne.n	b758a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b759a:	a901      	add	r1, sp, #4
   b759c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b759e:	ad07      	add	r5, sp, #28
   b75a0:	f7ff ff0c 	bl	b73bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b75a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b75a6:	1d3c      	adds	r4, r7, #4
   b75a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b75aa:	682b      	ldr	r3, [r5, #0]
   b75ac:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b75ae:	4649      	mov	r1, r9
   b75b0:	e7ca      	b.n	b7548 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b75b2:	9800      	ldr	r0, [sp, #0]
   b75b4:	f7ff fc2e 	bl	b6e14 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b75b8:	4638      	mov	r0, r7
   b75ba:	b015      	add	sp, #84	; 0x54
   b75bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b75c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b75c0:	4b02      	ldr	r3, [pc, #8]	; (b75cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b75c2:	4a03      	ldr	r2, [pc, #12]	; (b75d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b75c4:	601a      	str	r2, [r3, #0]
   b75c6:	2200      	movs	r2, #0
   b75c8:	605a      	str	r2, [r3, #4]

} // spark
   b75ca:	4770      	bx	lr
   b75cc:	2003e6d4 	.word	0x2003e6d4
   b75d0:	000b9d2c 	.word	0x000b9d2c

000b75d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b75d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75d6:	4606      	mov	r6, r0
   b75d8:	460d      	mov	r5, r1
  size_t n = 0;
   b75da:	188f      	adds	r7, r1, r2
   b75dc:	2400      	movs	r4, #0
  while (size--) {
   b75de:	42bd      	cmp	r5, r7
   b75e0:	d00c      	beq.n	b75fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b75e2:	6833      	ldr	r3, [r6, #0]
   b75e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b75e8:	689b      	ldr	r3, [r3, #8]
   b75ea:	4630      	mov	r0, r6
   b75ec:	4798      	blx	r3
     if (chunk>=0)
   b75ee:	1e03      	subs	r3, r0, #0
   b75f0:	db01      	blt.n	b75f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b75f2:	441c      	add	r4, r3
  while (size--) {
   b75f4:	e7f3      	b.n	b75de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b75f6:	2c00      	cmp	r4, #0
   b75f8:	bf08      	it	eq
   b75fa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b75fc:	4620      	mov	r0, r4
   b75fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7600 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7600:	b508      	push	{r3, lr}
  return write(str);
   b7602:	f7ff fa39 	bl	b6a78 <_ZN5Print5writeEPKc>
}
   b7606:	bd08      	pop	{r3, pc}

000b7608 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7608:	6803      	ldr	r3, [r0, #0]
   b760a:	689b      	ldr	r3, [r3, #8]
   b760c:	4718      	bx	r3

000b760e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b760e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7610:	210d      	movs	r1, #13
{
   b7612:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7614:	f7ff fff8 	bl	b7608 <_ZN5Print5printEc>
  n += print('\n');
   b7618:	210a      	movs	r1, #10
  size_t n = print('\r');
   b761a:	4604      	mov	r4, r0
  n += print('\n');
   b761c:	4628      	mov	r0, r5
   b761e:	f7ff fff3 	bl	b7608 <_ZN5Print5printEc>
  return n;
}
   b7622:	4420      	add	r0, r4
   b7624:	bd38      	pop	{r3, r4, r5, pc}

000b7626 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7626:	b538      	push	{r3, r4, r5, lr}
   b7628:	4605      	mov	r5, r0
  return write(str);
   b762a:	f7ff fa25 	bl	b6a78 <_ZN5Print5writeEPKc>
   b762e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7630:	4628      	mov	r0, r5
   b7632:	f7ff ffec 	bl	b760e <_ZN5Print7printlnEv>
  return n;
}
   b7636:	4420      	add	r0, r4
   b7638:	bd38      	pop	{r3, r4, r5, pc}

000b763a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b763a:	b530      	push	{r4, r5, lr}
   b763c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b763e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7640:	2a01      	cmp	r2, #1
  *str = '\0';
   b7642:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7646:	bf98      	it	ls
   b7648:	220a      	movls	r2, #10
   b764a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b764c:	460d      	mov	r5, r1
   b764e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7652:	fb01 5312 	mls	r3, r1, r2, r5
   b7656:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b765a:	2b09      	cmp	r3, #9
   b765c:	bf94      	ite	ls
   b765e:	3330      	addls	r3, #48	; 0x30
   b7660:	3337      	addhi	r3, #55	; 0x37
   b7662:	b2db      	uxtb	r3, r3
  } while(n);
   b7664:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7666:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b766a:	d9ef      	bls.n	b764c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b766c:	4621      	mov	r1, r4
   b766e:	f7ff fa03 	bl	b6a78 <_ZN5Print5writeEPKc>
}
   b7672:	b00b      	add	sp, #44	; 0x2c
   b7674:	bd30      	pop	{r4, r5, pc}

000b7676 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b767a:	b086      	sub	sp, #24
   b767c:	af00      	add	r7, sp, #0
   b767e:	4605      	mov	r5, r0
   b7680:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7682:	1d38      	adds	r0, r7, #4
   b7684:	2114      	movs	r1, #20
{
   b7686:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7688:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b768a:	f7ff fd8f 	bl	b71ac <vsnprintf>

    if (n<bufsize)
   b768e:	2813      	cmp	r0, #19
   b7690:	d80e      	bhi.n	b76b0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7692:	1d39      	adds	r1, r7, #4
   b7694:	4628      	mov	r0, r5
   b7696:	f7ff f9ef 	bl	b6a78 <_ZN5Print5writeEPKc>
   b769a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b769c:	b11e      	cbz	r6, b76a6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b769e:	4628      	mov	r0, r5
   b76a0:	f7ff ffb5 	bl	b760e <_ZN5Print7printlnEv>
   b76a4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b76a6:	4620      	mov	r0, r4
   b76a8:	3718      	adds	r7, #24
   b76aa:	46bd      	mov	sp, r7
   b76ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b76b0:	f100 0308 	add.w	r3, r0, #8
   b76b4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b76b8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b76ba:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b76be:	4622      	mov	r2, r4
   b76c0:	1c41      	adds	r1, r0, #1
   b76c2:	683b      	ldr	r3, [r7, #0]
   b76c4:	4668      	mov	r0, sp
   b76c6:	f7ff fd71 	bl	b71ac <vsnprintf>
  return write(str);
   b76ca:	4669      	mov	r1, sp
   b76cc:	4628      	mov	r0, r5
   b76ce:	f7ff f9d3 	bl	b6a78 <_ZN5Print5writeEPKc>
   b76d2:	4604      	mov	r4, r0
   b76d4:	46c5      	mov	sp, r8
   b76d6:	e7e1      	b.n	b769c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b76d8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b76d8:	4b01      	ldr	r3, [pc, #4]	; (b76e0 <_GLOBAL__sub_I_RGB+0x8>)
   b76da:	2200      	movs	r2, #0
   b76dc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b76de:	4770      	bx	lr
   b76e0:	2003e6dc 	.word	0x2003e6dc

000b76e4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b76e4:	2100      	movs	r1, #0
   b76e6:	f7ff bc0d 	b.w	b6f04 <hal_spi_release>

000b76ea <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b76ea:	2100      	movs	r1, #0
   b76ec:	f7ff bc02 	b.w	b6ef4 <hal_spi_acquire>

000b76f0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b76f0:	b510      	push	{r4, lr}
   b76f2:	4604      	mov	r4, r0
   b76f4:	4608      	mov	r0, r1
{
    _spi = spi;
   b76f6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b76f8:	f7ff fbdc 	bl	b6eb4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b76fc:	2300      	movs	r3, #0
   b76fe:	6063      	str	r3, [r4, #4]
}
   b7700:	4620      	mov	r0, r4
   b7702:	bd10      	pop	{r4, pc}

000b7704 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7704:	b513      	push	{r0, r1, r4, lr}
   b7706:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7708:	7800      	ldrb	r0, [r0, #0]
   b770a:	f7ff ffee 	bl	b76ea <_ZN8SPIClass4lockEv.isra.0>
   b770e:	b958      	cbnz	r0, b7728 <_ZN8SPIClass5beginEv+0x24>
   b7710:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7712:	9001      	str	r0, [sp, #4]
   b7714:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7718:	f7ff fbbc 	bl	b6e94 <hal_spi_begin>
        unlock();
   b771c:	9801      	ldr	r0, [sp, #4]
    }
}
   b771e:	b002      	add	sp, #8
   b7720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7724:	f7ff bfde 	b.w	b76e4 <_ZN8SPIClass6unlockEv.isra.0>
   b7728:	b002      	add	sp, #8
   b772a:	bd10      	pop	{r4, pc}

000b772c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b772c:	7800      	ldrb	r0, [r0, #0]
   b772e:	f7ff bfd9 	b.w	b76e4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7734 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7734:	0840      	lsrs	r0, r0, #1
{
   b7736:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7738:	6018      	str	r0, [r3, #0]
   b773a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b773c:	6818      	ldr	r0, [r3, #0]
   b773e:	4288      	cmp	r0, r1
   b7740:	b2e5      	uxtb	r5, r4
   b7742:	d906      	bls.n	b7752 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7744:	3401      	adds	r4, #1
   b7746:	2c08      	cmp	r4, #8
   b7748:	d002      	beq.n	b7750 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b774a:	0840      	lsrs	r0, r0, #1
   b774c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b774e:	e7f5      	b.n	b773c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7750:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7752:	4b02      	ldr	r3, [pc, #8]	; (b775c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7754:	5d5b      	ldrb	r3, [r3, r5]
   b7756:	7013      	strb	r3, [r2, #0]
}
   b7758:	bd30      	pop	{r4, r5, pc}
   b775a:	bf00      	nop
   b775c:	000b9d60 	.word	0x000b9d60

000b7760 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7764:	4606      	mov	r6, r0
   b7766:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7768:	7800      	ldrb	r0, [r0, #0]
{
   b776a:	460c      	mov	r4, r1
    CHECK(lock());
   b776c:	f7ff ffbd 	bl	b76ea <_ZN8SPIClass4lockEv.isra.0>
   b7770:	2800      	cmp	r0, #0
   b7772:	db1b      	blt.n	b77ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7774:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7776:	2214      	movs	r2, #20
   b7778:	2100      	movs	r1, #0
   b777a:	a809      	add	r0, sp, #36	; 0x24
   b777c:	f001 f8ce 	bl	b891c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7780:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7782:	2200      	movs	r2, #0
   b7784:	a909      	add	r1, sp, #36	; 0x24
   b7786:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7788:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b778c:	f7ff fba2 	bl	b6ed4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7790:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7794:	b113      	cbz	r3, b779c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7796:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b779a:	b155      	cbz	r5, b77b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b779c:	2700      	movs	r7, #0
   b779e:	46b9      	mov	r9, r7
   b77a0:	46b8      	mov	r8, r7
   b77a2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b77a4:	7923      	ldrb	r3, [r4, #4]
   b77a6:	b15d      	cbz	r5, b77c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b77a8:	b1c3      	cbz	r3, b77dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b77aa:	2000      	movs	r0, #0
}
   b77ac:	b00f      	add	sp, #60	; 0x3c
   b77ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b77b2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b77b6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b77ba:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b77be:	e7f1      	b.n	b77a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b77c0:	2b00      	cmp	r3, #0
   b77c2:	d135      	bne.n	b7830 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b77c4:	68a3      	ldr	r3, [r4, #8]
   b77c6:	4543      	cmp	r3, r8
   b77c8:	d108      	bne.n	b77dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b77ca:	f88d 9020 	strb.w	r9, [sp, #32]
   b77ce:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b77d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b77d6:	89a3      	ldrh	r3, [r4, #12]
   b77d8:	429a      	cmp	r2, r3
   b77da:	d0e6      	beq.n	b77aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b77dc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b77de:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b77e0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b77e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b77e6:	ab04      	add	r3, sp, #16
   b77e8:	f10d 020f 	add.w	r2, sp, #15
   b77ec:	f7ff ffa2 	bl	b7734 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b77f0:	7921      	ldrb	r1, [r4, #4]
   b77f2:	b985      	cbnz	r5, b7816 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b77f4:	b989      	cbnz	r1, b781a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b77f6:	68a3      	ldr	r3, [r4, #8]
   b77f8:	4543      	cmp	r3, r8
   b77fa:	d30e      	bcc.n	b781a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b77fc:	f88d 9020 	strb.w	r9, [sp, #32]
   b7800:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7804:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7808:	89a3      	ldrh	r3, [r4, #12]
   b780a:	429a      	cmp	r2, r3
   b780c:	d105      	bne.n	b781a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b780e:	9b04      	ldr	r3, [sp, #16]
   b7810:	4543      	cmp	r3, r8
   b7812:	d102      	bne.n	b781a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7814:	e7c9      	b.n	b77aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7816:	2900      	cmp	r1, #0
   b7818:	d1f9      	bne.n	b780e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b781a:	2300      	movs	r3, #0
   b781c:	9301      	str	r3, [sp, #4]
   b781e:	7b63      	ldrb	r3, [r4, #13]
   b7820:	9300      	str	r3, [sp, #0]
   b7822:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7826:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7828:	7830      	ldrb	r0, [r6, #0]
   b782a:	f7ff fb5b 	bl	b6ee4 <hal_spi_set_settings>
   b782e:	e7bc      	b.n	b77aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7830:	e9cd 5500 	strd	r5, r5, [sp]
   b7834:	462b      	mov	r3, r5
   b7836:	462a      	mov	r2, r5
   b7838:	2101      	movs	r1, #1
   b783a:	e7f5      	b.n	b7828 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b783c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b783c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b783e:	7800      	ldrb	r0, [r0, #0]
   b7840:	f7ff fb30 	bl	b6ea4 <hal_spi_transfer>
}
   b7844:	b2c0      	uxtb	r0, r0
   b7846:	bd08      	pop	{r3, pc}

000b7848 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b7848:	b510      	push	{r4, lr}
   b784a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b784c:	f7ff fa22 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b7850:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b7852:	6823      	ldr	r3, [r4, #0]
   b7854:	4620      	mov	r0, r4
   b7856:	695b      	ldr	r3, [r3, #20]
   b7858:	4798      	blx	r3
    if (c >= 0) return c;
   b785a:	2800      	cmp	r0, #0
   b785c:	da08      	bge.n	b7870 <_ZN6Stream9timedReadEv+0x28>
   b785e:	f7ff fa19 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b7862:	68e3      	ldr	r3, [r4, #12]
   b7864:	1ac0      	subs	r0, r0, r3
   b7866:	68a3      	ldr	r3, [r4, #8]
   b7868:	4298      	cmp	r0, r3
   b786a:	d3f2      	bcc.n	b7852 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b786c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7870:	bd10      	pop	{r4, pc}

000b7872 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b7872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7876:	4607      	mov	r7, r0
   b7878:	460c      	mov	r4, r1
   b787a:	188e      	adds	r6, r1, r2
   b787c:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b787e:	42b5      	cmp	r5, r6
   b7880:	eba5 0804 	sub.w	r8, r5, r4
   b7884:	d007      	beq.n	b7896 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b7886:	4638      	mov	r0, r7
   b7888:	f7ff ffde 	bl	b7848 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b788c:	1e03      	subs	r3, r0, #0
   b788e:	db02      	blt.n	b7896 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b7890:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b7894:	e7f3      	b.n	b787e <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b7896:	4640      	mov	r0, r8
   b7898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b789c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b789c:	b510      	push	{r4, lr}
   b789e:	4604      	mov	r4, r0
{
	free(buffer);
   b78a0:	6800      	ldr	r0, [r0, #0]
   b78a2:	f7ff fc6b 	bl	b717c <free>
}
   b78a6:	4620      	mov	r0, r4
   b78a8:	bd10      	pop	{r4, pc}

000b78aa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b78aa:	b510      	push	{r4, lr}
   b78ac:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b78ae:	6800      	ldr	r0, [r0, #0]
   b78b0:	b108      	cbz	r0, b78b6 <_ZN6String10invalidateEv+0xc>
   b78b2:	f7ff fc63 	bl	b717c <free>
	buffer = NULL;
   b78b6:	2300      	movs	r3, #0
	capacity = len = 0;
   b78b8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b78bc:	6023      	str	r3, [r4, #0]
}
   b78be:	bd10      	pop	{r4, pc}

000b78c0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b78c0:	b538      	push	{r3, r4, r5, lr}
   b78c2:	4604      	mov	r4, r0
   b78c4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b78c6:	6800      	ldr	r0, [r0, #0]
   b78c8:	3101      	adds	r1, #1
   b78ca:	f7ff fc5f 	bl	b718c <realloc>
	if (newbuffer) {
   b78ce:	b110      	cbz	r0, b78d6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b78d0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b78d4:	2001      	movs	r0, #1
	}
	return 0;
}
   b78d6:	bd38      	pop	{r3, r4, r5, pc}

000b78d8 <_ZN6String7reserveEj>:
{
   b78d8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b78da:	6803      	ldr	r3, [r0, #0]
{
   b78dc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b78de:	b123      	cbz	r3, b78ea <_ZN6String7reserveEj+0x12>
   b78e0:	6843      	ldr	r3, [r0, #4]
   b78e2:	428b      	cmp	r3, r1
   b78e4:	d301      	bcc.n	b78ea <_ZN6String7reserveEj+0x12>
   b78e6:	2001      	movs	r0, #1
}
   b78e8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b78ea:	4620      	mov	r0, r4
   b78ec:	f7ff ffe8 	bl	b78c0 <_ZN6String12changeBufferEj>
   b78f0:	2800      	cmp	r0, #0
   b78f2:	d0f9      	beq.n	b78e8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b78f4:	68a3      	ldr	r3, [r4, #8]
   b78f6:	2b00      	cmp	r3, #0
   b78f8:	d1f5      	bne.n	b78e6 <_ZN6String7reserveEj+0xe>
   b78fa:	6822      	ldr	r2, [r4, #0]
   b78fc:	7013      	strb	r3, [r2, #0]
   b78fe:	e7f2      	b.n	b78e6 <_ZN6String7reserveEj+0xe>

000b7900 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7900:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7902:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7904:	4611      	mov	r1, r2
   b7906:	9201      	str	r2, [sp, #4]
{
   b7908:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b790a:	f7ff ffe5 	bl	b78d8 <_ZN6String7reserveEj>
   b790e:	9a01      	ldr	r2, [sp, #4]
   b7910:	b928      	cbnz	r0, b791e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7912:	4620      	mov	r0, r4
   b7914:	f7ff ffc9 	bl	b78aa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7918:	4620      	mov	r0, r4
   b791a:	b003      	add	sp, #12
   b791c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b791e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7920:	4629      	mov	r1, r5
   b7922:	6820      	ldr	r0, [r4, #0]
   b7924:	f000 ffec 	bl	b8900 <memcpy>
	buffer[len] = 0;
   b7928:	6822      	ldr	r2, [r4, #0]
   b792a:	68a3      	ldr	r3, [r4, #8]
   b792c:	2100      	movs	r1, #0
   b792e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7930:	e7f2      	b.n	b7918 <_ZN6String4copyEPKcj+0x18>

000b7932 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7932:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7934:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7936:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b793a:	4604      	mov	r4, r0
	len = 0;
   b793c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b793e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7940:	b141      	cbz	r1, b7954 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7942:	4608      	mov	r0, r1
   b7944:	9101      	str	r1, [sp, #4]
   b7946:	f001 f831 	bl	b89ac <strlen>
   b794a:	9901      	ldr	r1, [sp, #4]
   b794c:	4602      	mov	r2, r0
   b794e:	4620      	mov	r0, r4
   b7950:	f7ff ffd6 	bl	b7900 <_ZN6String4copyEPKcj>
}
   b7954:	4620      	mov	r0, r4
   b7956:	b002      	add	sp, #8
   b7958:	bd10      	pop	{r4, pc}

000b795a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b795a:	4288      	cmp	r0, r1
{
   b795c:	b510      	push	{r4, lr}
   b795e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7960:	d005      	beq.n	b796e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7962:	680b      	ldr	r3, [r1, #0]
   b7964:	b12b      	cbz	r3, b7972 <_ZN6StringaSERKS_+0x18>
   b7966:	688a      	ldr	r2, [r1, #8]
   b7968:	4619      	mov	r1, r3
   b796a:	f7ff ffc9 	bl	b7900 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b796e:	4620      	mov	r0, r4
   b7970:	bd10      	pop	{r4, pc}
	else invalidate();
   b7972:	f7ff ff9a 	bl	b78aa <_ZN6String10invalidateEv>
   b7976:	e7fa      	b.n	b796e <_ZN6StringaSERKS_+0x14>

000b7978 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7978:	b510      	push	{r4, lr}
	buffer = NULL;
   b797a:	2300      	movs	r3, #0
String::String(const String &value)
   b797c:	4604      	mov	r4, r0
	capacity = 0;
   b797e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7982:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7984:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7986:	f7ff ffe8 	bl	b795a <_ZN6StringaSERKS_>
}
   b798a:	4620      	mov	r0, r4
   b798c:	bd10      	pop	{r4, pc}

000b798e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b798e:	b513      	push	{r0, r1, r4, lr}
   b7990:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7992:	b159      	cbz	r1, b79ac <_ZN6StringaSEPKc+0x1e>
   b7994:	4608      	mov	r0, r1
   b7996:	9101      	str	r1, [sp, #4]
   b7998:	f001 f808 	bl	b89ac <strlen>
   b799c:	9901      	ldr	r1, [sp, #4]
   b799e:	4602      	mov	r2, r0
   b79a0:	4620      	mov	r0, r4
   b79a2:	f7ff ffad 	bl	b7900 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b79a6:	4620      	mov	r0, r4
   b79a8:	b002      	add	sp, #8
   b79aa:	bd10      	pop	{r4, pc}
	else invalidate();
   b79ac:	f7ff ff7d 	bl	b78aa <_ZN6String10invalidateEv>
   b79b0:	e7f9      	b.n	b79a6 <_ZN6StringaSEPKc+0x18>

000b79b2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b79b2:	b510      	push	{r4, lr}
   b79b4:	4604      	mov	r4, r0
   b79b6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b79b8:	2300      	movs	r3, #0
	capacity = 0;
   b79ba:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b79be:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b79c0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b79c2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b79c4:	a901      	add	r1, sp, #4
   b79c6:	f000 fc93 	bl	b82f0 <itoa>
	*this = buf;
   b79ca:	a901      	add	r1, sp, #4
   b79cc:	4620      	mov	r0, r4
   b79ce:	f7ff ffde 	bl	b798e <_ZN6StringaSEPKc>
}
   b79d2:	4620      	mov	r0, r4
   b79d4:	b00a      	add	sp, #40	; 0x28
   b79d6:	bd10      	pop	{r4, pc}

000b79d8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b79d8:	b570      	push	{r4, r5, r6, lr}
   b79da:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b79dc:	460e      	mov	r6, r1
   b79de:	b909      	cbnz	r1, b79e4 <_ZN6String6concatEPKcj+0xc>
   b79e0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b79e2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b79e4:	b16a      	cbz	r2, b7a02 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b79e6:	6884      	ldr	r4, [r0, #8]
   b79e8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b79ea:	4621      	mov	r1, r4
   b79ec:	f7ff ff74 	bl	b78d8 <_ZN6String7reserveEj>
   b79f0:	2800      	cmp	r0, #0
   b79f2:	d0f5      	beq.n	b79e0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b79f4:	6828      	ldr	r0, [r5, #0]
   b79f6:	68ab      	ldr	r3, [r5, #8]
   b79f8:	4631      	mov	r1, r6
   b79fa:	4418      	add	r0, r3
   b79fc:	f000 ffce 	bl	b899c <strcpy>
	len = newlen;
   b7a00:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7a02:	2001      	movs	r0, #1
   b7a04:	e7ed      	b.n	b79e2 <_ZN6String6concatEPKcj+0xa>

000b7a06 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b7a06:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7a08:	688a      	ldr	r2, [r1, #8]
   b7a0a:	6809      	ldr	r1, [r1, #0]
{
   b7a0c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7a0e:	f7ff ffe3 	bl	b79d8 <_ZN6String6concatEPKcj>
   b7a12:	b910      	cbnz	r0, b7a1a <_ZplRK15StringSumHelperRK6String+0x14>
   b7a14:	4620      	mov	r0, r4
   b7a16:	f7ff ff48 	bl	b78aa <_ZN6String10invalidateEv>
	return a;
}
   b7a1a:	4620      	mov	r0, r4
   b7a1c:	bd10      	pop	{r4, pc}

000b7a1e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b7a1e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7a20:	6882      	ldr	r2, [r0, #8]
   b7a22:	b93a      	cbnz	r2, b7a34 <_ZNK6String6equalsEPKc+0x16>
   b7a24:	b121      	cbz	r1, b7a30 <_ZNK6String6equalsEPKc+0x12>
   b7a26:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b7a28:	fab0 f080 	clz	r0, r0
   b7a2c:	0940      	lsrs	r0, r0, #5
   b7a2e:	e000      	b.n	b7a32 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7a30:	2001      	movs	r0, #1
}
   b7a32:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b7a34:	6800      	ldr	r0, [r0, #0]
   b7a36:	b909      	cbnz	r1, b7a3c <_ZNK6String6equalsEPKc+0x1e>
   b7a38:	7800      	ldrb	r0, [r0, #0]
   b7a3a:	e7f5      	b.n	b7a28 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b7a3c:	f000 ffa4 	bl	b8988 <strcmp>
   b7a40:	e7f2      	b.n	b7a28 <_ZNK6String6equalsEPKc+0xa>
	...

000b7a44 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7a44:	4b05      	ldr	r3, [pc, #20]	; (b7a5c <_GLOBAL__sub_I_System+0x18>)
   b7a46:	2202      	movs	r2, #2
   b7a48:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7a4a:	4b05      	ldr	r3, [pc, #20]	; (b7a60 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7a4c:	4a05      	ldr	r2, [pc, #20]	; (b7a64 <_GLOBAL__sub_I_System+0x20>)
   b7a4e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7a50:	2000      	movs	r0, #0
   b7a52:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7a56:	f7ff bae5 	b.w	b7024 <set_system_mode>
   b7a5a:	bf00      	nop
   b7a5c:	2003e6f8 	.word	0x2003e6f8
   b7a60:	2003e6ec 	.word	0x2003e6ec
   b7a64:	ffff0000 	.word	0xffff0000

000b7a68 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7a68:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7a6a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7a6c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7a70:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7a72:	2201      	movs	r2, #1
   b7a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7a78:	f10d 0107 	add.w	r1, sp, #7
   b7a7c:	47a0      	blx	r4
}
   b7a7e:	b002      	add	sp, #8
   b7a80:	bd10      	pop	{r4, pc}

000b7a82 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7a82:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7a84:	6803      	ldr	r3, [r0, #0]
   b7a86:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7a8c:	46a4      	mov	ip, r4
}
   b7a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7a92:	4760      	bx	ip

000b7a94 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7a94:	b513      	push	{r0, r1, r4, lr}
   b7a96:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7a98:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7a9a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7a9e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7aa0:	f10d 0107 	add.w	r1, sp, #7
   b7aa4:	2201      	movs	r2, #1
   b7aa6:	47a0      	blx	r4
}
   b7aa8:	b002      	add	sp, #8
   b7aaa:	bd10      	pop	{r4, pc}

000b7aac <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7aac:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7aae:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7ab0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7ab4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7ab8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7aba:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7abc:	d008      	beq.n	b7ad0 <_ZN9TCPClient4readEv+0x24>
   b7abe:	6963      	ldr	r3, [r4, #20]
   b7ac0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7ac4:	1c51      	adds	r1, r2, #1
   b7ac6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7aca:	4413      	add	r3, r2
   b7acc:	7918      	ldrb	r0, [r3, #4]
}
   b7ace:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7ad0:	6803      	ldr	r3, [r0, #0]
   b7ad2:	691b      	ldr	r3, [r3, #16]
   b7ad4:	4798      	blx	r3
   b7ad6:	2800      	cmp	r0, #0
   b7ad8:	d1f1      	bne.n	b7abe <_ZN9TCPClient4readEv+0x12>
   b7ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7ade:	e7f6      	b.n	b7ace <_ZN9TCPClient4readEv+0x22>

000b7ae0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7ae0:	4770      	bx	lr

000b7ae2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7ae2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7ae4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7ae6:	43c0      	mvns	r0, r0
   b7ae8:	0fc0      	lsrs	r0, r0, #31
   b7aea:	4770      	bx	lr

000b7aec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7aec:	4770      	bx	lr
	...

000b7af0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7af0:	4b06      	ldr	r3, [pc, #24]	; (b7b0c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7af2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7af4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7af6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7afa:	d005      	beq.n	b7b08 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7afc:	4608      	mov	r0, r1
   b7afe:	f000 fddf 	bl	b86c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7b02:	2800      	cmp	r0, #0
   b7b04:	bf08      	it	eq
   b7b06:	2400      	moveq	r4, #0
      }
   b7b08:	4620      	mov	r0, r4
   b7b0a:	bd10      	pop	{r4, pc}
   b7b0c:	000b9ca0 	.word	0x000b9ca0

000b7b10 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7b10:	b510      	push	{r4, lr}
   b7b12:	21ac      	movs	r1, #172	; 0xac
   b7b14:	4604      	mov	r4, r0
   b7b16:	f7fc fac2 	bl	b409e <_ZdlPvj>
   b7b1a:	4620      	mov	r0, r4
   b7b1c:	bd10      	pop	{r4, pc}

000b7b1e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7b1e:	21ac      	movs	r1, #172	; 0xac
   b7b20:	f7fc babd 	b.w	b409e <_ZdlPvj>

000b7b24 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7b28:	f04f 0800 	mov.w	r8, #0
   b7b2c:	b086      	sub	sp, #24
   b7b2e:	461c      	mov	r4, r3
   b7b30:	f8c0 8004 	str.w	r8, [r0, #4]
   b7b34:	4605      	mov	r5, r0
   b7b36:	460e      	mov	r6, r1
   b7b38:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7b3a:	4641      	mov	r1, r8
   b7b3c:	2210      	movs	r2, #16
   b7b3e:	a802      	add	r0, sp, #8
   b7b40:	f000 feec 	bl	b891c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7b44:	1c63      	adds	r3, r4, #1
   b7b46:	d009      	beq.n	b7b5c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b4c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7b50:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7b54:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7b58:	435c      	muls	r4, r3
   b7b5a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7b5c:	6968      	ldr	r0, [r5, #20]
   b7b5e:	2310      	movs	r3, #16
   b7b60:	9300      	str	r3, [sp, #0]
   b7b62:	6800      	ldr	r0, [r0, #0]
   b7b64:	ab02      	add	r3, sp, #8
   b7b66:	f241 0205 	movw	r2, #4101	; 0x1005
   b7b6a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7b6e:	f7ff f961 	bl	b6e34 <sock_setsockopt>
    if (ret < 0) {
   b7b72:	2800      	cmp	r0, #0
   b7b74:	da07      	bge.n	b7b86 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7b76:	f7ff fb21 	bl	b71bc <__errno>
   b7b7a:	6803      	ldr	r3, [r0, #0]
   b7b7c:	606b      	str	r3, [r5, #4]
        return 0;
   b7b7e:	2000      	movs	r0, #0
}
   b7b80:	b006      	add	sp, #24
   b7b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7b86:	6968      	ldr	r0, [r5, #20]
   b7b88:	2300      	movs	r3, #0
   b7b8a:	6800      	ldr	r0, [r0, #0]
   b7b8c:	463a      	mov	r2, r7
   b7b8e:	4631      	mov	r1, r6
   b7b90:	f7ff f970 	bl	b6e74 <sock_send>
    if (ret < 0) {
   b7b94:	1e03      	subs	r3, r0, #0
   b7b96:	dbee      	blt.n	b7b76 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7b98:	4618      	mov	r0, r3
   b7b9a:	e7f1      	b.n	b7b80 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7b9c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7b9c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b7b9e:	6984      	ldr	r4, [r0, #24]
   b7ba0:	4b0a      	ldr	r3, [pc, #40]	; (b7bcc <_ZN9TCPClientD1Ev+0x30>)
   b7ba2:	6003      	str	r3, [r0, #0]
   b7ba4:	4605      	mov	r5, r0
   b7ba6:	b17c      	cbz	r4, b7bc8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b7ba8:	6863      	ldr	r3, [r4, #4]
   b7baa:	3b01      	subs	r3, #1
   b7bac:	6063      	str	r3, [r4, #4]
   b7bae:	b95b      	cbnz	r3, b7bc8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7bb0:	6823      	ldr	r3, [r4, #0]
   b7bb2:	4620      	mov	r0, r4
   b7bb4:	689b      	ldr	r3, [r3, #8]
   b7bb6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7bb8:	68a3      	ldr	r3, [r4, #8]
   b7bba:	3b01      	subs	r3, #1
   b7bbc:	60a3      	str	r3, [r4, #8]
   b7bbe:	b91b      	cbnz	r3, b7bc8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7bc0:	6823      	ldr	r3, [r4, #0]
   b7bc2:	4620      	mov	r0, r4
   b7bc4:	68db      	ldr	r3, [r3, #12]
   b7bc6:	4798      	blx	r3
   b7bc8:	4628      	mov	r0, r5
   b7bca:	bd38      	pop	{r3, r4, r5, pc}
   b7bcc:	000b9da4 	.word	0x000b9da4

000b7bd0 <_ZN9TCPClientD0Ev>:
   b7bd0:	b510      	push	{r4, lr}
   b7bd2:	4604      	mov	r4, r0
   b7bd4:	f7ff ffe2 	bl	b7b9c <_ZN9TCPClientD1Ev>
   b7bd8:	4620      	mov	r0, r4
   b7bda:	211c      	movs	r1, #28
   b7bdc:	f7fc fa5f 	bl	b409e <_ZdlPvj>
   b7be0:	4620      	mov	r0, r4
   b7be2:	bd10      	pop	{r4, pc}

000b7be4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7be4:	b530      	push	{r4, r5, lr}
   b7be6:	b087      	sub	sp, #28
   b7be8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7bea:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7bec:	4668      	mov	r0, sp
   b7bee:	f7ff fc27 	bl	b7440 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7bf4:	3404      	adds	r4, #4
   b7bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7bf8:	682b      	ldr	r3, [r5, #0]
   b7bfa:	7023      	strb	r3, [r4, #0]
    }
   b7bfc:	b007      	add	sp, #28
   b7bfe:	bd30      	pop	{r4, r5, pc}

000b7c00 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7c00:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7c02:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7c04:	4b05      	ldr	r3, [pc, #20]	; (b7c1c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7c06:	4604      	mov	r4, r0
   b7c08:	358c      	adds	r5, #140	; 0x8c
   b7c0a:	f844 3b04 	str.w	r3, [r4], #4
   b7c0e:	4606      	mov	r6, r0
   b7c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7c14:	682b      	ldr	r3, [r5, #0]
   b7c16:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7c18:	4630      	mov	r0, r6
   b7c1a:	bd70      	pop	{r4, r5, r6, pc}
   b7c1c:	000b9d14 	.word	0x000b9d14

000b7c20 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7c24:	4698      	mov	r8, r3
    stop();
   b7c26:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7c28:	b093      	sub	sp, #76	; 0x4c
   b7c2a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7c2c:	2400      	movs	r4, #0
    stop();
   b7c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7c30:	4606      	mov	r6, r0
   b7c32:	4617      	mov	r7, r2
    stop();
   b7c34:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7c36:	4628      	mov	r0, r5
   b7c38:	466b      	mov	r3, sp
   b7c3a:	4622      	mov	r2, r4
   b7c3c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7c3e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7c40:	f7ff f8f0 	bl	b6e24 <netdb_getaddrinfo>
   b7c44:	4605      	mov	r5, r0
   b7c46:	2800      	cmp	r0, #0
   b7c48:	d163      	bne.n	b7d12 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7c4a:	9b00      	ldr	r3, [sp, #0]
   b7c4c:	2b00      	cmp	r3, #0
   b7c4e:	d04b      	beq.n	b7ce8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7c50:	695b      	ldr	r3, [r3, #20]
   b7c52:	2b00      	cmp	r3, #0
   b7c54:	d048      	beq.n	b7ce8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7c56:	a806      	add	r0, sp, #24
   b7c58:	f7ff fba2 	bl	b73a0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7c5c:	9b00      	ldr	r3, [sp, #0]
   b7c5e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7c60:	7863      	ldrb	r3, [r4, #1]
   b7c62:	2b02      	cmp	r3, #2
   b7c64:	d104      	bne.n	b7c70 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7c66:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7c68:	a806      	add	r0, sp, #24
   b7c6a:	f7ff ffbb 	bl	b7be4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7c6e:	e026      	b.n	b7cbe <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7c70:	2b0a      	cmp	r3, #10
   b7c72:	d124      	bne.n	b7cbe <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7c74:	2211      	movs	r2, #17
   b7c76:	4629      	mov	r1, r5
   b7c78:	a801      	add	r0, sp, #4
   b7c7a:	f000 fe4f 	bl	b891c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7c7e:	68a3      	ldr	r3, [r4, #8]
   b7c80:	2b00      	cmp	r3, #0
   b7c82:	d038      	beq.n	b7cf6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7c84:	f104 0308 	add.w	r3, r4, #8
   b7c88:	f10d 0c04 	add.w	ip, sp, #4
   b7c8c:	3418      	adds	r4, #24
   b7c8e:	6818      	ldr	r0, [r3, #0]
   b7c90:	6859      	ldr	r1, [r3, #4]
   b7c92:	4662      	mov	r2, ip
   b7c94:	c203      	stmia	r2!, {r0, r1}
   b7c96:	3308      	adds	r3, #8
   b7c98:	42a3      	cmp	r3, r4
   b7c9a:	4694      	mov	ip, r2
   b7c9c:	d1f7      	bne.n	b7c8e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7c9e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7ca0:	a901      	add	r1, sp, #4
   b7ca2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7ca4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7ca8:	f7ff fb88 	bl	b73bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7cac:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7cb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7cb4:	ac07      	add	r4, sp, #28
   b7cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7cb8:	f8dc 3000 	ldr.w	r3, [ip]
   b7cbc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7cbe:	a806      	add	r0, sp, #24
   b7cc0:	f7ff fb8e 	bl	b73e0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7cc4:	b180      	cbz	r0, b7ce8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7cc6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7cc8:	ad07      	add	r5, sp, #28
   b7cca:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7cce:	4b12      	ldr	r3, [pc, #72]	; (b7d18 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7cd0:	930c      	str	r3, [sp, #48]	; 0x30
   b7cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7cd4:	ac0d      	add	r4, sp, #52	; 0x34
   b7cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7cd8:	682b      	ldr	r3, [r5, #0]
   b7cda:	7023      	strb	r3, [r4, #0]
   b7cdc:	463a      	mov	r2, r7
   b7cde:	4643      	mov	r3, r8
   b7ce0:	a90c      	add	r1, sp, #48	; 0x30
   b7ce2:	4630      	mov	r0, r6
   b7ce4:	47c8      	blx	r9
   b7ce6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7ce8:	9800      	ldr	r0, [sp, #0]
   b7cea:	f7ff f893 	bl	b6e14 <netdb_freeaddrinfo>
}
   b7cee:	4628      	mov	r0, r5
   b7cf0:	b013      	add	sp, #76	; 0x4c
   b7cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7cf6:	68e3      	ldr	r3, [r4, #12]
   b7cf8:	2b00      	cmp	r3, #0
   b7cfa:	d1c3      	bne.n	b7c84 <_ZN9TCPClient7connectEPKctm+0x64>
   b7cfc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7d00:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7d04:	f7ff f876 	bl	b6df4 <inet_htonl>
   b7d08:	4581      	cmp	r9, r0
   b7d0a:	d1bb      	bne.n	b7c84 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7d0c:	f104 0114 	add.w	r1, r4, #20
   b7d10:	e7aa      	b.n	b7c68 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7d12:	4625      	mov	r5, r4
   b7d14:	e7e8      	b.n	b7ce8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7d16:	bf00      	nop
   b7d18:	000b9d14 	.word	0x000b9d14

000b7d1c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7d1c:	b538      	push	{r3, r4, r5, lr}
   b7d1e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7d20:	681a      	ldr	r2, [r3, #0]
   b7d22:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7d24:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7d26:	da10      	bge.n	b7d4a <_ZN9TCPClient9connectedEv+0x2e>
   b7d28:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7d2c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7d30:	429a      	cmp	r2, r3
   b7d32:	d10a      	bne.n	b7d4a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7d34:	6803      	ldr	r3, [r0, #0]
   b7d36:	691b      	ldr	r3, [r3, #16]
   b7d38:	4798      	blx	r3
        if (!rv) {
   b7d3a:	4604      	mov	r4, r0
   b7d3c:	b928      	cbnz	r0, b7d4a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7d3e:	682b      	ldr	r3, [r5, #0]
   b7d40:	4628      	mov	r0, r5
   b7d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7d44:	4798      	blx	r3
        rv = available();
   b7d46:	4620      	mov	r0, r4
}
   b7d48:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7d4a:	2001      	movs	r0, #1
   b7d4c:	e7fc      	b.n	b7d48 <_ZN9TCPClient9connectedEv+0x2c>

000b7d4e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7d4e:	b510      	push	{r4, lr}
   b7d50:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7d52:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7d56:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7d5a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7d5c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7d5e:	d005      	beq.n	b7d6c <_ZN9TCPClient4peekEv+0x1e>
   b7d60:	6963      	ldr	r3, [r4, #20]
   b7d62:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7d66:	4413      	add	r3, r2
   b7d68:	7918      	ldrb	r0, [r3, #4]
}
   b7d6a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7d6c:	6803      	ldr	r3, [r0, #0]
   b7d6e:	691b      	ldr	r3, [r3, #16]
   b7d70:	4798      	blx	r3
   b7d72:	2800      	cmp	r0, #0
   b7d74:	d1f4      	bne.n	b7d60 <_ZN9TCPClient4peekEv+0x12>
   b7d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7d7a:	e7f6      	b.n	b7d6a <_ZN9TCPClient4peekEv+0x1c>

000b7d7c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d7e:	6943      	ldr	r3, [r0, #20]
   b7d80:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7d82:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7d86:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7d8a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7d8c:	4605      	mov	r5, r0
   b7d8e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7d90:	d016      	beq.n	b7dc0 <_ZN9TCPClient4readEPhj+0x44>
   b7d92:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7d94:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7d98:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7d9c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7d9e:	42bc      	cmp	r4, r7
   b7da0:	bf28      	it	cs
   b7da2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7da4:	3304      	adds	r3, #4
   b7da6:	4622      	mov	r2, r4
   b7da8:	4419      	add	r1, r3
   b7daa:	4630      	mov	r0, r6
   b7dac:	f000 fda8 	bl	b8900 <memcpy>
   b7db0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7db2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7db6:	4423      	add	r3, r4
   b7db8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7dbc:	4620      	mov	r0, r4
   b7dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7dc0:	6803      	ldr	r3, [r0, #0]
   b7dc2:	691b      	ldr	r3, [r3, #16]
   b7dc4:	4798      	blx	r3
   b7dc6:	2800      	cmp	r0, #0
   b7dc8:	d1e3      	bne.n	b7d92 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7dca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7dce:	e7f5      	b.n	b7dbc <_ZN9TCPClient4readEPhj+0x40>

000b7dd0 <_ZN9TCPClient12flush_bufferEv>:
   b7dd0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7dd2:	2300      	movs	r3, #0
   b7dd4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7dd8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7dda:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7dde:	4770      	bx	lr

000b7de0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7de4:	461f      	mov	r7, r3
    stop();
   b7de6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7de8:	460c      	mov	r4, r1
    stop();
   b7dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7dec:	b08a      	sub	sp, #40	; 0x28
   b7dee:	4605      	mov	r5, r0
   b7df0:	4616      	mov	r6, r2
    stop();
   b7df2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7df4:	7d23      	ldrb	r3, [r4, #20]
   b7df6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7dfa:	2b04      	cmp	r3, #4
   b7dfc:	bf0c      	ite	eq
   b7dfe:	2002      	moveq	r0, #2
   b7e00:	200a      	movne	r0, #10
   b7e02:	2206      	movs	r2, #6
   b7e04:	2101      	movs	r1, #1
   b7e06:	f7ff f83d 	bl	b6e84 <sock_socket>
   b7e0a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7e0e:	696b      	ldr	r3, [r5, #20]
   b7e10:	681b      	ldr	r3, [r3, #0]
   b7e12:	2b00      	cmp	r3, #0
   b7e14:	da08      	bge.n	b7e28 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7e16:	682b      	ldr	r3, [r5, #0]
   b7e18:	4628      	mov	r0, r5
   b7e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7e1c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7e1e:	4798      	blx	r3
}
   b7e20:	4620      	mov	r0, r4
   b7e22:	b00a      	add	sp, #40	; 0x28
   b7e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7e28:	4628      	mov	r0, r5
   b7e2a:	f7ff ffd1 	bl	b7dd0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7e2e:	b1b7      	cbz	r7, b7e5e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7e30:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7e32:	a903      	add	r1, sp, #12
   b7e34:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7e36:	9303      	str	r3, [sp, #12]
   b7e38:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7e3c:	f7fe ffca 	bl	b6dd4 <if_index_to_name>
   b7e40:	2800      	cmp	r0, #0
   b7e42:	d1e8      	bne.n	b7e16 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7e44:	6968      	ldr	r0, [r5, #20]
   b7e46:	2306      	movs	r3, #6
   b7e48:	9300      	str	r3, [sp, #0]
   b7e4a:	6800      	ldr	r0, [r0, #0]
   b7e4c:	ab03      	add	r3, sp, #12
   b7e4e:	f241 020b 	movw	r2, #4107	; 0x100b
   b7e52:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7e56:	f7fe ffed 	bl	b6e34 <sock_setsockopt>
   b7e5a:	2800      	cmp	r0, #0
   b7e5c:	d1db      	bne.n	b7e16 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7e5e:	221c      	movs	r2, #28
   b7e60:	2100      	movs	r1, #0
   b7e62:	a803      	add	r0, sp, #12
   b7e64:	f000 fd5a 	bl	b891c <memset>
    if (ip.version() == 4) {
   b7e68:	7d23      	ldrb	r3, [r4, #20]
   b7e6a:	2b04      	cmp	r3, #4
   b7e6c:	d11d      	bne.n	b7eaa <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7e6e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7e72:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7e74:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7e78:	f7fe ffc4 	bl	b6e04 <inet_htons>
   b7e7c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7e80:	6860      	ldr	r0, [r4, #4]
   b7e82:	f7fe ffb7 	bl	b6df4 <inet_htonl>
   b7e86:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7e88:	696b      	ldr	r3, [r5, #20]
   b7e8a:	221c      	movs	r2, #28
   b7e8c:	6818      	ldr	r0, [r3, #0]
   b7e8e:	a903      	add	r1, sp, #12
   b7e90:	f7fe ffe0 	bl	b6e54 <sock_connect>
   b7e94:	2800      	cmp	r0, #0
   b7e96:	d1be      	bne.n	b7e16 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7e98:	3404      	adds	r4, #4
   b7e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7e9c:	696d      	ldr	r5, [r5, #20]
   b7e9e:	358c      	adds	r5, #140	; 0x8c
   b7ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7ea2:	6823      	ldr	r3, [r4, #0]
   b7ea4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7ea6:	2401      	movs	r4, #1
   b7ea8:	e7ba      	b.n	b7e20 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7eaa:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7eae:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7eb0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7eb4:	f7fe ffa6 	bl	b6e04 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7eb8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7eba:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7ebe:	1d23      	adds	r3, r4, #4
   b7ec0:	f104 0714 	add.w	r7, r4, #20
   b7ec4:	6818      	ldr	r0, [r3, #0]
   b7ec6:	6859      	ldr	r1, [r3, #4]
   b7ec8:	4632      	mov	r2, r6
   b7eca:	c203      	stmia	r2!, {r0, r1}
   b7ecc:	3308      	adds	r3, #8
   b7ece:	42bb      	cmp	r3, r7
   b7ed0:	4616      	mov	r6, r2
   b7ed2:	d1f7      	bne.n	b7ec4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7ed4:	e7d8      	b.n	b7e88 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7ed8 <_ZN9TCPClient9availableEv>:
{
   b7ed8:	b530      	push	{r4, r5, lr}
   b7eda:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7edc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7ee0:	b08b      	sub	sp, #44	; 0x2c
   b7ee2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7ee4:	b12b      	cbz	r3, b7ef2 <_ZN9TCPClient9availableEv+0x1a>
   b7ee6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7eea:	429a      	cmp	r2, r3
   b7eec:	d101      	bne.n	b7ef2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7eee:	f7ff ff6f 	bl	b7dd0 <_ZN9TCPClient12flush_bufferEv>
   b7ef2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7ef4:	6808      	ldr	r0, [r1, #0]
   b7ef6:	2800      	cmp	r0, #0
   b7ef8:	db18      	blt.n	b7f2c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7efa:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7efe:	2d7f      	cmp	r5, #127	; 0x7f
   b7f00:	d814      	bhi.n	b7f2c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7f02:	3104      	adds	r1, #4
   b7f04:	2308      	movs	r3, #8
   b7f06:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7f0a:	4429      	add	r1, r5
   b7f0c:	f7fe ffaa 	bl	b6e64 <sock_recv>
            if (ret > 0) {
   b7f10:	2800      	cmp	r0, #0
   b7f12:	dd13      	ble.n	b7f3c <_ZN9TCPClient9availableEv+0x64>
   b7f14:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7f16:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7f1a:	b90a      	cbnz	r2, b7f20 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7f1c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7f20:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7f22:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7f26:	4410      	add	r0, r2
   b7f28:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7f2c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7f2e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7f32:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7f36:	1ac0      	subs	r0, r0, r3
   b7f38:	b00b      	add	sp, #44	; 0x2c
   b7f3a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7f3c:	f7ff f93e 	bl	b71bc <__errno>
   b7f40:	6803      	ldr	r3, [r0, #0]
   b7f42:	2b0b      	cmp	r3, #11
   b7f44:	d0f2      	beq.n	b7f2c <_ZN9TCPClient9availableEv+0x54>
   b7f46:	f7ff f939 	bl	b71bc <__errno>
   b7f4a:	6803      	ldr	r3, [r0, #0]
   b7f4c:	2b0b      	cmp	r3, #11
   b7f4e:	d0ed      	beq.n	b7f2c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7f50:	2320      	movs	r3, #32
   b7f52:	2500      	movs	r5, #0
   b7f54:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7f58:	f7ff f930 	bl	b71bc <__errno>
   b7f5c:	6803      	ldr	r3, [r0, #0]
   b7f5e:	9301      	str	r3, [sp, #4]
   b7f60:	4b08      	ldr	r3, [pc, #32]	; (b7f84 <_ZN9TCPClient9availableEv+0xac>)
   b7f62:	4909      	ldr	r1, [pc, #36]	; (b7f88 <_ZN9TCPClient9availableEv+0xb0>)
   b7f64:	9300      	str	r3, [sp, #0]
   b7f66:	aa02      	add	r2, sp, #8
   b7f68:	462b      	mov	r3, r5
   b7f6a:	2032      	movs	r0, #50	; 0x32
   b7f6c:	f7ff f852 	bl	b7014 <log_message>
                    sock_close(d_->sock);
   b7f70:	6963      	ldr	r3, [r4, #20]
   b7f72:	6818      	ldr	r0, [r3, #0]
   b7f74:	f7fe ff66 	bl	b6e44 <sock_close>
   b7f78:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7f7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7f7e:	601a      	str	r2, [r3, #0]
   b7f80:	e7d4      	b.n	b7f2c <_ZN9TCPClient9availableEv+0x54>
   b7f82:	bf00      	nop
   b7f84:	000b9d6f 	.word	0x000b9d6f
   b7f88:	000b9d68 	.word	0x000b9d68

000b7f8c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7f8c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7f8e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7f90:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7f92:	6818      	ldr	r0, [r3, #0]
   b7f94:	2800      	cmp	r0, #0
   b7f96:	db01      	blt.n	b7f9c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7f98:	f7fe ff54 	bl	b6e44 <sock_close>
   b7f9c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7fa2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7fa4:	6960      	ldr	r0, [r4, #20]
   b7fa6:	2211      	movs	r2, #17
   b7fa8:	2100      	movs	r1, #0
   b7faa:	308c      	adds	r0, #140	; 0x8c
   b7fac:	f000 fcb6 	bl	b891c <memset>
    flush_buffer();
   b7fb0:	4620      	mov	r0, r4
}
   b7fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7fb6:	f7ff bf0b 	b.w	b7dd0 <_ZN9TCPClient12flush_bufferEv>

000b7fba <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7fba:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7fbc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7fbe:	4604      	mov	r4, r0
          total(0) {
   b7fc0:	6001      	str	r1, [r0, #0]
   b7fc2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7fc6:	3088      	adds	r0, #136	; 0x88
   b7fc8:	f7ff f9ea 	bl	b73a0 <_ZN9IPAddressC1Ev>
}
   b7fcc:	4620      	mov	r0, r4
   b7fce:	bd10      	pop	{r4, pc}

000b7fd0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7fd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7fd2:	2300      	movs	r3, #0
   b7fd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7fd8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7fdc:	4a0e      	ldr	r2, [pc, #56]	; (b8018 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7fde:	6103      	str	r3, [r0, #16]
   b7fe0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7fe2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7fe4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7fe6:	20ac      	movs	r0, #172	; 0xac
   b7fe8:	9101      	str	r1, [sp, #4]
   b7fea:	f7fc f852 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7fee:	1e05      	subs	r5, r0, #0
   b7ff0:	f105 060c 	add.w	r6, r5, #12
   b7ff4:	d008      	beq.n	b8008 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7ff6:	2301      	movs	r3, #1
   b7ff8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7ffc:	4b07      	ldr	r3, [pc, #28]	; (b801c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7ffe:	9901      	ldr	r1, [sp, #4]
   b8000:	602b      	str	r3, [r5, #0]
   b8002:	4630      	mov	r0, r6
   b8004:	f7ff ffd9 	bl	b7fba <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8008:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b800a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b800e:	f7ff fedf 	bl	b7dd0 <_ZN9TCPClient12flush_bufferEv>
}
   b8012:	b002      	add	sp, #8
   b8014:	bd70      	pop	{r4, r5, r6, pc}
   b8016:	bf00      	nop
   b8018:	000b9da4 	.word	0x000b9da4
   b801c:	000b9d88 	.word	0x000b9d88

000b8020 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8020:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8022:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b8026:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8028:	f7ff ffd2 	bl	b7fd0 <_ZN9TCPClientC1Ei>
}
   b802c:	4620      	mov	r0, r4
   b802e:	bd10      	pop	{r4, pc}

000b8030 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8030:	b510      	push	{r4, lr}
   b8032:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8034:	6800      	ldr	r0, [r0, #0]
   b8036:	2800      	cmp	r0, #0
   b8038:	db01      	blt.n	b803e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b803a:	f7fe ff03 	bl	b6e44 <sock_close>
    }
}
   b803e:	4620      	mov	r0, r4
   b8040:	bd10      	pop	{r4, pc}

000b8042 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8042:	300c      	adds	r0, #12
   b8044:	f7ff bff4 	b.w	b8030 <_ZN9TCPClient4DataD1Ev>

000b8048 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8048:	4b02      	ldr	r3, [pc, #8]	; (b8054 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b804a:	681a      	ldr	r2, [r3, #0]
   b804c:	4b02      	ldr	r3, [pc, #8]	; (b8058 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b804e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8050:	4770      	bx	lr
   b8052:	bf00      	nop
   b8054:	2003e4ec 	.word	0x2003e4ec
   b8058:	2003e6fc 	.word	0x2003e6fc

000b805c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b805c:	4770      	bx	lr

000b805e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b805e:	7441      	strb	r1, [r0, #17]
}
   b8060:	4770      	bx	lr

000b8062 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8062:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8064:	7c00      	ldrb	r0, [r0, #16]
   b8066:	f7fe ff85 	bl	b6f74 <hal_usart_available_data_for_write>
}
   b806a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b806e:	bd08      	pop	{r3, pc}

000b8070 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8070:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8072:	7c00      	ldrb	r0, [r0, #16]
   b8074:	f7fe ff56 	bl	b6f24 <hal_usart_available>
}
   b8078:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b807c:	bd08      	pop	{r3, pc}

000b807e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b807e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8080:	7c00      	ldrb	r0, [r0, #16]
   b8082:	f7fe ff5f 	bl	b6f44 <hal_usart_peek>
}
   b8086:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b808a:	bd08      	pop	{r3, pc}

000b808c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b808c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b808e:	7c00      	ldrb	r0, [r0, #16]
   b8090:	f7fe ff50 	bl	b6f34 <hal_usart_read>
}
   b8094:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8098:	bd08      	pop	{r3, pc}

000b809a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b809a:	7c00      	ldrb	r0, [r0, #16]
   b809c:	f7fe bf5a 	b.w	b6f54 <hal_usart_flush>

000b80a0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b80a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b80a2:	7c45      	ldrb	r5, [r0, #17]
{
   b80a4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b80a6:	b12d      	cbz	r5, b80b4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b80a8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b80aa:	b003      	add	sp, #12
   b80ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b80b0:	f7fe bf30 	b.w	b6f14 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b80b4:	7c00      	ldrb	r0, [r0, #16]
   b80b6:	9101      	str	r1, [sp, #4]
   b80b8:	f7fe ff5c 	bl	b6f74 <hal_usart_available_data_for_write>
   b80bc:	2800      	cmp	r0, #0
   b80be:	9901      	ldr	r1, [sp, #4]
   b80c0:	dcf2      	bgt.n	b80a8 <_ZN11USARTSerial5writeEh+0x8>
}
   b80c2:	4628      	mov	r0, r5
   b80c4:	b003      	add	sp, #12
   b80c6:	bd30      	pop	{r4, r5, pc}

000b80c8 <_ZN11USARTSerialD0Ev>:
   b80c8:	b510      	push	{r4, lr}
   b80ca:	2114      	movs	r1, #20
   b80cc:	4604      	mov	r4, r0
   b80ce:	f7fb ffe6 	bl	b409e <_ZdlPvj>
   b80d2:	4620      	mov	r0, r4
   b80d4:	bd10      	pop	{r4, pc}
	...

000b80d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b80d8:	b510      	push	{r4, lr}
   b80da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b80de:	4604      	mov	r4, r0
   b80e0:	4608      	mov	r0, r1
   b80e2:	4611      	mov	r1, r2
   b80e4:	2200      	movs	r2, #0
   b80e6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b80ea:	4b04      	ldr	r3, [pc, #16]	; (b80fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b80ec:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b80ee:	2301      	movs	r3, #1
  _serial = serial;
   b80f0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b80f2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b80f4:	f7fe ff46 	bl	b6f84 <hal_usart_init_ex>
}
   b80f8:	4620      	mov	r0, r4
   b80fa:	bd10      	pop	{r4, pc}
   b80fc:	000b9e0c 	.word	0x000b9e0c

000b8100 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8100:	7441      	strb	r1, [r0, #17]
}
   b8102:	4770      	bx	lr

000b8104 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8104:	4770      	bx	lr

000b8106 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8106:	4770      	bx	lr

000b8108 <_ZN9USBSerial4readEv>:
{
   b8108:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b810a:	2100      	movs	r1, #0
   b810c:	7c00      	ldrb	r0, [r0, #16]
   b810e:	f7fe ff61 	bl	b6fd4 <HAL_USB_USART_Receive_Data>
}
   b8112:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8116:	bd08      	pop	{r3, pc}

000b8118 <_ZN9USBSerial4peekEv>:
{
   b8118:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b811a:	2101      	movs	r1, #1
   b811c:	7c00      	ldrb	r0, [r0, #16]
   b811e:	f7fe ff59 	bl	b6fd4 <HAL_USB_USART_Receive_Data>
}
   b8122:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8126:	bd08      	pop	{r3, pc}

000b8128 <_ZN9USBSerial17availableForWriteEv>:
{
   b8128:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b812a:	7c00      	ldrb	r0, [r0, #16]
   b812c:	f7fe ff4a 	bl	b6fc4 <HAL_USB_USART_Available_Data_For_Write>
}
   b8130:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8134:	bd08      	pop	{r3, pc}

000b8136 <_ZN9USBSerial9availableEv>:
{
   b8136:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8138:	7c00      	ldrb	r0, [r0, #16]
   b813a:	f7fe ff3b 	bl	b6fb4 <HAL_USB_USART_Available_Data>
}
   b813e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8142:	bd08      	pop	{r3, pc}

000b8144 <_ZN9USBSerial5writeEh>:
{
   b8144:	b513      	push	{r0, r1, r4, lr}
   b8146:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8148:	7c00      	ldrb	r0, [r0, #16]
{
   b814a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b814c:	f7fe ff3a 	bl	b6fc4 <HAL_USB_USART_Available_Data_For_Write>
   b8150:	2800      	cmp	r0, #0
   b8152:	9901      	ldr	r1, [sp, #4]
   b8154:	dc01      	bgt.n	b815a <_ZN9USBSerial5writeEh+0x16>
   b8156:	7c60      	ldrb	r0, [r4, #17]
   b8158:	b120      	cbz	r0, b8164 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b815a:	7c20      	ldrb	r0, [r4, #16]
   b815c:	f7fe ff42 	bl	b6fe4 <HAL_USB_USART_Send_Data>
   b8160:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8164:	b002      	add	sp, #8
   b8166:	bd10      	pop	{r4, pc}

000b8168 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8168:	7c00      	ldrb	r0, [r0, #16]
   b816a:	f7fe bf43 	b.w	b6ff4 <HAL_USB_USART_Flush_Data>

000b816e <_ZN9USBSerialD0Ev>:
   b816e:	b510      	push	{r4, lr}
   b8170:	2114      	movs	r1, #20
   b8172:	4604      	mov	r4, r0
   b8174:	f7fb ff93 	bl	b409e <_ZdlPvj>
   b8178:	4620      	mov	r0, r4
   b817a:	bd10      	pop	{r4, pc}

000b817c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b817c:	b510      	push	{r4, lr}
   b817e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8182:	4604      	mov	r4, r0
   b8184:	4608      	mov	r0, r1
   b8186:	2100      	movs	r1, #0
   b8188:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b818c:	4b04      	ldr	r3, [pc, #16]	; (b81a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b818e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8190:	2301      	movs	r3, #1
  _serial = serial;
   b8192:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8194:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8196:	4611      	mov	r1, r2
   b8198:	f7fe fefc 	bl	b6f94 <HAL_USB_USART_Init>
}
   b819c:	4620      	mov	r0, r4
   b819e:	bd10      	pop	{r4, pc}
   b81a0:	000b9e3c 	.word	0x000b9e3c

000b81a4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b81a4:	7c00      	ldrb	r0, [r0, #16]
   b81a6:	2200      	movs	r2, #0
   b81a8:	f7fe befc 	b.w	b6fa4 <HAL_USB_USART_Begin>

000b81ac <_Z19acquireSerialBufferv>:
{
   b81ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b81ae:	2214      	movs	r2, #20
{
   b81b0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b81b2:	2100      	movs	r1, #0
   b81b4:	f000 fbb2 	bl	b891c <memset>
}
   b81b8:	4620      	mov	r0, r4
   b81ba:	bd10      	pop	{r4, pc}

000b81bc <_Z16_fetch_usbserialv>:
{
   b81bc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b81be:	4c0f      	ldr	r4, [pc, #60]	; (b81fc <_Z16_fetch_usbserialv+0x40>)
{
   b81c0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b81c2:	a803      	add	r0, sp, #12
   b81c4:	f7ff fff2 	bl	b81ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b81c8:	7821      	ldrb	r1, [r4, #0]
   b81ca:	f3bf 8f5b 	dmb	ish
   b81ce:	f011 0101 	ands.w	r1, r1, #1
   b81d2:	d10f      	bne.n	b81f4 <_Z16_fetch_usbserialv+0x38>
   b81d4:	4620      	mov	r0, r4
   b81d6:	9101      	str	r1, [sp, #4]
   b81d8:	f7fb ff70 	bl	b40bc <__cxa_guard_acquire>
   b81dc:	9901      	ldr	r1, [sp, #4]
   b81de:	b148      	cbz	r0, b81f4 <_Z16_fetch_usbserialv+0x38>
   b81e0:	aa03      	add	r2, sp, #12
   b81e2:	4807      	ldr	r0, [pc, #28]	; (b8200 <_Z16_fetch_usbserialv+0x44>)
   b81e4:	f7ff ffca 	bl	b817c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b81e8:	4620      	mov	r0, r4
   b81ea:	f7fb ff6c 	bl	b40c6 <__cxa_guard_release>
   b81ee:	4805      	ldr	r0, [pc, #20]	; (b8204 <_Z16_fetch_usbserialv+0x48>)
   b81f0:	f000 fb78 	bl	b88e4 <atexit>
	return _usbserial;
}
   b81f4:	4802      	ldr	r0, [pc, #8]	; (b8200 <_Z16_fetch_usbserialv+0x44>)
   b81f6:	b008      	add	sp, #32
   b81f8:	bd10      	pop	{r4, pc}
   b81fa:	bf00      	nop
   b81fc:	2003e700 	.word	0x2003e700
   b8200:	2003e704 	.word	0x2003e704
   b8204:	000b8105 	.word	0x000b8105

000b8208 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8208:	2200      	movs	r2, #0
   b820a:	6840      	ldr	r0, [r0, #4]
   b820c:	4611      	mov	r1, r2
   b820e:	f7fe bf65 	b.w	b70dc <network_ready>

000b8212 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8212:	2200      	movs	r2, #0
   b8214:	6840      	ldr	r0, [r0, #4]
   b8216:	4611      	mov	r1, r2
   b8218:	f7fe bf80 	b.w	b711c <network_listening>

000b821c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b821c:	2200      	movs	r2, #0
   b821e:	6840      	ldr	r0, [r0, #4]
   b8220:	4611      	mov	r1, r2
   b8222:	f7fe bf8b 	b.w	b713c <network_get_listen_timeout>

000b8226 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8226:	6840      	ldr	r0, [r0, #4]
   b8228:	2200      	movs	r2, #0
   b822a:	f7fe bf7f 	b.w	b712c <network_set_listen_timeout>

000b822e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b822e:	6840      	ldr	r0, [r0, #4]
   b8230:	2200      	movs	r2, #0
   b8232:	f081 0101 	eor.w	r1, r1, #1
   b8236:	f7fe bf69 	b.w	b710c <network_listen>

000b823a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b823a:	2300      	movs	r3, #0
   b823c:	6840      	ldr	r0, [r0, #4]
   b823e:	461a      	mov	r2, r3
   b8240:	4619      	mov	r1, r3
   b8242:	f7fe bf5b 	b.w	b70fc <network_off>

000b8246 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8246:	2300      	movs	r3, #0
   b8248:	6840      	ldr	r0, [r0, #4]
   b824a:	461a      	mov	r2, r3
   b824c:	4619      	mov	r1, r3
   b824e:	f7fe bf4d 	b.w	b70ec <network_on>

000b8252 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8252:	2200      	movs	r2, #0
   b8254:	6840      	ldr	r0, [r0, #4]
   b8256:	4611      	mov	r1, r2
   b8258:	f7fe bf30 	b.w	b70bc <network_connecting>

000b825c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b825c:	6840      	ldr	r0, [r0, #4]
   b825e:	2200      	movs	r2, #0
   b8260:	2102      	movs	r1, #2
   b8262:	f7fe bf33 	b.w	b70cc <network_disconnect>

000b8266 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8266:	2300      	movs	r3, #0
   b8268:	6840      	ldr	r0, [r0, #4]
   b826a:	461a      	mov	r2, r3
   b826c:	f7fe bf1e 	b.w	b70ac <network_connect>

000b8270 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8270:	4b02      	ldr	r3, [pc, #8]	; (b827c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8272:	2204      	movs	r2, #4
   b8274:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8276:	4a02      	ldr	r2, [pc, #8]	; (b8280 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8278:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b827a:	4770      	bx	lr
   b827c:	2003e718 	.word	0x2003e718
   b8280:	000b9e6c 	.word	0x000b9e6c

000b8284 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8284:	b510      	push	{r4, lr}
   b8286:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8288:	f000 fb90 	bl	b89ac <strlen>
   b828c:	3801      	subs	r0, #1
   b828e:	1823      	adds	r3, r4, r0
   b8290:	4620      	mov	r0, r4
	while(i<j){
   b8292:	4283      	cmp	r3, r0
   b8294:	d906      	bls.n	b82a4 <_Z11str_reversePc+0x20>
		c = *i;
   b8296:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8298:	7819      	ldrb	r1, [r3, #0]
   b829a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b829e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b82a2:	e7f6      	b.n	b8292 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b82a4:	bd10      	pop	{r4, pc}

000b82a6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b82a6:	b570      	push	{r4, r5, r6, lr}
   b82a8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b82aa:	1e91      	subs	r1, r2, #2
   b82ac:	2922      	cmp	r1, #34	; 0x22
   b82ae:	d81d      	bhi.n	b82ec <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b82b0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b82b2:	b930      	cbnz	r0, b82c2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b82b4:	4423      	add	r3, r4
            *ptr++ = '0';
   b82b6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b82b8:	429d      	cmp	r5, r3
   b82ba:	d210      	bcs.n	b82de <ultoa+0x38>
            *ptr++ = '0';
   b82bc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b82c0:	e7fa      	b.n	b82b8 <ultoa+0x12>
            result.quot = a/radix;
   b82c2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b82c6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b82ca:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b82cc:	2809      	cmp	r0, #9
                *ptr += '0';
   b82ce:	bf94      	ite	ls
   b82d0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b82d2:	3157      	addhi	r1, #87	; 0x57
   b82d4:	b2c9      	uxtb	r1, r1
   b82d6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b82da:	4630      	mov	r0, r6
	while(a){
   b82dc:	e7e9      	b.n	b82b2 <ultoa+0xc>

	*ptr = '\0';
   b82de:	2300      	movs	r3, #0
	str_reverse(buffer);
   b82e0:	4620      	mov	r0, r4
	*ptr = '\0';
   b82e2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b82e4:	f7ff ffce 	bl	b8284 <_Z11str_reversePc>
	return buffer;
   b82e8:	4620      	mov	r0, r4
}
   b82ea:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b82ec:	2000      	movs	r0, #0
   b82ee:	e7fc      	b.n	b82ea <ultoa+0x44>

000b82f0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b82f0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b82f2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b82f4:	460c      	mov	r4, r1
   b82f6:	4615      	mov	r5, r2
	if(a<0){
   b82f8:	da0e      	bge.n	b8318 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b82fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b82fe:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8302:	bf14      	ite	ne
   b8304:	4258      	negne	r0, r3
   b8306:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8308:	2301      	movs	r3, #1
		*buffer = '-';
   b830a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b830c:	462a      	mov	r2, r5
   b830e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8310:	f7ff ffc9 	bl	b82a6 <ultoa>
	}
	return buffer;
}
   b8314:	4620      	mov	r0, r4
   b8316:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8318:	2301      	movs	r3, #1
   b831a:	e7f9      	b.n	b8310 <itoa+0x20>

000b831c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b831c:	4b01      	ldr	r3, [pc, #4]	; (b8324 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b831e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8320:	4770      	bx	lr
   b8322:	bf00      	nop
   b8324:	2003e4f0 	.word	0x2003e4f0

000b8328 <serialEventRun>:
{
   b8328:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b832a:	4b0b      	ldr	r3, [pc, #44]	; (b8358 <serialEventRun+0x30>)
   b832c:	b143      	cbz	r3, b8340 <serialEventRun+0x18>
   b832e:	f7ff ff45 	bl	b81bc <_Z16_fetch_usbserialv>
   b8332:	6803      	ldr	r3, [r0, #0]
   b8334:	691b      	ldr	r3, [r3, #16]
   b8336:	4798      	blx	r3
   b8338:	2800      	cmp	r0, #0
   b833a:	dd01      	ble.n	b8340 <serialEventRun+0x18>
        serialEvent();
   b833c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8340:	4b06      	ldr	r3, [pc, #24]	; (b835c <serialEventRun+0x34>)
   b8342:	b143      	cbz	r3, b8356 <serialEventRun+0x2e>
   b8344:	f000 f996 	bl	b8674 <_Z22__fetch_global_Serial1v>
   b8348:	6803      	ldr	r3, [r0, #0]
   b834a:	691b      	ldr	r3, [r3, #16]
   b834c:	4798      	blx	r3
   b834e:	2800      	cmp	r0, #0
   b8350:	dd01      	ble.n	b8356 <serialEventRun+0x2e>
        serialEvent1();
   b8352:	f3af 8000 	nop.w
}
   b8356:	bd08      	pop	{r3, pc}
	...

000b8360 <_post_loop>:
{
   b8360:	b508      	push	{r3, lr}
	serialEventRun();
   b8362:	f7ff ffe1 	bl	b8328 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8366:	f7fe fc95 	bl	b6c94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b836a:	4b01      	ldr	r3, [pc, #4]	; (b8370 <_post_loop+0x10>)
   b836c:	6018      	str	r0, [r3, #0]
}
   b836e:	bd08      	pop	{r3, pc}
   b8370:	2003e728 	.word	0x2003e728

000b8374 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8374:	4805      	ldr	r0, [pc, #20]	; (b838c <_Z33system_initialize_user_backup_ramv+0x18>)
   b8376:	4a06      	ldr	r2, [pc, #24]	; (b8390 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8378:	4906      	ldr	r1, [pc, #24]	; (b8394 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b837a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b837c:	1a12      	subs	r2, r2, r0
   b837e:	f000 fabf 	bl	b8900 <memcpy>
    __backup_sram_signature = signature;
   b8382:	4b05      	ldr	r3, [pc, #20]	; (b8398 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8384:	4a05      	ldr	r2, [pc, #20]	; (b839c <_Z33system_initialize_user_backup_ramv+0x28>)
   b8386:	601a      	str	r2, [r3, #0]
}
   b8388:	bd08      	pop	{r3, pc}
   b838a:	bf00      	nop
   b838c:	2003f400 	.word	0x2003f400
   b8390:	2003f404 	.word	0x2003f404
   b8394:	000ba154 	.word	0x000ba154
   b8398:	2003f400 	.word	0x2003f400
   b839c:	9a271c1e 	.word	0x9a271c1e

000b83a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b83a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b83a2:	2300      	movs	r3, #0
   b83a4:	9300      	str	r3, [sp, #0]
   b83a6:	461a      	mov	r2, r3
   b83a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b83ac:	f7fe fe5c 	bl	b7068 <system_ctrl_set_result>
}
   b83b0:	b003      	add	sp, #12
   b83b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b83b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b83b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b83ba:	8843      	ldrh	r3, [r0, #2]
   b83bc:	2b0a      	cmp	r3, #10
   b83be:	d008      	beq.n	b83d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b83c0:	2b50      	cmp	r3, #80	; 0x50
   b83c2:	d10b      	bne.n	b83dc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b83c4:	4b09      	ldr	r3, [pc, #36]	; (b83ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b83c6:	681b      	ldr	r3, [r3, #0]
   b83c8:	b14b      	cbz	r3, b83de <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b83ca:	b003      	add	sp, #12
   b83cc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b83d0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b83d2:	f7ff ffe5 	bl	b83a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b83d6:	b003      	add	sp, #12
   b83d8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b83dc:	2300      	movs	r3, #0
   b83de:	9300      	str	r3, [sp, #0]
   b83e0:	461a      	mov	r2, r3
   b83e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b83e6:	f7fe fe3f 	bl	b7068 <system_ctrl_set_result>
}
   b83ea:	e7f4      	b.n	b83d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b83ec:	2003e724 	.word	0x2003e724

000b83f0 <module_user_init_hook>:
{
   b83f0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b83f2:	4812      	ldr	r0, [pc, #72]	; (b843c <module_user_init_hook+0x4c>)
   b83f4:	2100      	movs	r1, #0
   b83f6:	f7fe fef1 	bl	b71dc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b83fa:	4b11      	ldr	r3, [pc, #68]	; (b8440 <module_user_init_hook+0x50>)
   b83fc:	681a      	ldr	r2, [r3, #0]
   b83fe:	4b11      	ldr	r3, [pc, #68]	; (b8444 <module_user_init_hook+0x54>)
   b8400:	429a      	cmp	r2, r3
   b8402:	4b11      	ldr	r3, [pc, #68]	; (b8448 <module_user_init_hook+0x58>)
   b8404:	bf0c      	ite	eq
   b8406:	2201      	moveq	r2, #1
   b8408:	2200      	movne	r2, #0
   b840a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b840c:	d001      	beq.n	b8412 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b840e:	f7ff ffb1 	bl	b8374 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8412:	f7fe fc2f 	bl	b6c74 <HAL_RNG_GetRandomNumber>
   b8416:	4604      	mov	r4, r0
    srand(seed);
   b8418:	f000 fa88 	bl	b892c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b841c:	4b0b      	ldr	r3, [pc, #44]	; (b844c <module_user_init_hook+0x5c>)
   b841e:	b113      	cbz	r3, b8426 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8420:	4620      	mov	r0, r4
   b8422:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8426:	2100      	movs	r1, #0
   b8428:	4808      	ldr	r0, [pc, #32]	; (b844c <module_user_init_hook+0x5c>)
   b842a:	f7fe fe37 	bl	b709c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b842e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8432:	4807      	ldr	r0, [pc, #28]	; (b8450 <module_user_init_hook+0x60>)
   b8434:	2100      	movs	r1, #0
   b8436:	f7fe be0d 	b.w	b7054 <system_ctrl_set_app_request_handler>
   b843a:	bf00      	nop
   b843c:	000b831d 	.word	0x000b831d
   b8440:	2003f400 	.word	0x2003f400
   b8444:	9a271c1e 	.word	0x9a271c1e
   b8448:	2003e720 	.word	0x2003e720
   b844c:	00000000 	.word	0x00000000
   b8450:	000b83b9 	.word	0x000b83b9

000b8454 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8454:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8456:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8458:	d902      	bls.n	b8460 <pinAvailable+0xc>
    return false;
   b845a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b845c:	b002      	add	sp, #8
   b845e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8460:	f1a0 030b 	sub.w	r3, r0, #11
   b8464:	2b02      	cmp	r3, #2
   b8466:	d81a      	bhi.n	b849e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8468:	4c17      	ldr	r4, [pc, #92]	; (b84c8 <pinAvailable+0x74>)
   b846a:	7821      	ldrb	r1, [r4, #0]
   b846c:	f3bf 8f5b 	dmb	ish
   b8470:	f011 0101 	ands.w	r1, r1, #1
   b8474:	d10b      	bne.n	b848e <pinAvailable+0x3a>
   b8476:	4620      	mov	r0, r4
   b8478:	9101      	str	r1, [sp, #4]
   b847a:	f7fb fe1f 	bl	b40bc <__cxa_guard_acquire>
   b847e:	9901      	ldr	r1, [sp, #4]
   b8480:	b128      	cbz	r0, b848e <pinAvailable+0x3a>
   b8482:	4812      	ldr	r0, [pc, #72]	; (b84cc <pinAvailable+0x78>)
   b8484:	f7ff f934 	bl	b76f0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8488:	4620      	mov	r0, r4
   b848a:	f7fb fe1c 	bl	b40c6 <__cxa_guard_release>
   b848e:	4b0f      	ldr	r3, [pc, #60]	; (b84cc <pinAvailable+0x78>)
   b8490:	7818      	ldrb	r0, [r3, #0]
   b8492:	f7fe fd17 	bl	b6ec4 <hal_spi_is_enabled>
   b8496:	2800      	cmp	r0, #0
   b8498:	d1df      	bne.n	b845a <pinAvailable+0x6>
  return true; // 'pin' is available
   b849a:	2001      	movs	r0, #1
   b849c:	e7de      	b.n	b845c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b849e:	2801      	cmp	r0, #1
   b84a0:	d809      	bhi.n	b84b6 <pinAvailable+0x62>
   b84a2:	f000 f8a7 	bl	b85f4 <_Z19__fetch_global_Wirev>
   b84a6:	2100      	movs	r1, #0
   b84a8:	7c00      	ldrb	r0, [r0, #16]
   b84aa:	f7fe fc83 	bl	b6db4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b84ae:	f080 0001 	eor.w	r0, r0, #1
   b84b2:	b2c0      	uxtb	r0, r0
   b84b4:	e7d2      	b.n	b845c <pinAvailable+0x8>
   b84b6:	3809      	subs	r0, #9
   b84b8:	2801      	cmp	r0, #1
   b84ba:	d8ee      	bhi.n	b849a <pinAvailable+0x46>
   b84bc:	f000 f8da 	bl	b8674 <_Z22__fetch_global_Serial1v>
   b84c0:	7c00      	ldrb	r0, [r0, #16]
   b84c2:	f7fe fd4f 	bl	b6f64 <hal_usart_is_enabled>
   b84c6:	e7f2      	b.n	b84ae <pinAvailable+0x5a>
   b84c8:	2003e6b8 	.word	0x2003e6b8
   b84cc:	2003e6bc 	.word	0x2003e6bc

000b84d0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b84d0:	2823      	cmp	r0, #35	; 0x23
{
   b84d2:	b538      	push	{r3, r4, r5, lr}
   b84d4:	4604      	mov	r4, r0
   b84d6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b84d8:	d80a      	bhi.n	b84f0 <pinMode+0x20>
   b84da:	29ff      	cmp	r1, #255	; 0xff
   b84dc:	d008      	beq.n	b84f0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b84de:	f7ff ffb9 	bl	b8454 <pinAvailable>
   b84e2:	b128      	cbz	r0, b84f0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b84e4:	4629      	mov	r1, r5
   b84e6:	4620      	mov	r0, r4
}
   b84e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b84ec:	f7fe bbe2 	b.w	b6cb4 <HAL_Pin_Mode>
}
   b84f0:	bd38      	pop	{r3, r4, r5, pc}

000b84f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b84f2:	b538      	push	{r3, r4, r5, lr}
   b84f4:	4604      	mov	r4, r0
   b84f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b84f8:	f7fe fbe4 	bl	b6cc4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b84fc:	28ff      	cmp	r0, #255	; 0xff
   b84fe:	d010      	beq.n	b8522 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8500:	2806      	cmp	r0, #6
   b8502:	d804      	bhi.n	b850e <digitalWrite+0x1c>
   b8504:	234d      	movs	r3, #77	; 0x4d
   b8506:	fa23 f000 	lsr.w	r0, r3, r0
   b850a:	07c3      	lsls	r3, r0, #31
   b850c:	d409      	bmi.n	b8522 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b850e:	4620      	mov	r0, r4
   b8510:	f7ff ffa0 	bl	b8454 <pinAvailable>
   b8514:	b128      	cbz	r0, b8522 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b8516:	4629      	mov	r1, r5
   b8518:	4620      	mov	r0, r4
}
   b851a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b851e:	f7fe bbd9 	b.w	b6cd4 <HAL_GPIO_Write>
}
   b8522:	bd38      	pop	{r3, r4, r5, pc}

000b8524 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b8524:	b510      	push	{r4, lr}
   b8526:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8528:	f7fe fbcc 	bl	b6cc4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b852c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b852e:	b2db      	uxtb	r3, r3
   b8530:	2b01      	cmp	r3, #1
   b8532:	d908      	bls.n	b8546 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8534:	4620      	mov	r0, r4
   b8536:	f7ff ff8d 	bl	b8454 <pinAvailable>
   b853a:	b120      	cbz	r0, b8546 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b853c:	4620      	mov	r0, r4
}
   b853e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b8542:	f7fe bbcf 	b.w	b6ce4 <HAL_GPIO_Read>
}
   b8546:	2000      	movs	r0, #0
   b8548:	bd10      	pop	{r4, pc}

000b854a <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b854a:	280d      	cmp	r0, #13
{
   b854c:	b510      	push	{r4, lr}
   b854e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8550:	bf9c      	itt	ls
   b8552:	340e      	addls	r4, #14
   b8554:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8556:	4620      	mov	r0, r4
   b8558:	f7ff ff7c 	bl	b8454 <pinAvailable>
   b855c:	b150      	cbz	r0, b8574 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b855e:	2103      	movs	r1, #3
   b8560:	4620      	mov	r0, r4
   b8562:	f7fe fb9f 	bl	b6ca4 <HAL_Validate_Pin_Function>
   b8566:	2803      	cmp	r0, #3
   b8568:	d104      	bne.n	b8574 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b856a:	4620      	mov	r0, r4
}
   b856c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8570:	f7fe bbc8 	b.w	b6d04 <hal_adc_read>
}
   b8574:	2000      	movs	r0, #0
   b8576:	bd10      	pop	{r4, pc}

000b8578 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b8578:	b538      	push	{r3, r4, r5, lr}
   b857a:	4604      	mov	r4, r0
   b857c:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b857e:	f7ff ff69 	bl	b8454 <pinAvailable>
   b8582:	b1f0      	cbz	r0, b85c2 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b8584:	2104      	movs	r1, #4
   b8586:	4620      	mov	r0, r4
   b8588:	f7fe fb8c 	bl	b6ca4 <HAL_Validate_Pin_Function>
   b858c:	2804      	cmp	r0, #4
   b858e:	d105      	bne.n	b859c <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b8590:	b2a9      	uxth	r1, r5
   b8592:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b8594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b8598:	f7fe bbac 	b.w	b6cf4 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b859c:	2102      	movs	r1, #2
   b859e:	4620      	mov	r0, r4
   b85a0:	f7fe fb80 	bl	b6ca4 <HAL_Validate_Pin_Function>
   b85a4:	2802      	cmp	r0, #2
   b85a6:	d10c      	bne.n	b85c2 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b85a8:	4620      	mov	r0, r4
   b85aa:	f7fe fb8b 	bl	b6cc4 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b85ae:	2801      	cmp	r0, #1
   b85b0:	d001      	beq.n	b85b6 <_Z11analogWritetm+0x3e>
   b85b2:	2804      	cmp	r0, #4
   b85b4:	d105      	bne.n	b85c2 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b85b6:	4629      	mov	r1, r5
   b85b8:	4620      	mov	r0, r4
}
   b85ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b85be:	f7fe bba9 	b.w	b6d14 <hal_pwm_write_ext>
}
   b85c2:	bd38      	pop	{r3, r4, r5, pc}

000b85c4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b85c4:	4770      	bx	lr
	...

000b85c8 <_Z17acquireWireBufferv>:
{
   b85c8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b85ca:	2520      	movs	r5, #32
   b85cc:	2314      	movs	r3, #20
{
   b85ce:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b85d0:	6003      	str	r3, [r0, #0]
   b85d2:	6085      	str	r5, [r0, #8]
   b85d4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b85d6:	4906      	ldr	r1, [pc, #24]	; (b85f0 <_Z17acquireWireBufferv+0x28>)
   b85d8:	4628      	mov	r0, r5
   b85da:	f000 f86f 	bl	b86bc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b85de:	4904      	ldr	r1, [pc, #16]	; (b85f0 <_Z17acquireWireBufferv+0x28>)
	};
   b85e0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b85e2:	4628      	mov	r0, r5
   b85e4:	f000 f86a 	bl	b86bc <_ZnajRKSt9nothrow_t>
	};
   b85e8:	60e0      	str	r0, [r4, #12]
}
   b85ea:	4620      	mov	r0, r4
   b85ec:	bd38      	pop	{r3, r4, r5, pc}
   b85ee:	bf00      	nop
   b85f0:	000b9ea0 	.word	0x000b9ea0

000b85f4 <_Z19__fetch_global_Wirev>:
{
   b85f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b85f6:	4d0e      	ldr	r5, [pc, #56]	; (b8630 <_Z19__fetch_global_Wirev+0x3c>)
   b85f8:	7829      	ldrb	r1, [r5, #0]
   b85fa:	f3bf 8f5b 	dmb	ish
   b85fe:	f011 0401 	ands.w	r4, r1, #1
{
   b8602:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8604:	d111      	bne.n	b862a <_Z19__fetch_global_Wirev+0x36>
   b8606:	4628      	mov	r0, r5
   b8608:	f7fb fd58 	bl	b40bc <__cxa_guard_acquire>
   b860c:	b168      	cbz	r0, b862a <_Z19__fetch_global_Wirev+0x36>
   b860e:	a801      	add	r0, sp, #4
   b8610:	f7ff ffda 	bl	b85c8 <_Z17acquireWireBufferv>
   b8614:	aa01      	add	r2, sp, #4
   b8616:	4621      	mov	r1, r4
   b8618:	4806      	ldr	r0, [pc, #24]	; (b8634 <_Z19__fetch_global_Wirev+0x40>)
   b861a:	f7fe fe5d 	bl	b72d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b861e:	4628      	mov	r0, r5
   b8620:	f7fb fd51 	bl	b40c6 <__cxa_guard_release>
   b8624:	4804      	ldr	r0, [pc, #16]	; (b8638 <_Z19__fetch_global_Wirev+0x44>)
   b8626:	f000 f95d 	bl	b88e4 <atexit>
	return wire;
}
   b862a:	4802      	ldr	r0, [pc, #8]	; (b8634 <_Z19__fetch_global_Wirev+0x40>)
   b862c:	b007      	add	sp, #28
   b862e:	bd30      	pop	{r4, r5, pc}
   b8630:	2003e72c 	.word	0x2003e72c
   b8634:	2003e730 	.word	0x2003e730
   b8638:	000b85c5 	.word	0x000b85c5

000b863c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b863c:	4770      	bx	lr
	...

000b8640 <_Z20acquireSerial1Bufferv>:
{
   b8640:	b538      	push	{r3, r4, r5, lr}
   b8642:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8644:	2514      	movs	r5, #20
   b8646:	462a      	mov	r2, r5
   b8648:	2100      	movs	r1, #0
   b864a:	f000 f967 	bl	b891c <memset>
   b864e:	8025      	strh	r5, [r4, #0]
   b8650:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8652:	4907      	ldr	r1, [pc, #28]	; (b8670 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8654:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8656:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8658:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b865a:	f000 f82f 	bl	b86bc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b865e:	4904      	ldr	r1, [pc, #16]	; (b8670 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8660:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8662:	4628      	mov	r0, r5
   b8664:	f000 f82a 	bl	b86bc <_ZnajRKSt9nothrow_t>
    };
   b8668:	60e0      	str	r0, [r4, #12]
}
   b866a:	4620      	mov	r0, r4
   b866c:	bd38      	pop	{r3, r4, r5, pc}
   b866e:	bf00      	nop
   b8670:	000b9ea0 	.word	0x000b9ea0

000b8674 <_Z22__fetch_global_Serial1v>:
{
   b8674:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8676:	4d0e      	ldr	r5, [pc, #56]	; (b86b0 <_Z22__fetch_global_Serial1v+0x3c>)
   b8678:	7829      	ldrb	r1, [r5, #0]
   b867a:	f3bf 8f5b 	dmb	ish
   b867e:	f011 0401 	ands.w	r4, r1, #1
{
   b8682:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8684:	d111      	bne.n	b86aa <_Z22__fetch_global_Serial1v+0x36>
   b8686:	4628      	mov	r0, r5
   b8688:	f7fb fd18 	bl	b40bc <__cxa_guard_acquire>
   b868c:	b168      	cbz	r0, b86aa <_Z22__fetch_global_Serial1v+0x36>
   b868e:	a801      	add	r0, sp, #4
   b8690:	f7ff ffd6 	bl	b8640 <_Z20acquireSerial1Bufferv>
   b8694:	aa01      	add	r2, sp, #4
   b8696:	4621      	mov	r1, r4
   b8698:	4806      	ldr	r0, [pc, #24]	; (b86b4 <_Z22__fetch_global_Serial1v+0x40>)
   b869a:	f7ff fd1d 	bl	b80d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b869e:	4628      	mov	r0, r5
   b86a0:	f7fb fd11 	bl	b40c6 <__cxa_guard_release>
   b86a4:	4804      	ldr	r0, [pc, #16]	; (b86b8 <_Z22__fetch_global_Serial1v+0x44>)
   b86a6:	f000 f91d 	bl	b88e4 <atexit>
    return serial1;
}
   b86aa:	4802      	ldr	r0, [pc, #8]	; (b86b4 <_Z22__fetch_global_Serial1v+0x40>)
   b86ac:	b007      	add	sp, #28
   b86ae:	bd30      	pop	{r4, r5, pc}
   b86b0:	2003e744 	.word	0x2003e744
   b86b4:	2003e748 	.word	0x2003e748
   b86b8:	000b863d 	.word	0x000b863d

000b86bc <_ZnajRKSt9nothrow_t>:
   b86bc:	f7fb bceb 	b.w	b4096 <_Znaj>

000b86c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b86c0:	4901      	ldr	r1, [pc, #4]	; (b86c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b86c2:	f000 b8f9 	b.w	b88b8 <_ZNKSt9type_infoeqERKS_>
   b86c6:	bf00      	nop
   b86c8:	000b9ebc 	.word	0x000b9ebc

000b86cc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b86cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b86ce:	2400      	movs	r4, #0
   b86d0:	2310      	movs	r3, #16
   b86d2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b86d6:	6803      	ldr	r3, [r0, #0]
   b86d8:	4615      	mov	r5, r2
   b86da:	699e      	ldr	r6, [r3, #24]
   b86dc:	6812      	ldr	r2, [r2, #0]
   b86de:	466b      	mov	r3, sp
   b86e0:	e9cd 4400 	strd	r4, r4, [sp]
   b86e4:	47b0      	blx	r6
   b86e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b86ea:	f003 0306 	and.w	r3, r3, #6
   b86ee:	2b06      	cmp	r3, #6
   b86f0:	bf03      	ittte	eq
   b86f2:	9b00      	ldreq	r3, [sp, #0]
   b86f4:	602b      	streq	r3, [r5, #0]
   b86f6:	2001      	moveq	r0, #1
   b86f8:	4620      	movne	r0, r4
   b86fa:	b004      	add	sp, #16
   b86fc:	bd70      	pop	{r4, r5, r6, pc}

000b86fe <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b86fe:	9800      	ldr	r0, [sp, #0]
   b8700:	4290      	cmp	r0, r2
   b8702:	bf14      	ite	ne
   b8704:	2001      	movne	r0, #1
   b8706:	2006      	moveq	r0, #6
   b8708:	4770      	bx	lr
	...

000b870c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b870c:	b510      	push	{r4, lr}
   b870e:	4b03      	ldr	r3, [pc, #12]	; (b871c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8710:	6003      	str	r3, [r0, #0]
   b8712:	4604      	mov	r4, r0
   b8714:	f000 f8cd 	bl	b88b2 <_ZNSt9type_infoD1Ev>
   b8718:	4620      	mov	r0, r4
   b871a:	bd10      	pop	{r4, pc}
   b871c:	000b9efc 	.word	0x000b9efc

000b8720 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8720:	b510      	push	{r4, lr}
   b8722:	4604      	mov	r4, r0
   b8724:	f7ff fff2 	bl	b870c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8728:	4620      	mov	r0, r4
   b872a:	2108      	movs	r1, #8
   b872c:	f7fb fcb7 	bl	b409e <_ZdlPvj>
   b8730:	4620      	mov	r0, r4
   b8732:	bd10      	pop	{r4, pc}

000b8734 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8738:	461f      	mov	r7, r3
   b873a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b873e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8742:	4598      	cmp	r8, r3
   b8744:	4606      	mov	r6, r0
   b8746:	4615      	mov	r5, r2
   b8748:	d107      	bne.n	b875a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b874a:	9907      	ldr	r1, [sp, #28]
   b874c:	f000 f8b4 	bl	b88b8 <_ZNKSt9type_infoeqERKS_>
   b8750:	b118      	cbz	r0, b875a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8752:	7165      	strb	r5, [r4, #5]
   b8754:	2000      	movs	r0, #0
   b8756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b875a:	4639      	mov	r1, r7
   b875c:	4630      	mov	r0, r6
   b875e:	f000 f8ab 	bl	b88b8 <_ZNKSt9type_infoeqERKS_>
   b8762:	2800      	cmp	r0, #0
   b8764:	d0f6      	beq.n	b8754 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8766:	2301      	movs	r3, #1
   b8768:	f8c4 8000 	str.w	r8, [r4]
   b876c:	7125      	strb	r5, [r4, #4]
   b876e:	71a3      	strb	r3, [r4, #6]
   b8770:	e7f0      	b.n	b8754 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8772 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8772:	b538      	push	{r3, r4, r5, lr}
   b8774:	4615      	mov	r5, r2
   b8776:	461c      	mov	r4, r3
   b8778:	f000 f89e 	bl	b88b8 <_ZNKSt9type_infoeqERKS_>
   b877c:	b120      	cbz	r0, b8788 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b877e:	2308      	movs	r3, #8
   b8780:	60e3      	str	r3, [r4, #12]
   b8782:	2306      	movs	r3, #6
   b8784:	6025      	str	r5, [r4, #0]
   b8786:	7123      	strb	r3, [r4, #4]
   b8788:	bd38      	pop	{r3, r4, r5, pc}

000b878a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b878a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b878c:	4605      	mov	r5, r0
   b878e:	460c      	mov	r4, r1
   b8790:	9201      	str	r2, [sp, #4]
   b8792:	461e      	mov	r6, r3
   b8794:	f000 f890 	bl	b88b8 <_ZNKSt9type_infoeqERKS_>
   b8798:	b950      	cbnz	r0, b87b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b879a:	2e03      	cmp	r6, #3
   b879c:	d808      	bhi.n	b87b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b879e:	6823      	ldr	r3, [r4, #0]
   b87a0:	9a01      	ldr	r2, [sp, #4]
   b87a2:	695b      	ldr	r3, [r3, #20]
   b87a4:	4629      	mov	r1, r5
   b87a6:	4620      	mov	r0, r4
   b87a8:	b002      	add	sp, #8
   b87aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b87ae:	4718      	bx	r3
   b87b0:	b002      	add	sp, #8
   b87b2:	bd70      	pop	{r4, r5, r6, pc}

000b87b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b87b4:	b510      	push	{r4, lr}
   b87b6:	4b03      	ldr	r3, [pc, #12]	; (b87c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b87b8:	6003      	str	r3, [r0, #0]
   b87ba:	4604      	mov	r4, r0
   b87bc:	f7ff ffa6 	bl	b870c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b87c0:	4620      	mov	r0, r4
   b87c2:	bd10      	pop	{r4, pc}
   b87c4:	000b9f5c 	.word	0x000b9f5c

000b87c8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b87c8:	b510      	push	{r4, lr}
   b87ca:	4604      	mov	r4, r0
   b87cc:	f7ff fff2 	bl	b87b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b87d0:	4620      	mov	r0, r4
   b87d2:	210c      	movs	r1, #12
   b87d4:	f7fb fc63 	bl	b409e <_ZdlPvj>
   b87d8:	4620      	mov	r0, r4
   b87da:	bd10      	pop	{r4, pc}

000b87dc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b87dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b87de:	9f08      	ldr	r7, [sp, #32]
   b87e0:	4297      	cmp	r7, r2
   b87e2:	4605      	mov	r5, r0
   b87e4:	460e      	mov	r6, r1
   b87e6:	4614      	mov	r4, r2
   b87e8:	d00a      	beq.n	b8800 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b87ea:	68a8      	ldr	r0, [r5, #8]
   b87ec:	6802      	ldr	r2, [r0, #0]
   b87ee:	9708      	str	r7, [sp, #32]
   b87f0:	6a15      	ldr	r5, [r2, #32]
   b87f2:	4631      	mov	r1, r6
   b87f4:	4622      	mov	r2, r4
   b87f6:	46ac      	mov	ip, r5
   b87f8:	b003      	add	sp, #12
   b87fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b87fe:	4760      	bx	ip
   b8800:	4619      	mov	r1, r3
   b8802:	9301      	str	r3, [sp, #4]
   b8804:	f000 f858 	bl	b88b8 <_ZNKSt9type_infoeqERKS_>
   b8808:	9b01      	ldr	r3, [sp, #4]
   b880a:	2800      	cmp	r0, #0
   b880c:	d0ed      	beq.n	b87ea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b880e:	2006      	movs	r0, #6
   b8810:	b003      	add	sp, #12
   b8812:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8814 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8814:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8818:	460d      	mov	r5, r1
   b881a:	4619      	mov	r1, r3
   b881c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8820:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8824:	4681      	mov	r9, r0
   b8826:	4617      	mov	r7, r2
   b8828:	4698      	mov	r8, r3
   b882a:	f000 f845 	bl	b88b8 <_ZNKSt9type_infoeqERKS_>
   b882e:	b190      	cbz	r0, b8856 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8830:	2d00      	cmp	r5, #0
   b8832:	6034      	str	r4, [r6, #0]
   b8834:	7137      	strb	r7, [r6, #4]
   b8836:	db09      	blt.n	b884c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8838:	1961      	adds	r1, r4, r5
   b883a:	458a      	cmp	sl, r1
   b883c:	bf0c      	ite	eq
   b883e:	2106      	moveq	r1, #6
   b8840:	2101      	movne	r1, #1
   b8842:	71b1      	strb	r1, [r6, #6]
   b8844:	2000      	movs	r0, #0
   b8846:	b001      	add	sp, #4
   b8848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b884c:	3502      	adds	r5, #2
   b884e:	d1f9      	bne.n	b8844 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8850:	2301      	movs	r3, #1
   b8852:	71b3      	strb	r3, [r6, #6]
   b8854:	e7f6      	b.n	b8844 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8856:	4554      	cmp	r4, sl
   b8858:	d106      	bne.n	b8868 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b885a:	4659      	mov	r1, fp
   b885c:	4648      	mov	r0, r9
   b885e:	f000 f82b 	bl	b88b8 <_ZNKSt9type_infoeqERKS_>
   b8862:	b108      	cbz	r0, b8868 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8864:	7177      	strb	r7, [r6, #5]
   b8866:	e7ed      	b.n	b8844 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8868:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b886c:	6803      	ldr	r3, [r0, #0]
   b886e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8872:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8876:	69dc      	ldr	r4, [r3, #28]
   b8878:	463a      	mov	r2, r7
   b887a:	4643      	mov	r3, r8
   b887c:	4629      	mov	r1, r5
   b887e:	46a4      	mov	ip, r4
   b8880:	b001      	add	sp, #4
   b8882:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8886:	4760      	bx	ip

000b8888 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b888c:	4607      	mov	r7, r0
   b888e:	460c      	mov	r4, r1
   b8890:	4615      	mov	r5, r2
   b8892:	461e      	mov	r6, r3
   b8894:	f7ff ff6d 	bl	b8772 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8898:	b948      	cbnz	r0, b88ae <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b889a:	68b8      	ldr	r0, [r7, #8]
   b889c:	6803      	ldr	r3, [r0, #0]
   b889e:	699f      	ldr	r7, [r3, #24]
   b88a0:	462a      	mov	r2, r5
   b88a2:	4633      	mov	r3, r6
   b88a4:	4621      	mov	r1, r4
   b88a6:	46bc      	mov	ip, r7
   b88a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b88ac:	4760      	bx	ip
   b88ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b88b2 <_ZNSt9type_infoD1Ev>:
   b88b2:	4770      	bx	lr

000b88b4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b88b4:	2000      	movs	r0, #0
   b88b6:	4770      	bx	lr

000b88b8 <_ZNKSt9type_infoeqERKS_>:
   b88b8:	4281      	cmp	r1, r0
   b88ba:	b508      	push	{r3, lr}
   b88bc:	d00e      	beq.n	b88dc <_ZNKSt9type_infoeqERKS_+0x24>
   b88be:	6840      	ldr	r0, [r0, #4]
   b88c0:	7803      	ldrb	r3, [r0, #0]
   b88c2:	2b2a      	cmp	r3, #42	; 0x2a
   b88c4:	d00c      	beq.n	b88e0 <_ZNKSt9type_infoeqERKS_+0x28>
   b88c6:	6849      	ldr	r1, [r1, #4]
   b88c8:	780b      	ldrb	r3, [r1, #0]
   b88ca:	2b2a      	cmp	r3, #42	; 0x2a
   b88cc:	bf08      	it	eq
   b88ce:	3101      	addeq	r1, #1
   b88d0:	f000 f85a 	bl	b8988 <strcmp>
   b88d4:	fab0 f080 	clz	r0, r0
   b88d8:	0940      	lsrs	r0, r0, #5
   b88da:	bd08      	pop	{r3, pc}
   b88dc:	2001      	movs	r0, #1
   b88de:	e7fc      	b.n	b88da <_ZNKSt9type_infoeqERKS_+0x22>
   b88e0:	2000      	movs	r0, #0
   b88e2:	e7fa      	b.n	b88da <_ZNKSt9type_infoeqERKS_+0x22>

000b88e4 <atexit>:
   b88e4:	2300      	movs	r3, #0
   b88e6:	4601      	mov	r1, r0
   b88e8:	461a      	mov	r2, r3
   b88ea:	4618      	mov	r0, r3
   b88ec:	f000 b906 	b.w	b8afc <__register_exitproc>

000b88f0 <atoi>:
   b88f0:	220a      	movs	r2, #10
   b88f2:	2100      	movs	r1, #0
   b88f4:	f000 b8f8 	b.w	b8ae8 <strtol>

000b88f8 <atol>:
   b88f8:	220a      	movs	r2, #10
   b88fa:	2100      	movs	r1, #0
   b88fc:	f000 b8f4 	b.w	b8ae8 <strtol>

000b8900 <memcpy>:
   b8900:	440a      	add	r2, r1
   b8902:	4291      	cmp	r1, r2
   b8904:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8908:	d100      	bne.n	b890c <memcpy+0xc>
   b890a:	4770      	bx	lr
   b890c:	b510      	push	{r4, lr}
   b890e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8912:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8916:	4291      	cmp	r1, r2
   b8918:	d1f9      	bne.n	b890e <memcpy+0xe>
   b891a:	bd10      	pop	{r4, pc}

000b891c <memset>:
   b891c:	4402      	add	r2, r0
   b891e:	4603      	mov	r3, r0
   b8920:	4293      	cmp	r3, r2
   b8922:	d100      	bne.n	b8926 <memset+0xa>
   b8924:	4770      	bx	lr
   b8926:	f803 1b01 	strb.w	r1, [r3], #1
   b892a:	e7f9      	b.n	b8920 <memset+0x4>

000b892c <srand>:
   b892c:	b538      	push	{r3, r4, r5, lr}
   b892e:	4b10      	ldr	r3, [pc, #64]	; (b8970 <srand+0x44>)
   b8930:	681d      	ldr	r5, [r3, #0]
   b8932:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8934:	4604      	mov	r4, r0
   b8936:	b9b3      	cbnz	r3, b8966 <srand+0x3a>
   b8938:	2018      	movs	r0, #24
   b893a:	f7fe fc17 	bl	b716c <malloc>
   b893e:	4602      	mov	r2, r0
   b8940:	63a8      	str	r0, [r5, #56]	; 0x38
   b8942:	b920      	cbnz	r0, b894e <srand+0x22>
   b8944:	4b0b      	ldr	r3, [pc, #44]	; (b8974 <srand+0x48>)
   b8946:	480c      	ldr	r0, [pc, #48]	; (b8978 <srand+0x4c>)
   b8948:	2142      	movs	r1, #66	; 0x42
   b894a:	f7fe fc3f 	bl	b71cc <__assert_func>
   b894e:	490b      	ldr	r1, [pc, #44]	; (b897c <srand+0x50>)
   b8950:	4b0b      	ldr	r3, [pc, #44]	; (b8980 <srand+0x54>)
   b8952:	e9c0 1300 	strd	r1, r3, [r0]
   b8956:	4b0b      	ldr	r3, [pc, #44]	; (b8984 <srand+0x58>)
   b8958:	6083      	str	r3, [r0, #8]
   b895a:	230b      	movs	r3, #11
   b895c:	8183      	strh	r3, [r0, #12]
   b895e:	2100      	movs	r1, #0
   b8960:	2001      	movs	r0, #1
   b8962:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8966:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8968:	2200      	movs	r2, #0
   b896a:	611c      	str	r4, [r3, #16]
   b896c:	615a      	str	r2, [r3, #20]
   b896e:	bd38      	pop	{r3, r4, r5, pc}
   b8970:	2003e4f0 	.word	0x2003e4f0
   b8974:	000b9f95 	.word	0x000b9f95
   b8978:	000b9fac 	.word	0x000b9fac
   b897c:	abcd330e 	.word	0xabcd330e
   b8980:	e66d1234 	.word	0xe66d1234
   b8984:	0005deec 	.word	0x0005deec

000b8988 <strcmp>:
   b8988:	f810 2b01 	ldrb.w	r2, [r0], #1
   b898c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8990:	2a01      	cmp	r2, #1
   b8992:	bf28      	it	cs
   b8994:	429a      	cmpcs	r2, r3
   b8996:	d0f7      	beq.n	b8988 <strcmp>
   b8998:	1ad0      	subs	r0, r2, r3
   b899a:	4770      	bx	lr

000b899c <strcpy>:
   b899c:	4603      	mov	r3, r0
   b899e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b89a2:	f803 2b01 	strb.w	r2, [r3], #1
   b89a6:	2a00      	cmp	r2, #0
   b89a8:	d1f9      	bne.n	b899e <strcpy+0x2>
   b89aa:	4770      	bx	lr

000b89ac <strlen>:
   b89ac:	4603      	mov	r3, r0
   b89ae:	f813 2b01 	ldrb.w	r2, [r3], #1
   b89b2:	2a00      	cmp	r2, #0
   b89b4:	d1fb      	bne.n	b89ae <strlen+0x2>
   b89b6:	1a18      	subs	r0, r3, r0
   b89b8:	3801      	subs	r0, #1
   b89ba:	4770      	bx	lr

000b89bc <strncpy>:
   b89bc:	b510      	push	{r4, lr}
   b89be:	3901      	subs	r1, #1
   b89c0:	4603      	mov	r3, r0
   b89c2:	b132      	cbz	r2, b89d2 <strncpy+0x16>
   b89c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b89c8:	f803 4b01 	strb.w	r4, [r3], #1
   b89cc:	3a01      	subs	r2, #1
   b89ce:	2c00      	cmp	r4, #0
   b89d0:	d1f7      	bne.n	b89c2 <strncpy+0x6>
   b89d2:	441a      	add	r2, r3
   b89d4:	2100      	movs	r1, #0
   b89d6:	4293      	cmp	r3, r2
   b89d8:	d100      	bne.n	b89dc <strncpy+0x20>
   b89da:	bd10      	pop	{r4, pc}
   b89dc:	f803 1b01 	strb.w	r1, [r3], #1
   b89e0:	e7f9      	b.n	b89d6 <strncpy+0x1a>
	...

000b89e4 <_strtol_l.constprop.0>:
   b89e4:	2b01      	cmp	r3, #1
   b89e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b89ea:	d001      	beq.n	b89f0 <_strtol_l.constprop.0+0xc>
   b89ec:	2b24      	cmp	r3, #36	; 0x24
   b89ee:	d906      	bls.n	b89fe <_strtol_l.constprop.0+0x1a>
   b89f0:	f7fe fbe4 	bl	b71bc <__errno>
   b89f4:	2316      	movs	r3, #22
   b89f6:	6003      	str	r3, [r0, #0]
   b89f8:	2000      	movs	r0, #0
   b89fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b89fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8ae4 <_strtol_l.constprop.0+0x100>
   b8a02:	460d      	mov	r5, r1
   b8a04:	462e      	mov	r6, r5
   b8a06:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8a0a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8a0e:	f017 0708 	ands.w	r7, r7, #8
   b8a12:	d1f7      	bne.n	b8a04 <_strtol_l.constprop.0+0x20>
   b8a14:	2c2d      	cmp	r4, #45	; 0x2d
   b8a16:	d132      	bne.n	b8a7e <_strtol_l.constprop.0+0x9a>
   b8a18:	782c      	ldrb	r4, [r5, #0]
   b8a1a:	2701      	movs	r7, #1
   b8a1c:	1cb5      	adds	r5, r6, #2
   b8a1e:	2b00      	cmp	r3, #0
   b8a20:	d05b      	beq.n	b8ada <_strtol_l.constprop.0+0xf6>
   b8a22:	2b10      	cmp	r3, #16
   b8a24:	d109      	bne.n	b8a3a <_strtol_l.constprop.0+0x56>
   b8a26:	2c30      	cmp	r4, #48	; 0x30
   b8a28:	d107      	bne.n	b8a3a <_strtol_l.constprop.0+0x56>
   b8a2a:	782c      	ldrb	r4, [r5, #0]
   b8a2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8a30:	2c58      	cmp	r4, #88	; 0x58
   b8a32:	d14d      	bne.n	b8ad0 <_strtol_l.constprop.0+0xec>
   b8a34:	786c      	ldrb	r4, [r5, #1]
   b8a36:	2310      	movs	r3, #16
   b8a38:	3502      	adds	r5, #2
   b8a3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8a3e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8a42:	f04f 0c00 	mov.w	ip, #0
   b8a46:	fbb8 f9f3 	udiv	r9, r8, r3
   b8a4a:	4666      	mov	r6, ip
   b8a4c:	fb03 8a19 	mls	sl, r3, r9, r8
   b8a50:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8a54:	f1be 0f09 	cmp.w	lr, #9
   b8a58:	d816      	bhi.n	b8a88 <_strtol_l.constprop.0+0xa4>
   b8a5a:	4674      	mov	r4, lr
   b8a5c:	42a3      	cmp	r3, r4
   b8a5e:	dd24      	ble.n	b8aaa <_strtol_l.constprop.0+0xc6>
   b8a60:	f1bc 0f00 	cmp.w	ip, #0
   b8a64:	db1e      	blt.n	b8aa4 <_strtol_l.constprop.0+0xc0>
   b8a66:	45b1      	cmp	r9, r6
   b8a68:	d31c      	bcc.n	b8aa4 <_strtol_l.constprop.0+0xc0>
   b8a6a:	d101      	bne.n	b8a70 <_strtol_l.constprop.0+0x8c>
   b8a6c:	45a2      	cmp	sl, r4
   b8a6e:	db19      	blt.n	b8aa4 <_strtol_l.constprop.0+0xc0>
   b8a70:	fb06 4603 	mla	r6, r6, r3, r4
   b8a74:	f04f 0c01 	mov.w	ip, #1
   b8a78:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8a7c:	e7e8      	b.n	b8a50 <_strtol_l.constprop.0+0x6c>
   b8a7e:	2c2b      	cmp	r4, #43	; 0x2b
   b8a80:	bf04      	itt	eq
   b8a82:	782c      	ldrbeq	r4, [r5, #0]
   b8a84:	1cb5      	addeq	r5, r6, #2
   b8a86:	e7ca      	b.n	b8a1e <_strtol_l.constprop.0+0x3a>
   b8a88:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8a8c:	f1be 0f19 	cmp.w	lr, #25
   b8a90:	d801      	bhi.n	b8a96 <_strtol_l.constprop.0+0xb2>
   b8a92:	3c37      	subs	r4, #55	; 0x37
   b8a94:	e7e2      	b.n	b8a5c <_strtol_l.constprop.0+0x78>
   b8a96:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8a9a:	f1be 0f19 	cmp.w	lr, #25
   b8a9e:	d804      	bhi.n	b8aaa <_strtol_l.constprop.0+0xc6>
   b8aa0:	3c57      	subs	r4, #87	; 0x57
   b8aa2:	e7db      	b.n	b8a5c <_strtol_l.constprop.0+0x78>
   b8aa4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8aa8:	e7e6      	b.n	b8a78 <_strtol_l.constprop.0+0x94>
   b8aaa:	f1bc 0f00 	cmp.w	ip, #0
   b8aae:	da05      	bge.n	b8abc <_strtol_l.constprop.0+0xd8>
   b8ab0:	2322      	movs	r3, #34	; 0x22
   b8ab2:	6003      	str	r3, [r0, #0]
   b8ab4:	4646      	mov	r6, r8
   b8ab6:	b942      	cbnz	r2, b8aca <_strtol_l.constprop.0+0xe6>
   b8ab8:	4630      	mov	r0, r6
   b8aba:	e79e      	b.n	b89fa <_strtol_l.constprop.0+0x16>
   b8abc:	b107      	cbz	r7, b8ac0 <_strtol_l.constprop.0+0xdc>
   b8abe:	4276      	negs	r6, r6
   b8ac0:	2a00      	cmp	r2, #0
   b8ac2:	d0f9      	beq.n	b8ab8 <_strtol_l.constprop.0+0xd4>
   b8ac4:	f1bc 0f00 	cmp.w	ip, #0
   b8ac8:	d000      	beq.n	b8acc <_strtol_l.constprop.0+0xe8>
   b8aca:	1e69      	subs	r1, r5, #1
   b8acc:	6011      	str	r1, [r2, #0]
   b8ace:	e7f3      	b.n	b8ab8 <_strtol_l.constprop.0+0xd4>
   b8ad0:	2430      	movs	r4, #48	; 0x30
   b8ad2:	2b00      	cmp	r3, #0
   b8ad4:	d1b1      	bne.n	b8a3a <_strtol_l.constprop.0+0x56>
   b8ad6:	2308      	movs	r3, #8
   b8ad8:	e7af      	b.n	b8a3a <_strtol_l.constprop.0+0x56>
   b8ada:	2c30      	cmp	r4, #48	; 0x30
   b8adc:	d0a5      	beq.n	b8a2a <_strtol_l.constprop.0+0x46>
   b8ade:	230a      	movs	r3, #10
   b8ae0:	e7ab      	b.n	b8a3a <_strtol_l.constprop.0+0x56>
   b8ae2:	bf00      	nop
   b8ae4:	000ba006 	.word	0x000ba006

000b8ae8 <strtol>:
   b8ae8:	4613      	mov	r3, r2
   b8aea:	460a      	mov	r2, r1
   b8aec:	4601      	mov	r1, r0
   b8aee:	4802      	ldr	r0, [pc, #8]	; (b8af8 <strtol+0x10>)
   b8af0:	6800      	ldr	r0, [r0, #0]
   b8af2:	f7ff bf77 	b.w	b89e4 <_strtol_l.constprop.0>
   b8af6:	bf00      	nop
   b8af8:	2003e4f0 	.word	0x2003e4f0

000b8afc <__register_exitproc>:
   b8afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8b00:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8bbc <__register_exitproc+0xc0>
   b8b04:	4606      	mov	r6, r0
   b8b06:	f8d8 0000 	ldr.w	r0, [r8]
   b8b0a:	461f      	mov	r7, r3
   b8b0c:	460d      	mov	r5, r1
   b8b0e:	4691      	mov	r9, r2
   b8b10:	f000 f856 	bl	b8bc0 <__retarget_lock_acquire_recursive>
   b8b14:	4b25      	ldr	r3, [pc, #148]	; (b8bac <__register_exitproc+0xb0>)
   b8b16:	681c      	ldr	r4, [r3, #0]
   b8b18:	b934      	cbnz	r4, b8b28 <__register_exitproc+0x2c>
   b8b1a:	4c25      	ldr	r4, [pc, #148]	; (b8bb0 <__register_exitproc+0xb4>)
   b8b1c:	601c      	str	r4, [r3, #0]
   b8b1e:	4b25      	ldr	r3, [pc, #148]	; (b8bb4 <__register_exitproc+0xb8>)
   b8b20:	b113      	cbz	r3, b8b28 <__register_exitproc+0x2c>
   b8b22:	681b      	ldr	r3, [r3, #0]
   b8b24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8b28:	6863      	ldr	r3, [r4, #4]
   b8b2a:	2b1f      	cmp	r3, #31
   b8b2c:	dd07      	ble.n	b8b3e <__register_exitproc+0x42>
   b8b2e:	f8d8 0000 	ldr.w	r0, [r8]
   b8b32:	f000 f847 	bl	b8bc4 <__retarget_lock_release_recursive>
   b8b36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8b3e:	b34e      	cbz	r6, b8b94 <__register_exitproc+0x98>
   b8b40:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8b44:	b988      	cbnz	r0, b8b6a <__register_exitproc+0x6e>
   b8b46:	4b1c      	ldr	r3, [pc, #112]	; (b8bb8 <__register_exitproc+0xbc>)
   b8b48:	b923      	cbnz	r3, b8b54 <__register_exitproc+0x58>
   b8b4a:	f8d8 0000 	ldr.w	r0, [r8]
   b8b4e:	f000 f838 	bl	b8bc2 <__retarget_lock_release>
   b8b52:	e7f0      	b.n	b8b36 <__register_exitproc+0x3a>
   b8b54:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8b58:	f7fe fb08 	bl	b716c <malloc>
   b8b5c:	2800      	cmp	r0, #0
   b8b5e:	d0f4      	beq.n	b8b4a <__register_exitproc+0x4e>
   b8b60:	2300      	movs	r3, #0
   b8b62:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8b66:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8b6a:	6863      	ldr	r3, [r4, #4]
   b8b6c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8b70:	2201      	movs	r2, #1
   b8b72:	409a      	lsls	r2, r3
   b8b74:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8b78:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8b7c:	4313      	orrs	r3, r2
   b8b7e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8b82:	2e02      	cmp	r6, #2
   b8b84:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8b88:	bf02      	ittt	eq
   b8b8a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8b8e:	4313      	orreq	r3, r2
   b8b90:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8b94:	6863      	ldr	r3, [r4, #4]
   b8b96:	f8d8 0000 	ldr.w	r0, [r8]
   b8b9a:	1c5a      	adds	r2, r3, #1
   b8b9c:	3302      	adds	r3, #2
   b8b9e:	6062      	str	r2, [r4, #4]
   b8ba0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8ba4:	f000 f80e 	bl	b8bc4 <__retarget_lock_release_recursive>
   b8ba8:	2000      	movs	r0, #0
   b8baa:	e7c6      	b.n	b8b3a <__register_exitproc+0x3e>
   b8bac:	2003e7e8 	.word	0x2003e7e8
   b8bb0:	2003e75c 	.word	0x2003e75c
   b8bb4:	00000000 	.word	0x00000000
   b8bb8:	000b716d 	.word	0x000b716d
   b8bbc:	2003e554 	.word	0x2003e554

000b8bc0 <__retarget_lock_acquire_recursive>:
   b8bc0:	4770      	bx	lr

000b8bc2 <__retarget_lock_release>:
   b8bc2:	4770      	bx	lr

000b8bc4 <__retarget_lock_release_recursive>:
   b8bc4:	4770      	bx	lr

000b8bc6 <link_code_end>:
	...

000b8bc8 <dynalib_user>:
   b8bc8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b8bd8:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8be8:	7620 7269 7574 6c61 6300 6461 2f65 6163      virtual.cade/ca
   b8bf8:	7370 6f74 656e 632f 6c61 6e65 6164 6f72     pstone/calendaro
   b8c08:	7475 2500 0069 6c25 0069 6c53 6469 7265     ut.%i.%li.Slider
   b8c18:	5200 7365 7465 4d00 7465 6f72 6f6e 656d     .Reset.Metronome
   b8c28:	5420 676f 6c67 0065 6f67 6300 6461 2f65      Toggle.go.cade/
   b8c38:	6163 7370 6f74 656e 632f 6c61 6e65 6164     capstone/calenda
   b8c48:	6972 006e 7250 6361 6974 6563 0073 6954     rin.Practices.Ti
   b8c58:	656d 3a72 7000 6d77 6400 0077 7761 6700     mer:.pwm.dw.aw.g
   b8c68:	7665 5539 576c 7548 5370 7938 4243 324a     ev9UlWHupS8yCBJ2
   b8c78:	7077 5844 4e44 366d 4854 754d 6f30 0053     wpDXDNm6THMu0oS.
   b8c88:	7276 4700 6572 7461 6a20 626f 6320 6572     vr.Great job cre
   b8c98:	7461 6e69 2067 6e65 756f 6867 7020 6172     ating enough pra
   b8ca8:	7463 6369 2065 7665 6e65 7374 7420 6968     ctice events thi
   b8cb8:	2073 6577 6b65 0021 6f59 2075 656e 6465     s week!.You need
   b8cc8:	7420 206f 6461 2064 2000 6f6d 6572 7020      to add . more p
   b8cd8:	6172 7463 6369 2065 7665 6e65 7374 7420     ractice events t
   b8ce8:	6968 2073 6577 6b65 002e 616c 2e62 6874     his week..lab.th
   b8cf8:	7765 6c63 632e 6d6f                          ewcl.com.

000b8d01 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   b8d01:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   b8d11:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   b8d21:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   b8d31:	6974 6c63 2065 7241 6f67 006e 7562 6c69     ticle Argon.buil
   b8d41:	0064 754a 206c 3331 3220 3230 2032 3431     d.Jul 13 2022 14
   b8d51:	323a 3a39 3735 0000                          :29:57...

000b8d5a <_ZL4font>:
   b8d5a:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8d6a:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8d7a:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8d8a:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b8d9a:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8daa:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8dba:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8dca:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8dda:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8dea:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8dfa:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8e0a:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8e1a:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8e2a:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8e3a:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8e4a:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8e5a:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8e6a:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8e7a:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8e8a:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8e9a:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8eaa:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8eba:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8eca:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8eda:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8eea:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8efa:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8f0a:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8f1a:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8f2a:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8f3a:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8f4a:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8f5a:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8f6a:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8f7a:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8f8a:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8f9a:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8faa:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8fba:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8fca:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8fda:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8fea:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b8ffa:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b900a:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b901a:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b902a:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b903a:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b904a:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b905a:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b906a:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b907a:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b908a:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b909a:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b90aa:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b90ba:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b90ca:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b90da:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b90ea:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b90fa:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b910a:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b911a:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b912a:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b913a:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b914a:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b915a:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b916a:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b917a:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b918a:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b919a:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b91aa:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b91ba:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b91ca:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b91da:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b91ea:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b91fa:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b920a:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b921a:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b922a:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b923a:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b924a:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000b925c <_ZTV12Adafruit_GFX>:
	...
   b926c:	56bd 000b 75d5 000b 40a5 000b 50c3 000b     .V...u...@...P..
   b927c:	50c5 000b 50f7 000b 50d3 000b 50e5 000b     .P...P...P...P..
   b928c:	5005 000b 50c3 000b 52ef 000b 52ed 000b     .P...P...R...R..
   b929c:	510f 000b 514d 000b 5187 000b 51cd 000b     .Q..MQ...Q...Q..
   b92ac:	51e9 000b 526d 000b 6564 6166 6c75 2074     .Q..mR..default 
   b92bc:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b92cc:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b92dc:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b92ec:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b92f8 <_ZTVN8particle11SPISettingsE>:
	...
   b9300:	57f9 000b 57cb 000b 57cd 000b               .W...W...W..

000b930c <_ZL12splash1_data>:
   b930c:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b931c:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b932c:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b933c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b934c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b935c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b9374:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b9384:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b9394:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b93a4:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b93b4:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b93c4:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b93d4:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b93e4:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b93f4:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b9404:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b9414:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b9424:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b9434:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b9444:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b9454:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b9464:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b9474:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b9484:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b949c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b94b4:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b94c4:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b94d4:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b94e4:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b94f4:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b9504:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b9514:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b9524:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b9534:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b9544:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b9554:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b9564:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b9574:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b9584:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b9594:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b95a4:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b95b4:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b95c4:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b95cc <_ZL12splash2_data>:
   b95cc:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b95dc:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b95ec:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b9608:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b9618:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b9628:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b9638:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b9648:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b9658:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b9668:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b9678:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b9688:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b9698:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b96a8:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b96b8:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b96c8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b96d8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b96e8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b96f8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b9708:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b9718:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b9728:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b9738:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b9748:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b9760:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b9770:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b9780:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b9790:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b97a0:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b97ac <_ZTV16Adafruit_SSD1306>:
	...
   b97b4:	584d 000b 5865 000b 56bd 000b 75d5 000b     MX..eX...V...u..
   b97c4:	5879 000b 50c3 000b 50c5 000b 50f7 000b     yX...P...P...P..
   b97d4:	50d3 000b 50e5 000b 5005 000b 50c3 000b     .P...P...P...P..
   b97e4:	52ef 000b 5a17 000b 5fbf 000b 5f71 000b     .R...Z..._..q_..
   b97f4:	5187 000b 51cd 000b 51e9 000b 526d 000b     .Q...Q...Q..mR..

000b9804 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b9804:	8000 e0c0 f8f0 fefc                         ........

000b980c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b980c:	0100 0703 1f0f 7f3f                         ......?.

000b9814 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b9814:	d5ae a880                                   ....

000b9818 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b9818:	00d3 8d40                                   ..@.

000b981c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b981c:	0020 c8a1                                    ...

000b9820 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b9820:	40db a6a4 af2e                              .@....

000b9826 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b9826:	02da 8f81                                   ....

000b982a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b982a:	12da                                         ...

000b982d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b982d:	02da                                         ...

000b9830 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b9830:	0022 21ff 0000 4d04 5451 0454 0600 514d     "..!...MQTT...MQ
   b9840:	7349 7064 0003 0000                         Isdp....

000b9848 <_ZL22BlynkReadHandlerVector>:
   b9848:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9858:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9868:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9878:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9888:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9898:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b98a8:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b98b8:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b98c8:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b98d8:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b98e8:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b98f8:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9908:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9918:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9928:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9938:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9948:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9958:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9968:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9978:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9988:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9998:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b99a8:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b99b8:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b99c8:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b99d8:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b99e8:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b99f8:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9a08:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9a18:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9a28:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..
   b9a38:	6aa5 000b 6aa5 000b 6aa5 000b 6aa5 000b     .j...j...j...j..

000b9a48 <_ZL23BlynkWriteHandlerVector>:
   b9a48:	4249 000b 42c5 000b 426d 000b 429d 000b     IB...B..mB...B..
   b9a58:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9a68:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9a78:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9a88:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9a98:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9aa8:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9ab8:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9ac8:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9ad8:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9ae8:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9af8:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9b08:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9b18:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9b28:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9b38:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9b48:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9b58:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9b68:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9b78:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9b88:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9b98:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9ba8:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9bb8:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9bc8:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9bd8:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9be8:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9bf8:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9c08:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9c18:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9c28:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..
   b9c38:	6aa7 000b 6aa7 000b 6aa7 000b 6aa7 000b     .j...j...j...j..

000b9c48 <_ZTV16OledWingAdafruit>:
	...
   b9c50:	6ad5 000b 6af5 000b 56bd 000b 75d5 000b     .j...j...V...u..
   b9c60:	5879 000b 50c3 000b 50c5 000b 50f7 000b     yX...P...P...P..
   b9c70:	50d3 000b 50e5 000b 5005 000b 50c3 000b     .P...P...P...P..
   b9c80:	52ef 000b 5a17 000b 5fbf 000b 5f71 000b     .R...Z..._..q_..
   b9c90:	5187 000b 51cd 000b 51e9 000b 526d 000b     .Q...Q...Q..mR..

000b9ca0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b9ca8 <_ZTVN5spark13EthernetClassE>:
	...
   b9cb0:	7263 000b 7259 000b 724f 000b 7245 000b     cr..Yr..Or..Er..
   b9cc0:	7239 000b 722d 000b 74b1 000b 74b9 000b     9r..-r...t...t..
   b9cd0:	7221 000b 7219 000b 720f 000b 7205 000b     !r...r...r...r..
   b9ce0:	74e9 000b                                   .t..

000b9ce4 <_ZTV7TwoWire>:
	...
   b9cec:	7281 000b 72cb 000b 72a3 000b 7283 000b     .r...r...r...r..
   b9cfc:	72ab 000b 72b3 000b 72bb 000b 72c3 000b     .r...r...r...r..

000b9d0c <_ZTV9IPAddress>:
	...
   b9d14:	733d 000b 732d 000b 732f 000b 7061 0070     =s..-s../s..app.

000b9d24 <_ZTVN5spark12NetworkClassE>:
	...
   b9d2c:	7471 000b 747b 000b 7485 000b 748f 000b     qt..{t...t...t..
   b9d3c:	7499 000b 74a5 000b 74b1 000b 74b9 000b     .t...t...t...t..
   b9d4c:	74c1 000b 74cd 000b 74d5 000b 74df 000b     .t...t...t...t..
   b9d5c:	74e9 000b                                   .t..

000b9d60 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9d60:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b9d70:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b9d80 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9d88:	7aed 000b 7b11 000b 8043 000b 7b1f 000b     .z...{..C....{..
   b9d98:	7af1 000b                                   .z..

000b9d9c <_ZTV9TCPClient>:
	...
   b9da4:	7b9d 000b 7bd1 000b 7a69 000b 7a83 000b     .{...{..iz...z..
   b9db4:	7ed9 000b 7aad 000b 7d4f 000b 7ae1 000b     .~...z..O}...z..
   b9dc4:	7de1 000b 7c21 000b 7d7d 000b 7f8d 000b     .}..!|..}}......
   b9dd4:	7d1d 000b 7ae3 000b 7a95 000b 7b25 000b     .}...z...z..%{..
   b9de4:	7c01 000b 5925 252d 2d6d 6425 2554 3a48     .|..%Y-%m-%dT%H:
   b9df4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b9e04 <_ZTV11USARTSerial>:
	...
   b9e0c:	805d 000b 80c9 000b 80a1 000b 75d5 000b     ]............u..
   b9e1c:	8071 000b 808d 000b 807f 000b 809b 000b     q...............
   b9e2c:	805f 000b 8063 000b                         _...c...

000b9e34 <_ZTV9USBSerial>:
	...
   b9e3c:	8107 000b 816f 000b 8145 000b 75d5 000b     ....o...E....u..
   b9e4c:	8137 000b 8109 000b 8119 000b 8169 000b     7...........i...
   b9e5c:	8129 000b 8101 000b                         ).......

000b9e64 <_ZTVN5spark9WiFiClassE>:
	...
   b9e6c:	8267 000b 825d 000b 8253 000b 8209 000b     g...]...S.......
   b9e7c:	8247 000b 823b 000b 74b1 000b 74b9 000b     G...;....t...t..
   b9e8c:	822f 000b 8227 000b 821d 000b 8213 000b     /...'...........
   b9e9c:	74e9 000b                                   .t..

000b9ea0 <_ZSt7nothrow>:
	...

000b9ea1 <_ZTSSt19_Sp_make_shared_tag>:
   b9ea1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9eb1:	6572 5f64 6174 0067 0000                     red_tag....

000b9ebc <_ZTISt19_Sp_make_shared_tag>:
   b9ebc:	9efc 000b 9ea1 000b                         ........

000b9ec4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9ec4:	9f5c 000b 9ed0 000b 9f80 000b               \...........

000b9ed0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9ed0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b9ee0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b9ef0:	0045 0000                                   E...

000b9ef4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9ef4:	0000 0000 9ec4 000b 870d 000b 8721 000b     ............!...
   b9f04:	88b5 000b 88b5 000b 878b 000b 86cd 000b     ................
   b9f14:	8773 000b 8735 000b 86ff 000b               s...5.......

000b9f20 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9f20:	9f5c 000b 9f2c 000b 9ec4 000b               \...,.......

000b9f2c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9f2c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b9f3c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b9f4c:	666e 456f 0000 0000                         nfoE....

000b9f54 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9f54:	0000 0000 9f20 000b 87b5 000b 87c9 000b     .... ...........
   b9f64:	88b5 000b 88b5 000b 878b 000b 86cd 000b     ................
   b9f74:	8889 000b 8815 000b 87dd 000b               ............

000b9f80 <_ZTISt9type_info>:
   b9f80:	9efc 000b 9f88 000b                         ........

000b9f88 <_ZTSSt9type_info>:
   b9f88:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b9f98:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b9fa8:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b9fb8:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b9fc8:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b9fd8:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b9fe8:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b9ff8:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000ba005 <_ctype_>:
   ba005:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba015:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba025:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba035:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba045:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba055:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba065:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba075:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba085:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba106 <link_const_variable_data_end>:
	...

000ba108 <link_constructors_location>:
   ba108:	000b4f85 	.word	0x000b4f85
   ba10c:	000b71f5 	.word	0x000b71f5
   ba110:	000b726d 	.word	0x000b726d
   ba114:	000b7461 	.word	0x000b7461
   ba118:	000b75c1 	.word	0x000b75c1
   ba11c:	000b76d9 	.word	0x000b76d9
   ba120:	000b7a45 	.word	0x000b7a45
   ba124:	000b8049 	.word	0x000b8049
   ba128:	000b8271 	.word	0x000b8271

000ba12c <link_constructors_end>:
   ba12c:	00000000 	.word	0x00000000
